
Sync_Board_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9fc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800bb40  0800bb40  0001bb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbe8  0800bbe8  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbe8  0800bbe8  0001bbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbf0  0800bbf0  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbf0  0800bbf0  0001bbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbf4  0800bbf4  0001bbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800bbf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a4  20000210  0800be08  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017b4  0800be08  000217b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a33  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e8  00000000  00000000  00038c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0003c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  0003d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179fb  00000000  00000000  0003e370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ff2  00000000  00000000  00055d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082019  00000000  00000000  00069d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ebd76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e4  00000000  00000000  000ebdcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000210 	.word	0x20000210
 800015c:	00000000 	.word	0x00000000
 8000160:	0800bb24 	.word	0x0800bb24

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000214 	.word	0x20000214
 800017c:	0800bb24 	.word	0x0800bb24

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2uiz>:
 8000a58:	004a      	lsls	r2, r1, #1
 8000a5a:	d211      	bcs.n	8000a80 <__aeabi_d2uiz+0x28>
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d211      	bcs.n	8000a86 <__aeabi_d2uiz+0x2e>
 8000a62:	d50d      	bpl.n	8000a80 <__aeabi_d2uiz+0x28>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d40e      	bmi.n	8000a8c <__aeabi_d2uiz+0x34>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_d2uiz+0x3a>
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0000 	mov.w	r0, #0
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_uldivmod>:
 8000a98:	b953      	cbnz	r3, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9a:	b94a      	cbnz	r2, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	2800      	cmpeq	r0, #0
 8000aa2:	bf1c      	itt	ne
 8000aa4:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa8:	f04f 30ff 	movne.w	r0, #4294967295
 8000aac:	f000 b96e 	b.w	8000d8c <__aeabi_idiv0>
 8000ab0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab8:	f000 f806 	bl	8000ac8 <__udivmoddi4>
 8000abc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac4:	b004      	add	sp, #16
 8000ac6:	4770      	bx	lr

08000ac8 <__udivmoddi4>:
 8000ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000acc:	9e08      	ldr	r6, [sp, #32]
 8000ace:	460d      	mov	r5, r1
 8000ad0:	4604      	mov	r4, r0
 8000ad2:	468e      	mov	lr, r1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f040 8083 	bne.w	8000be0 <__udivmoddi4+0x118>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4617      	mov	r7, r2
 8000ade:	d947      	bls.n	8000b70 <__udivmoddi4+0xa8>
 8000ae0:	fab2 f382 	clz	r3, r2
 8000ae4:	b14b      	cbz	r3, 8000afa <__udivmoddi4+0x32>
 8000ae6:	f1c3 0120 	rsb	r1, r3, #32
 8000aea:	fa05 fe03 	lsl.w	lr, r5, r3
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	409f      	lsls	r7, r3
 8000af4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000af8:	409c      	lsls	r4, r3
 8000afa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000afe:	fbbe fcf8 	udiv	ip, lr, r8
 8000b02:	fa1f f987 	uxth.w	r9, r7
 8000b06:	fb08 e21c 	mls	r2, r8, ip, lr
 8000b0a:	fb0c f009 	mul.w	r0, ip, r9
 8000b0e:	0c21      	lsrs	r1, r4, #16
 8000b10:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000b14:	4290      	cmp	r0, r2
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x66>
 8000b18:	18ba      	adds	r2, r7, r2
 8000b1a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000b1e:	f080 8118 	bcs.w	8000d52 <__udivmoddi4+0x28a>
 8000b22:	4290      	cmp	r0, r2
 8000b24:	f240 8115 	bls.w	8000d52 <__udivmoddi4+0x28a>
 8000b28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b2c:	443a      	add	r2, r7
 8000b2e:	1a12      	subs	r2, r2, r0
 8000b30:	fbb2 f0f8 	udiv	r0, r2, r8
 8000b34:	fb08 2210 	mls	r2, r8, r0, r2
 8000b38:	fb00 f109 	mul.w	r1, r0, r9
 8000b3c:	b2a4      	uxth	r4, r4
 8000b3e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b42:	42a1      	cmp	r1, r4
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0x92>
 8000b46:	193c      	adds	r4, r7, r4
 8000b48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b4c:	f080 8103 	bcs.w	8000d56 <__udivmoddi4+0x28e>
 8000b50:	42a1      	cmp	r1, r4
 8000b52:	f240 8100 	bls.w	8000d56 <__udivmoddi4+0x28e>
 8000b56:	3802      	subs	r0, #2
 8000b58:	443c      	add	r4, r7
 8000b5a:	1a64      	subs	r4, r4, r1
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa4>
 8000b64:	2200      	movs	r2, #0
 8000b66:	40dc      	lsrs	r4, r3
 8000b68:	e9c6 4200 	strd	r4, r2, [r6]
 8000b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xac>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f382 	clz	r3, r2
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14f      	bne.n	8000c1c <__udivmoddi4+0x154>
 8000b7c:	1a8d      	subs	r5, r1, r2
 8000b7e:	2101      	movs	r1, #1
 8000b80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000b84:	fa1f f882 	uxth.w	r8, r2
 8000b88:	fbb5 fcfe 	udiv	ip, r5, lr
 8000b8c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000b90:	fb08 f00c 	mul.w	r0, r8, ip
 8000b94:	0c22      	lsrs	r2, r4, #16
 8000b96:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000b9a:	42a8      	cmp	r0, r5
 8000b9c:	d907      	bls.n	8000bae <__udivmoddi4+0xe6>
 8000b9e:	197d      	adds	r5, r7, r5
 8000ba0:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000ba4:	d202      	bcs.n	8000bac <__udivmoddi4+0xe4>
 8000ba6:	42a8      	cmp	r0, r5
 8000ba8:	f200 80e9 	bhi.w	8000d7e <__udivmoddi4+0x2b6>
 8000bac:	4694      	mov	ip, r2
 8000bae:	1a2d      	subs	r5, r5, r0
 8000bb0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000bb4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	b2a4      	uxth	r4, r4
 8000bbe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc2:	45a0      	cmp	r8, r4
 8000bc4:	d907      	bls.n	8000bd6 <__udivmoddi4+0x10e>
 8000bc6:	193c      	adds	r4, r7, r4
 8000bc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bcc:	d202      	bcs.n	8000bd4 <__udivmoddi4+0x10c>
 8000bce:	45a0      	cmp	r8, r4
 8000bd0:	f200 80d9 	bhi.w	8000d86 <__udivmoddi4+0x2be>
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	eba4 0408 	sub.w	r4, r4, r8
 8000bda:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bde:	e7c0      	b.n	8000b62 <__udivmoddi4+0x9a>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x12e>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	f000 80b1 	beq.w	8000d4c <__udivmoddi4+0x284>
 8000bea:	2100      	movs	r1, #0
 8000bec:	e9c6 0500 	strd	r0, r5, [r6]
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	fab3 f183 	clz	r1, r3
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d14b      	bne.n	8000c96 <__udivmoddi4+0x1ce>
 8000bfe:	42ab      	cmp	r3, r5
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0x140>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80b9 	bhi.w	8000d7a <__udivmoddi4+0x2b2>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	469e      	mov	lr, r3
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d0aa      	beq.n	8000b6c <__udivmoddi4+0xa4>
 8000c16:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c1a:	e7a7      	b.n	8000b6c <__udivmoddi4+0xa4>
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	f1c3 0220 	rsb	r2, r3, #32
 8000c22:	40d1      	lsrs	r1, r2
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c2c:	fa1f f887 	uxth.w	r8, r7
 8000c30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c34:	fa24 f202 	lsr.w	r2, r4, r2
 8000c38:	409d      	lsls	r5, r3
 8000c3a:	fb00 fc08 	mul.w	ip, r0, r8
 8000c3e:	432a      	orrs	r2, r5
 8000c40:	0c15      	lsrs	r5, r2, #16
 8000c42:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000c46:	45ac      	cmp	ip, r5
 8000c48:	fa04 f403 	lsl.w	r4, r4, r3
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x19a>
 8000c4e:	197d      	adds	r5, r7, r5
 8000c50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c54:	f080 808f 	bcs.w	8000d76 <__udivmoddi4+0x2ae>
 8000c58:	45ac      	cmp	ip, r5
 8000c5a:	f240 808c 	bls.w	8000d76 <__udivmoddi4+0x2ae>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	443d      	add	r5, r7
 8000c62:	eba5 050c 	sub.w	r5, r5, ip
 8000c66:	fbb5 f1fe 	udiv	r1, r5, lr
 8000c6a:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000c6e:	fb01 f908 	mul.w	r9, r1, r8
 8000c72:	b295      	uxth	r5, r2
 8000c74:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c78:	45a9      	cmp	r9, r5
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x1c4>
 8000c7c:	197d      	adds	r5, r7, r5
 8000c7e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000c82:	d274      	bcs.n	8000d6e <__udivmoddi4+0x2a6>
 8000c84:	45a9      	cmp	r9, r5
 8000c86:	d972      	bls.n	8000d6e <__udivmoddi4+0x2a6>
 8000c88:	3902      	subs	r1, #2
 8000c8a:	443d      	add	r5, r7
 8000c8c:	eba5 0509 	sub.w	r5, r5, r9
 8000c90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c94:	e778      	b.n	8000b88 <__udivmoddi4+0xc0>
 8000c96:	f1c1 0720 	rsb	r7, r1, #32
 8000c9a:	408b      	lsls	r3, r1
 8000c9c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca0:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca4:	fa25 f407 	lsr.w	r4, r5, r7
 8000ca8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cac:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cb0:	fa1f f88c 	uxth.w	r8, ip
 8000cb4:	fb0e 4419 	mls	r4, lr, r9, r4
 8000cb8:	fa20 f307 	lsr.w	r3, r0, r7
 8000cbc:	fb09 fa08 	mul.w	sl, r9, r8
 8000cc0:	408d      	lsls	r5, r1
 8000cc2:	431d      	orrs	r5, r3
 8000cc4:	0c2b      	lsrs	r3, r5, #16
 8000cc6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cca:	45a2      	cmp	sl, r4
 8000ccc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd0:	fa00 f301 	lsl.w	r3, r0, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x222>
 8000cd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cda:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cde:	d248      	bcs.n	8000d72 <__udivmoddi4+0x2aa>
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d946      	bls.n	8000d72 <__udivmoddi4+0x2aa>
 8000ce4:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce8:	4464      	add	r4, ip
 8000cea:	eba4 040a 	sub.w	r4, r4, sl
 8000cee:	fbb4 f0fe 	udiv	r0, r4, lr
 8000cf2:	fb0e 4410 	mls	r4, lr, r0, r4
 8000cf6:	fb00 fa08 	mul.w	sl, r0, r8
 8000cfa:	b2ad      	uxth	r5, r5
 8000cfc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x24e>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d0c:	d22d      	bcs.n	8000d6a <__udivmoddi4+0x2a2>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d92b      	bls.n	8000d6a <__udivmoddi4+0x2a2>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4464      	add	r4, ip
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c6      	mov	lr, r8
 8000d26:	464d      	mov	r5, r9
 8000d28:	d319      	bcc.n	8000d5e <__udivmoddi4+0x296>
 8000d2a:	d016      	beq.n	8000d5a <__udivmoddi4+0x292>
 8000d2c:	b15e      	cbz	r6, 8000d46 <__udivmoddi4+0x27e>
 8000d2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d32:	eb64 0405 	sbc.w	r4, r4, r5
 8000d36:	fa04 f707 	lsl.w	r7, r4, r7
 8000d3a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	40cc      	lsrs	r4, r1
 8000d42:	e9c6 7400 	strd	r7, r4, [r6]
 8000d46:	2100      	movs	r1, #0
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	4630      	mov	r0, r6
 8000d50:	e70c      	b.n	8000b6c <__udivmoddi4+0xa4>
 8000d52:	468c      	mov	ip, r1
 8000d54:	e6eb      	b.n	8000b2e <__udivmoddi4+0x66>
 8000d56:	4610      	mov	r0, r2
 8000d58:	e6ff      	b.n	8000b5a <__udivmoddi4+0x92>
 8000d5a:	4543      	cmp	r3, r8
 8000d5c:	d2e6      	bcs.n	8000d2c <__udivmoddi4+0x264>
 8000d5e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d62:	eb69 050c 	sbc.w	r5, r9, ip
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7e0      	b.n	8000d2c <__udivmoddi4+0x264>
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	e7d3      	b.n	8000d16 <__udivmoddi4+0x24e>
 8000d6e:	4611      	mov	r1, r2
 8000d70:	e78c      	b.n	8000c8c <__udivmoddi4+0x1c4>
 8000d72:	4681      	mov	r9, r0
 8000d74:	e7b9      	b.n	8000cea <__udivmoddi4+0x222>
 8000d76:	4608      	mov	r0, r1
 8000d78:	e773      	b.n	8000c62 <__udivmoddi4+0x19a>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e749      	b.n	8000c12 <__udivmoddi4+0x14a>
 8000d7e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d82:	443d      	add	r5, r7
 8000d84:	e713      	b.n	8000bae <__udivmoddi4+0xe6>
 8000d86:	3802      	subs	r0, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	e724      	b.n	8000bd6 <__udivmoddi4+0x10e>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da6:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <MX_GPIO_Init+0x158>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a4f      	ldr	r2, [pc, #316]	; (8000ee8 <MX_GPIO_Init+0x158>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b4d      	ldr	r3, [pc, #308]	; (8000ee8 <MX_GPIO_Init+0x158>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 0320 	and.w	r3, r3, #32
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b4a      	ldr	r3, [pc, #296]	; (8000ee8 <MX_GPIO_Init+0x158>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a49      	ldr	r2, [pc, #292]	; (8000ee8 <MX_GPIO_Init+0x158>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b47      	ldr	r3, [pc, #284]	; (8000ee8 <MX_GPIO_Init+0x158>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <MX_GPIO_Init+0x158>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4a43      	ldr	r2, [pc, #268]	; (8000ee8 <MX_GPIO_Init+0x158>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	61d3      	str	r3, [r2, #28]
 8000de2:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <MX_GPIO_Init+0x158>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MD1_O_Pin|MD7_O_Pin|MD6_O_Pin|MD3_O_Pin
 8000dee:	2201      	movs	r2, #1
 8000df0:	f241 31ce 	movw	r1, #5070	; 0x13ce
 8000df4:	483d      	ldr	r0, [pc, #244]	; (8000eec <MX_GPIO_Init+0x15c>)
 8000df6:	f002 fdca 	bl	800398e <HAL_GPIO_WritePin>
                          |LED_blue_Pin|LED_green_Pin|LED_red_Pin|MD2_O_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MD5_O_Pin|MD4_O_Pin, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000e00:	483b      	ldr	r0, [pc, #236]	; (8000ef0 <MX_GPIO_Init+0x160>)
 8000e02:	f002 fdc4 	bl	800398e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4835      	ldr	r0, [pc, #212]	; (8000ef0 <MX_GPIO_Init+0x160>)
 8000e1c:	f002 fc20 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button2_Pin;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	482d      	ldr	r0, [pc, #180]	; (8000eec <MX_GPIO_Init+0x15c>)
 8000e36:	f002 fc13 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MD1_O_Pin|MD7_O_Pin|MD6_O_Pin|MD3_O_Pin
 8000e3a:	f241 33ce 	movw	r3, #5070	; 0x13ce
 8000e3e:	60fb      	str	r3, [r7, #12]
                          |LED_blue_Pin|LED_green_Pin|LED_red_Pin|MD2_O_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	4619      	mov	r1, r3
 8000e52:	4826      	ldr	r0, [pc, #152]	; (8000eec <MX_GPIO_Init+0x15c>)
 8000e54:	f002 fc04 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MD6_I_Pin;
 8000e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MD6_I_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	481f      	ldr	r0, [pc, #124]	; (8000eec <MX_GPIO_Init+0x15c>)
 8000e70:	f002 fbf6 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MD5_I_Pin;
 8000e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MD5_I_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <MX_GPIO_Init+0x160>)
 8000e8c:	f002 fbe8 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MD5_O_Pin|MD4_O_Pin;
 8000e90:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <MX_GPIO_Init+0x160>)
 8000eaa:	f002 fbd9 	bl	8003660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2006      	movs	r0, #6
 8000eb4:	f002 fb9d 	bl	80035f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000eb8:	2006      	movs	r0, #6
 8000eba:	f002 fbb6 	bl	800362a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2017      	movs	r0, #23
 8000ec4:	f002 fb95 	bl	80035f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ec8:	2017      	movs	r0, #23
 8000eca:	f002 fbae 	bl	800362a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2028      	movs	r0, #40	; 0x28
 8000ed4:	f002 fb8d 	bl	80035f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ed8:	2028      	movs	r0, #40	; 0x28
 8000eda:	f002 fba6 	bl	800362a <HAL_NVIC_EnableIRQ>

}
 8000ede:	bf00      	nop
 8000ee0:	3720      	adds	r7, #32
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <lfsr>:
uint8_t column = sizeof(bit_Polynom) / sizeof(bit_Polynom[0]);
uint8_t row = sizeof(bit_Polynom) / (sizeof(bit_Polynom) / sizeof(bit_Polynom[0])); //= sizeof(bit_Polynom) / column
uint8_t *out;


void lfsr(uint8_t n, uint8_t *out, uint8_t *polynom, uint8_t *tab){
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
	//	Function implements a linear feedback shift register
	//	taps:   Array of Polynomial exponents for non-zero terms other than 1 and n
	//	buf:    Array of buffer initialisation values as 1's and 0's or booleans
	//  out: 	Array to save the m-sequence

 	uint8_t feedback = tab[0];
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	75fb      	strb	r3, [r7, #23]

	for(uint16_t i = 0; i < pow(2, n)-1; i++){
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	82bb      	strh	r3, [r7, #20]
 8000f0e:	e07f      	b.n	8001010 <lfsr+0x11c>
		for(uint8_t j = 0; j < row-1 ; j++){
 8000f10:	2300      	movs	r3, #0
 8000f12:	74fb      	strb	r3, [r7, #19]
 8000f14:	e054      	b.n	8000fc0 <lfsr+0xcc>
			if(polynom[j] != 0){
 8000f16:	7cfb      	ldrb	r3, [r7, #19]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d04b      	beq.n	8000fba <lfsr+0xc6>
				feedback = tab[0] ^ tab[polynom[j]];
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	781a      	ldrb	r2, [r3, #0]
 8000f26:	7cfb      	ldrb	r3, [r7, #19]
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	440b      	add	r3, r1
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	440b      	add	r3, r1
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4053      	eors	r3, r2
 8000f38:	75fb      	strb	r3, [r7, #23]
				if(j == 1){
 8000f3a:	7cfb      	ldrb	r3, [r7, #19]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d117      	bne.n	8000f70 <lfsr+0x7c>
					feedback = (tab[0] ^ tab[polynom[j]]) ^ tab[polynom[j-1]];
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	781a      	ldrb	r2, [r3, #0]
 8000f44:	7cfb      	ldrb	r3, [r7, #19]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	440b      	add	r3, r1
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	440b      	add	r3, r1
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4053      	eors	r3, r2
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	7cfb      	ldrb	r3, [r7, #19]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	440b      	add	r3, r1
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	4619      	mov	r1, r3
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	440b      	add	r3, r1
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4053      	eors	r3, r2
 8000f6c:	75fb      	strb	r3, [r7, #23]
 8000f6e:	e024      	b.n	8000fba <lfsr+0xc6>
				}else if(j == 2){
 8000f70:	7cfb      	ldrb	r3, [r7, #19]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d121      	bne.n	8000fba <lfsr+0xc6>
					feedback = ((tab[0] ^ tab[polynom[j]]) ^ tab[polynom[j-1]]) ^ tab[polynom[j-2]];
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	7cfb      	ldrb	r3, [r7, #19]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	440b      	add	r3, r1
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	440b      	add	r3, r1
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4053      	eors	r3, r2
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	7cfb      	ldrb	r3, [r7, #19]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	440b      	add	r3, r1
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	440b      	add	r3, r1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4053      	eors	r3, r2
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	7cfb      	ldrb	r3, [r7, #19]
 8000fa6:	3b02      	subs	r3, #2
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	440b      	add	r3, r1
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	440b      	add	r3, r1
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	4053      	eors	r3, r2
 8000fb8:	75fb      	strb	r3, [r7, #23]
		for(uint8_t j = 0; j < row-1 ; j++){
 8000fba:	7cfb      	ldrb	r3, [r7, #19]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	74fb      	strb	r3, [r7, #19]
 8000fc0:	7cfa      	ldrb	r2, [r7, #19]
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <lfsr+0x168>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dba4      	blt.n	8000f16 <lfsr+0x22>
				}
			}
		}
		//left shift
		for(uint8_t k = 0; k < n-1; k++){
 8000fcc:	2300      	movs	r3, #0
 8000fce:	74bb      	strb	r3, [r7, #18]
 8000fd0:	e00b      	b.n	8000fea <lfsr+0xf6>
			tab[k] = tab[k+1];
 8000fd2:	7cbb      	ldrb	r3, [r7, #18]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	441a      	add	r2, r3
 8000fda:	7cbb      	ldrb	r3, [r7, #18]
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	440b      	add	r3, r1
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	701a      	strb	r2, [r3, #0]
		for(uint8_t k = 0; k < n-1; k++){
 8000fe4:	7cbb      	ldrb	r3, [r7, #18]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	74bb      	strb	r3, [r7, #18]
 8000fea:	7cba      	ldrb	r2, [r7, #18]
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbee      	blt.n	8000fd2 <lfsr+0xde>
		}
		tab[n-1] = feedback;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	7dfa      	ldrb	r2, [r7, #23]
 8000ffe:	701a      	strb	r2, [r3, #0]
		out[i] = feedback;
 8001000:	8abb      	ldrh	r3, [r7, #20]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	4413      	add	r3, r2
 8001006:	7dfa      	ldrb	r2, [r7, #23]
 8001008:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < pow(2, n)-1; i++){
 800100a:	8abb      	ldrh	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	82bb      	strh	r3, [r7, #20]
 8001010:	8abb      	ldrh	r3, [r7, #20]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa06 	bl	8000424 <__aeabi_i2d>
 8001018:	4604      	mov	r4, r0
 800101a:	460d      	mov	r5, r1
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f9f0 	bl	8000404 <__aeabi_ui2d>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	f04f 0000 	mov.w	r0, #0
 800102c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001030:	f009 fde8 	bl	800ac04 <pow>
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <lfsr+0x16c>)
 800103a:	f7ff f8a5 	bl	8000188 <__aeabi_dsub>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4620      	mov	r0, r4
 8001044:	4629      	mov	r1, r5
 8001046:	f7ff fcc9 	bl	80009dc <__aeabi_dcmplt>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	f47f af5f 	bne.w	8000f10 <lfsr+0x1c>
	}
	return;
 8001052:	bf00      	nop
};
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bdb0      	pop	{r4, r5, r7, pc}
 800105a:	bf00      	nop
 800105c:	20000029 	.word	0x20000029
 8001060:	3ff00000 	.word	0x3ff00000

08001064 <mls>:

void mls(uint8_t n, uint8_t *out){
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	466b      	mov	r3, sp
 8001072:	461d      	mov	r5, r3
	//Generate a Maximal Length Sequence 2^n - 1 bits long
	uint8_t polynom[row - 1];//Polynoms != 1
 8001074:	4b45      	ldr	r3, [pc, #276]	; (800118c <mls+0x128>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	1e5c      	subs	r4, r3, #1
 800107a:	1e63      	subs	r3, r4, #1
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	4623      	mov	r3, r4
 8001080:	4618      	mov	r0, r3
 8001082:	f04f 0100 	mov.w	r1, #0
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	00cb      	lsls	r3, r1, #3
 8001090:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001094:	00c2      	lsls	r2, r0, #3
 8001096:	4623      	mov	r3, r4
 8001098:	4618      	mov	r0, r3
 800109a:	f04f 0100 	mov.w	r1, #0
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	00cb      	lsls	r3, r1, #3
 80010a8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010ac:	00c2      	lsls	r2, r0, #3
 80010ae:	4623      	mov	r3, r4
 80010b0:	3307      	adds	r3, #7
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	ebad 0d03 	sub.w	sp, sp, r3
 80010ba:	466b      	mov	r3, sp
 80010bc:	3300      	adds	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

	for(uint8_t i = 0; i < column; i++){
 80010c0:	2300      	movs	r3, #0
 80010c2:	76bb      	strb	r3, [r7, #26]
 80010c4:	e01e      	b.n	8001104 <mls+0xa0>
		if(bit_Polynom[i][0] == n){
 80010c6:	7ebb      	ldrb	r3, [r7, #26]
 80010c8:	4a31      	ldr	r2, [pc, #196]	; (8001190 <mls+0x12c>)
 80010ca:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d114      	bne.n	80010fe <mls+0x9a>
			polynom[0] = bit_Polynom[i][1];
 80010d4:	7ebb      	ldrb	r3, [r7, #26]
 80010d6:	4a2e      	ldr	r2, [pc, #184]	; (8001190 <mls+0x12c>)
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	785a      	ldrb	r2, [r3, #1]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	701a      	strb	r2, [r3, #0]
			polynom[1] = bit_Polynom[i][2];
 80010e2:	7ebb      	ldrb	r3, [r7, #26]
 80010e4:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <mls+0x12c>)
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	789a      	ldrb	r2, [r3, #2]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	705a      	strb	r2, [r3, #1]
			polynom[2] = bit_Polynom[i][3];
 80010f0:	7ebb      	ldrb	r3, [r7, #26]
 80010f2:	4a27      	ldr	r2, [pc, #156]	; (8001190 <mls+0x12c>)
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	78da      	ldrb	r2, [r3, #3]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	709a      	strb	r2, [r3, #2]
	for(uint8_t i = 0; i < column; i++){
 80010fe:	7ebb      	ldrb	r3, [r7, #26]
 8001100:	3301      	adds	r3, #1
 8001102:	76bb      	strb	r3, [r7, #26]
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <mls+0x130>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	7eba      	ldrb	r2, [r7, #26]
 800110a:	429a      	cmp	r2, r3
 800110c:	d3db      	bcc.n	80010c6 <mls+0x62>
		}
	}
	//tab filled with 1s by default
	uint8_t tab[n];
 800110e:	79fc      	ldrb	r4, [r7, #7]
 8001110:	466b      	mov	r3, sp
 8001112:	461e      	mov	r6, r3
 8001114:	4623      	mov	r3, r4
 8001116:	3b01      	subs	r3, #1
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	b2e0      	uxtb	r0, r4
 800111c:	f04f 0100 	mov.w	r1, #0
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	00cb      	lsls	r3, r1, #3
 800112a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800112e:	00c2      	lsls	r2, r0, #3
 8001130:	b2e0      	uxtb	r0, r4
 8001132:	f04f 0100 	mov.w	r1, #0
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	00cb      	lsls	r3, r1, #3
 8001140:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001144:	00c2      	lsls	r2, r0, #3
 8001146:	4623      	mov	r3, r4
 8001148:	3307      	adds	r3, #7
 800114a:	08db      	lsrs	r3, r3, #3
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	ebad 0d03 	sub.w	sp, sp, r3
 8001152:	466b      	mov	r3, sp
 8001154:	3300      	adds	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i <= n; i++){
 8001158:	2300      	movs	r3, #0
 800115a:	76fb      	strb	r3, [r7, #27]
 800115c:	e006      	b.n	800116c <mls+0x108>
		tab[i] = 1;
 800115e:	7efb      	ldrb	r3, [r7, #27]
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	2101      	movs	r1, #1
 8001164:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i <= n; i++){
 8001166:	7efb      	ldrb	r3, [r7, #27]
 8001168:	3301      	adds	r3, #1
 800116a:	76fb      	strb	r3, [r7, #27]
 800116c:	7efa      	ldrb	r2, [r7, #27]
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	429a      	cmp	r2, r3
 8001172:	d9f4      	bls.n	800115e <mls+0xfa>
	}

	lfsr(n, out, polynom, tab);
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	79f8      	ldrb	r0, [r7, #7]
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	f7ff feba 	bl	8000ef4 <lfsr>
	return;
 8001180:	bf00      	nop
 8001182:	46b5      	mov	sp, r6
 8001184:	46ad      	mov	sp, r5
}
 8001186:	3724      	adds	r7, #36	; 0x24
 8001188:	46bd      	mov	sp, r7
 800118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118c:	20000029 	.word	0x20000029
 8001190:	20000000 	.word	0x20000000
 8001194:	20000028 	.word	0x20000028

08001198 <Dev_init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//
void Dev_init(){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
//Function sets each Measuring Device to Init

	allDevices[MD1].port_out = MD1_O_GPIO_Port;
 800119e:	4b86      	ldr	r3, [pc, #536]	; (80013b8 <Dev_init+0x220>)
 80011a0:	4a86      	ldr	r2, [pc, #536]	; (80013bc <Dev_init+0x224>)
 80011a2:	601a      	str	r2, [r3, #0]
	allDevices[MD1].pin_out = MD1_O_Pin;
 80011a4:	4b84      	ldr	r3, [pc, #528]	; (80013b8 <Dev_init+0x220>)
 80011a6:	2202      	movs	r2, #2
 80011a8:	809a      	strh	r2, [r3, #4]
	allDevices[MD1].clockTimer = &htim2;
 80011aa:	4b83      	ldr	r3, [pc, #524]	; (80013b8 <Dev_init+0x220>)
 80011ac:	4a84      	ldr	r2, [pc, #528]	; (80013c0 <Dev_init+0x228>)
 80011ae:	619a      	str	r2, [r3, #24]
	allDevices[MD1].timBase = TIM2;
 80011b0:	4b81      	ldr	r3, [pc, #516]	; (80013b8 <Dev_init+0x220>)
 80011b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b6:	61da      	str	r2, [r3, #28]
	allDevices[MD1].stopTrigger = 0;
 80011b8:	4b7f      	ldr	r3, [pc, #508]	; (80013b8 <Dev_init+0x220>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	751a      	strb	r2, [r3, #20]
	allDevices[MD1].mSeq = (uint8_t *) malloc(3);
 80011be:	2003      	movs	r0, #3
 80011c0:	f009 fc08 	bl	800a9d4 <malloc>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b7b      	ldr	r3, [pc, #492]	; (80013b8 <Dev_init+0x220>)
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24

	allDevices[MD2].port_out = MD2_O_GPIO_Port;
 80011cc:	4b7a      	ldr	r3, [pc, #488]	; (80013b8 <Dev_init+0x220>)
 80011ce:	4a7b      	ldr	r2, [pc, #492]	; (80013bc <Dev_init+0x224>)
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
	allDevices[MD2].pin_out = MD2_O_Pin;
 80011d2:	4b79      	ldr	r3, [pc, #484]	; (80013b8 <Dev_init+0x220>)
 80011d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d8:	861a      	strh	r2, [r3, #48]	; 0x30
	allDevices[MD2].clockTimer = &htim3;
 80011da:	4b77      	ldr	r3, [pc, #476]	; (80013b8 <Dev_init+0x220>)
 80011dc:	4a79      	ldr	r2, [pc, #484]	; (80013c4 <Dev_init+0x22c>)
 80011de:	645a      	str	r2, [r3, #68]	; 0x44
	allDevices[MD2].timBase = TIM3;
 80011e0:	4b75      	ldr	r3, [pc, #468]	; (80013b8 <Dev_init+0x220>)
 80011e2:	4a79      	ldr	r2, [pc, #484]	; (80013c8 <Dev_init+0x230>)
 80011e4:	649a      	str	r2, [r3, #72]	; 0x48
	allDevices[MD2].stopTrigger = 0;
 80011e6:	4b74      	ldr	r3, [pc, #464]	; (80013b8 <Dev_init+0x220>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	allDevices[MD2].mSeq = (uint8_t *) malloc(3);
 80011ee:	2003      	movs	r0, #3
 80011f0:	f009 fbf0 	bl	800a9d4 <malloc>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b6f      	ldr	r3, [pc, #444]	; (80013b8 <Dev_init+0x220>)
 80011fa:	651a      	str	r2, [r3, #80]	; 0x50

	allDevices[MD3].port_out = MD3_O_GPIO_Port;
 80011fc:	4b6e      	ldr	r3, [pc, #440]	; (80013b8 <Dev_init+0x220>)
 80011fe:	4a6f      	ldr	r2, [pc, #444]	; (80013bc <Dev_init+0x224>)
 8001200:	659a      	str	r2, [r3, #88]	; 0x58
	allDevices[MD3].pin_out = MD3_O_Pin;
 8001202:	4b6d      	ldr	r3, [pc, #436]	; (80013b8 <Dev_init+0x220>)
 8001204:	2208      	movs	r2, #8
 8001206:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	allDevices[MD3].clockTimer = &htim4;
 800120a:	4b6b      	ldr	r3, [pc, #428]	; (80013b8 <Dev_init+0x220>)
 800120c:	4a6f      	ldr	r2, [pc, #444]	; (80013cc <Dev_init+0x234>)
 800120e:	671a      	str	r2, [r3, #112]	; 0x70
	allDevices[MD3].timBase = TIM4;
 8001210:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <Dev_init+0x220>)
 8001212:	4a6f      	ldr	r2, [pc, #444]	; (80013d0 <Dev_init+0x238>)
 8001214:	675a      	str	r2, [r3, #116]	; 0x74
	allDevices[MD3].stopTrigger = 0;
 8001216:	4b68      	ldr	r3, [pc, #416]	; (80013b8 <Dev_init+0x220>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	allDevices[MD3].mSeq = (uint8_t *) malloc(3);
 800121e:	2003      	movs	r0, #3
 8001220:	f009 fbd8 	bl	800a9d4 <malloc>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <Dev_init+0x220>)
 800122a:	67da      	str	r2, [r3, #124]	; 0x7c

	allDevices[MD4].port_out = MD4_O_GPIO_Port;
 800122c:	4b62      	ldr	r3, [pc, #392]	; (80013b8 <Dev_init+0x220>)
 800122e:	4a69      	ldr	r2, [pc, #420]	; (80013d4 <Dev_init+0x23c>)
 8001230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	allDevices[MD4].pin_out = MD4_O_Pin;
 8001234:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <Dev_init+0x220>)
 8001236:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800123a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	allDevices[MD4].clockTimer = &htim7;
 800123e:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <Dev_init+0x220>)
 8001240:	4a65      	ldr	r2, [pc, #404]	; (80013d8 <Dev_init+0x240>)
 8001242:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	allDevices[MD4].timBase = TIM7;
 8001246:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <Dev_init+0x220>)
 8001248:	4a64      	ldr	r2, [pc, #400]	; (80013dc <Dev_init+0x244>)
 800124a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	allDevices[MD4].stopTrigger = 0;
 800124e:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <Dev_init+0x220>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	allDevices[MD4].mSeq = (uint8_t *) malloc(3);
 8001256:	2003      	movs	r0, #3
 8001258:	f009 fbbc 	bl	800a9d4 <malloc>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <Dev_init+0x220>)
 8001262:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	allDevices[MD5].port_out = MD5_O_GPIO_Port;
 8001266:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <Dev_init+0x220>)
 8001268:	4a5a      	ldr	r2, [pc, #360]	; (80013d4 <Dev_init+0x23c>)
 800126a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	allDevices[MD5].pin_out = MD5_O_Pin;
 800126e:	4b52      	ldr	r3, [pc, #328]	; (80013b8 <Dev_init+0x220>)
 8001270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001274:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	allDevices[MD5].clockTimer = &htim9;
 8001278:	4b4f      	ldr	r3, [pc, #316]	; (80013b8 <Dev_init+0x220>)
 800127a:	4a59      	ldr	r2, [pc, #356]	; (80013e0 <Dev_init+0x248>)
 800127c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	allDevices[MD5].timBase = TIM9;
 8001280:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <Dev_init+0x220>)
 8001282:	4a58      	ldr	r2, [pc, #352]	; (80013e4 <Dev_init+0x24c>)
 8001284:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	allDevices[MD5].stopTrigger = 0;
 8001288:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <Dev_init+0x220>)
 800128a:	2200      	movs	r2, #0
 800128c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	allDevices[MD5].mSeq = (uint8_t *) malloc(3);
 8001290:	2003      	movs	r0, #3
 8001292:	f009 fb9f 	bl	800a9d4 <malloc>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <Dev_init+0x220>)
 800129c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	allDevices[MD6].port_out = MD6_O_GPIO_Port;
 80012a0:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <Dev_init+0x220>)
 80012a2:	4a46      	ldr	r2, [pc, #280]	; (80013bc <Dev_init+0x224>)
 80012a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	allDevices[MD6].pin_out = MD6_O_Pin;
 80012a8:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <Dev_init+0x220>)
 80012aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ae:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
	allDevices[MD6].clockTimer = &htim10;
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <Dev_init+0x220>)
 80012b4:	4a4c      	ldr	r2, [pc, #304]	; (80013e8 <Dev_init+0x250>)
 80012b6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	allDevices[MD6].timBase = TIM10;
 80012ba:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <Dev_init+0x220>)
 80012bc:	4a4b      	ldr	r2, [pc, #300]	; (80013ec <Dev_init+0x254>)
 80012be:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	allDevices[MD6].stopTrigger = 0;
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <Dev_init+0x220>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	allDevices[MD6].mSeq = (uint8_t *) malloc(3);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f009 fb82 	bl	800a9d4 <malloc>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <Dev_init+0x220>)
 80012d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	allDevices[MD7].port_out = MD7_O_GPIO_Port;
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <Dev_init+0x220>)
 80012dc:	4a37      	ldr	r2, [pc, #220]	; (80013bc <Dev_init+0x224>)
 80012de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	allDevices[MD7].pin_out = MD7_O_Pin;
 80012e2:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <Dev_init+0x220>)
 80012e4:	2204      	movs	r2, #4
 80012e6:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	allDevices[MD7].clockTimer = &htim11;
 80012ea:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <Dev_init+0x220>)
 80012ec:	4a40      	ldr	r2, [pc, #256]	; (80013f0 <Dev_init+0x258>)
 80012ee:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	allDevices[MD7].timBase = TIM11;
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <Dev_init+0x220>)
 80012f4:	4a3f      	ldr	r2, [pc, #252]	; (80013f4 <Dev_init+0x25c>)
 80012f6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	allDevices[MD7].stopTrigger = 0;
 80012fa:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <Dev_init+0x220>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	allDevices[MD7].mSeq = (uint8_t *) malloc(3);
 8001302:	2003      	movs	r0, #3
 8001304:	f009 fb66 	bl	800a9d4 <malloc>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <Dev_init+0x220>)
 800130e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

	//saves number of devices in allDevices
	deviceCount = sizeof(allDevices) / sizeof(allDevices[0]);
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <Dev_init+0x260>)
 8001314:	2209      	movs	r2, #9
 8001316:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = MD1; i < deviceCount; i++){
 8001318:	2300      	movs	r3, #0
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	e041      	b.n	80013a2 <Dev_init+0x20a>
		allDevices[i].active = 0;
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	4a25      	ldr	r2, [pc, #148]	; (80013b8 <Dev_init+0x220>)
 8001322:	212c      	movs	r1, #44	; 0x2c
 8001324:	fb01 f303 	mul.w	r3, r1, r3
 8001328:	4413      	add	r3, r2
 800132a:	3306      	adds	r3, #6
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
		allDevices[i].delay = 0;
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <Dev_init+0x220>)
 8001334:	212c      	movs	r1, #44	; 0x2c
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	4413      	add	r3, r2
 800133c:	3308      	adds	r3, #8
 800133e:	2200      	movs	r2, #0
 8001340:	801a      	strh	r2, [r3, #0]
		allDevices[i].signalform = FallingTrigger;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <Dev_init+0x220>)
 8001346:	212c      	movs	r1, #44	; 0x2c
 8001348:	fb01 f303 	mul.w	r3, r1, r3
 800134c:	4413      	add	r3, r2
 800134e:	330c      	adds	r3, #12
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
		allDevices[i].frequency = 0;
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <Dev_init+0x220>)
 8001358:	212c      	movs	r1, #44	; 0x2c
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	4413      	add	r3, r2
 8001360:	330e      	adds	r3, #14
 8001362:	2200      	movs	r2, #0
 8001364:	801a      	strh	r2, [r3, #0]
		allDevices[i].timeRef = 1;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <Dev_init+0x220>)
 800136a:	212c      	movs	r1, #44	; 0x2c
 800136c:	fb01 f303 	mul.w	r3, r1, r3
 8001370:	4413      	add	r3, r2
 8001372:	3310      	adds	r3, #16
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]
		allDevices[i].mSeqCounter = 0;
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <Dev_init+0x220>)
 800137c:	212c      	movs	r1, #44	; 0x2c
 800137e:	fb01 f303 	mul.w	r3, r1, r3
 8001382:	4413      	add	r3, r2
 8001384:	3328      	adds	r3, #40	; 0x28
 8001386:	2200      	movs	r2, #0
 8001388:	801a      	strh	r2, [r3, #0]
		allDevices[i].pulsLength = 4;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <Dev_init+0x220>)
 800138e:	212c      	movs	r1, #44	; 0x2c
 8001390:	fb01 f303 	mul.w	r3, r1, r3
 8001394:	4413      	add	r3, r2
 8001396:	330a      	adds	r3, #10
 8001398:	2204      	movs	r2, #4
 800139a:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = MD1; i < deviceCount; i++){
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	3301      	adds	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <Dev_init+0x260>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3b8      	bcc.n	800131e <Dev_init+0x186>
	}
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000474 	.word	0x20000474
 80013bc:	40020400 	.word	0x40020400
 80013c0:	200007c8 	.word	0x200007c8
 80013c4:	200006c8 	.word	0x200006c8
 80013c8:	40000400 	.word	0x40000400
 80013cc:	20000648 	.word	0x20000648
 80013d0:	40000800 	.word	0x40000800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	20000808 	.word	0x20000808
 80013dc:	40001400 	.word	0x40001400
 80013e0:	20000788 	.word	0x20000788
 80013e4:	40010800 	.word	0x40010800
 80013e8:	20000688 	.word	0x20000688
 80013ec:	40010c00 	.word	0x40010c00
 80013f0:	20000708 	.word	0x20000708
 80013f4:	40011000 	.word	0x40011000
 80013f8:	20000240 	.word	0x20000240

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001402:	f001 ff8e 	bl	8003322 <HAL_Init>

  /* USER CODE BEGIN Init */
  Dev_init();
 8001406:	f7ff fec7 	bl	8001198 <Dev_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140a:	f000 f903 	bl	8001614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140e:	f7ff fcbf 	bl	8000d90 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001412:	f001 fc63 	bl	8002cdc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001416:	f001 fcad 	bl	8002d74 <MX_TIM3_Init>
  MX_TIM4_Init();
 800141a:	f001 fcf9 	bl	8002e10 <MX_TIM4_Init>
  MX_TIM6_Init();
 800141e:	f001 fd45 	bl	8002eac <MX_TIM6_Init>
  MX_TIM7_Init();
 8001422:	f001 fd79 	bl	8002f18 <MX_TIM7_Init>
  MX_TIM9_Init();
 8001426:	f001 fdad 	bl	8002f84 <MX_TIM9_Init>
  MX_TIM10_Init();
 800142a:	f001 fdf9 	bl	8003020 <MX_TIM10_Init>
  MX_TIM11_Init();
 800142e:	f001 fe31 	bl	8003094 <MX_TIM11_Init>
  MX_USB_DEVICE_Init();
 8001432:	f008 fdd7 	bl	8009fe4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //Button1 pressed
	  if(Debounce(Button1_GPIO_Port, Button1_Pin) && button1_event){
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	486a      	ldr	r0, [pc, #424]	; (80015e4 <main+0x1e8>)
 800143a:	f000 f9fa 	bl	8001832 <Debounce>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d02e      	beq.n	80014a2 <main+0xa6>
 8001444:	4b68      	ldr	r3, [pc, #416]	; (80015e8 <main+0x1ec>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d02a      	beq.n	80014a2 <main+0xa6>
		  button1_event = 0;
 800144c:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <main+0x1ec>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
		  if(start.source == Button1 || stop.source == Button1){
 8001452:	4b66      	ldr	r3, [pc, #408]	; (80015ec <main+0x1f0>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d003      	beq.n	8001462 <main+0x66>
 800145a:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <main+0x1f4>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d10b      	bne.n	800147a <main+0x7e>
			  if(measRun == 0){
 8001462:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <main+0x1f8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <main+0x76>
				  StartMeasurement(Button1);
 800146a:	2001      	movs	r0, #1
 800146c:	f000 feb0 	bl	80021d0 <StartMeasurement>
			  if(measRun == 0){
 8001470:	e017      	b.n	80014a2 <main+0xa6>
			  }else{
				  StopMeasurement(Button1);
 8001472:	2001      	movs	r0, #1
 8001474:	f000 ff58 	bl	8002328 <StopMeasurement>
			  if(measRun == 0){
 8001478:	e013      	b.n	80014a2 <main+0xa6>
			  }
		  }else if (event.active && event.source == Button1) {
 800147a:	4b5f      	ldr	r3, [pc, #380]	; (80015f8 <main+0x1fc>)
 800147c:	785b      	ldrb	r3, [r3, #1]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <main+0x9a>
 8001482:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <main+0x1fc>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d105      	bne.n	8001496 <main+0x9a>
			  SendMessage(EventByte, Button1, 3);
 800148a:	2203      	movs	r2, #3
 800148c:	2101      	movs	r1, #1
 800148e:	2001      	movs	r0, #1
 8001490:	f000 f982 	bl	8001798 <SendMessage>
 8001494:	e005      	b.n	80014a2 <main+0xa6>
		  }else{
			  uint8_t errorMessage = SourceNotUsed;
 8001496:	2302      	movs	r3, #2
 8001498:	71fb      	strb	r3, [r7, #7]
			  PrintError(errorMessage);
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f94b 	bl	8001738 <PrintError>
		  }
	  }
	  //Button2 pressed
	  if(Debounce(Button2_GPIO_Port, Button2_Pin) && button2_event){
 80014a2:	2101      	movs	r1, #1
 80014a4:	4855      	ldr	r0, [pc, #340]	; (80015fc <main+0x200>)
 80014a6:	f000 f9c4 	bl	8001832 <Debounce>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d02e      	beq.n	800150e <main+0x112>
 80014b0:	4b53      	ldr	r3, [pc, #332]	; (8001600 <main+0x204>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d02a      	beq.n	800150e <main+0x112>
		  button2_event = 0;
 80014b8:	4b51      	ldr	r3, [pc, #324]	; (8001600 <main+0x204>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
		  if(start.source == Button2 || stop.source == Button2){
 80014be:	4b4b      	ldr	r3, [pc, #300]	; (80015ec <main+0x1f0>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d003      	beq.n	80014ce <main+0xd2>
 80014c6:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <main+0x1f4>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d10b      	bne.n	80014e6 <main+0xea>
			  if(measRun == 0){
 80014ce:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <main+0x1f8>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d103      	bne.n	80014de <main+0xe2>
				  StartMeasurement(Button2);
 80014d6:	2002      	movs	r0, #2
 80014d8:	f000 fe7a 	bl	80021d0 <StartMeasurement>
			  if(measRun == 0){
 80014dc:	e017      	b.n	800150e <main+0x112>
			  }else{
				  StopMeasurement(Button2);
 80014de:	2002      	movs	r0, #2
 80014e0:	f000 ff22 	bl	8002328 <StopMeasurement>
			  if(measRun == 0){
 80014e4:	e013      	b.n	800150e <main+0x112>
			  }
		  }else if (event.active && event.source == Button2) {
 80014e6:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <main+0x1fc>)
 80014e8:	785b      	ldrb	r3, [r3, #1]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <main+0x106>
 80014ee:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <main+0x1fc>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d105      	bne.n	8001502 <main+0x106>
			  SendMessage(EventByte, Button2, 3);
 80014f6:	2203      	movs	r2, #3
 80014f8:	2102      	movs	r1, #2
 80014fa:	2001      	movs	r0, #1
 80014fc:	f000 f94c 	bl	8001798 <SendMessage>
 8001500:	e005      	b.n	800150e <main+0x112>
		  }else{
			  uint8_t errorMessage = SourceNotUsed;
 8001502:	2302      	movs	r3, #2
 8001504:	71bb      	strb	r3, [r7, #6]
			  PrintError(errorMessage);
 8001506:	79bb      	ldrb	r3, [r7, #6]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f915 	bl	8001738 <PrintError>
		  }
	  }
	  //Interrupt signal MD6
	  if(md6_event){
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <main+0x208>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d02a      	beq.n	800156c <main+0x170>
		  md6_event = 0;
 8001516:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <main+0x208>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
		  if(start.source == MD6 || stop.source == MD6){
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <main+0x1f0>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b05      	cmp	r3, #5
 8001522:	d003      	beq.n	800152c <main+0x130>
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <main+0x1f4>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d10b      	bne.n	8001544 <main+0x148>
			  if(measRun == 0){
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <main+0x1f8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d103      	bne.n	800153c <main+0x140>
				  StartMeasurement(MD6);
 8001534:	2005      	movs	r0, #5
 8001536:	f000 fe4b 	bl	80021d0 <StartMeasurement>
			  if(measRun == 0){
 800153a:	e017      	b.n	800156c <main+0x170>
			  }else{
				  StopMeasurement(MD6);
 800153c:	2005      	movs	r0, #5
 800153e:	f000 fef3 	bl	8002328 <StopMeasurement>
			  if(measRun == 0){
 8001542:	e013      	b.n	800156c <main+0x170>
			  }
		  }else if (event.active && event.source == MD6) {
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <main+0x1fc>)
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d009      	beq.n	8001560 <main+0x164>
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <main+0x1fc>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b05      	cmp	r3, #5
 8001552:	d105      	bne.n	8001560 <main+0x164>
			  SendMessage(EventByte, MD6, 3);
 8001554:	2203      	movs	r2, #3
 8001556:	2105      	movs	r1, #5
 8001558:	2001      	movs	r0, #1
 800155a:	f000 f91d 	bl	8001798 <SendMessage>
 800155e:	e005      	b.n	800156c <main+0x170>
		  }else{
			  uint8_t errorMessage = SourceNotUsed;
 8001560:	2302      	movs	r3, #2
 8001562:	717b      	strb	r3, [r7, #5]
			  PrintError(errorMessage);
 8001564:	797b      	ldrb	r3, [r7, #5]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f8e6 	bl	8001738 <PrintError>
		  }
	  }
	  //Interrupt Signal MD5
	  if(md5_event){
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <main+0x20c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d02a      	beq.n	80015ca <main+0x1ce>
		  md5_event = 0;
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <main+0x20c>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
		  if(start.source == MD5 || stop.source == MD5){
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <main+0x1f0>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b04      	cmp	r3, #4
 8001580:	d003      	beq.n	800158a <main+0x18e>
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <main+0x1f4>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b04      	cmp	r3, #4
 8001588:	d10b      	bne.n	80015a2 <main+0x1a6>
			  if(measRun == 0){
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <main+0x1f8>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d103      	bne.n	800159a <main+0x19e>
				  StartMeasurement(MD5);
 8001592:	2004      	movs	r0, #4
 8001594:	f000 fe1c 	bl	80021d0 <StartMeasurement>
			  if(measRun == 0){
 8001598:	e017      	b.n	80015ca <main+0x1ce>
			  }else{
				  StopMeasurement(MD5);
 800159a:	2004      	movs	r0, #4
 800159c:	f000 fec4 	bl	8002328 <StopMeasurement>
			  if(measRun == 0){
 80015a0:	e013      	b.n	80015ca <main+0x1ce>
			  }
		  }else if (event.active && event.source == MD5) {
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <main+0x1fc>)
 80015a4:	785b      	ldrb	r3, [r3, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <main+0x1c2>
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <main+0x1fc>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d105      	bne.n	80015be <main+0x1c2>
			  SendMessage(EventByte, MD5, 3);
 80015b2:	2203      	movs	r2, #3
 80015b4:	2104      	movs	r1, #4
 80015b6:	2001      	movs	r0, #1
 80015b8:	f000 f8ee 	bl	8001798 <SendMessage>
 80015bc:	e005      	b.n	80015ca <main+0x1ce>
		  }else{
			  uint8_t errorMessage = SourceNotUsed;
 80015be:	2302      	movs	r3, #2
 80015c0:	713b      	strb	r3, [r7, #4]
			  PrintError(errorMessage);
 80015c2:	793b      	ldrb	r3, [r7, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f8b7 	bl	8001738 <PrintError>
		  }
	  }

	  //Data received
	  if(dataReceived == 1){
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <main+0x210>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	f47f af31 	bne.w	8001436 <main+0x3a>
		  dataReceived = 0;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <main+0x210>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
		  ReadData(saveReceivedData);
 80015da:	480d      	ldr	r0, [pc, #52]	; (8001610 <main+0x214>)
 80015dc:	f000 fa22 	bl	8001a24 <ReadData>
	  if(Debounce(Button1_GPIO_Port, Button1_Pin) && button1_event){
 80015e0:	e729      	b.n	8001436 <main+0x3a>
 80015e2:	bf00      	nop
 80015e4:	40020000 	.word	0x40020000
 80015e8:	2000022e 	.word	0x2000022e
 80015ec:	20000638 	.word	0x20000638
 80015f0:	20000640 	.word	0x20000640
 80015f4:	2000022d 	.word	0x2000022d
 80015f8:	20000634 	.word	0x20000634
 80015fc:	40020400 	.word	0x40020400
 8001600:	2000022f 	.word	0x2000022f
 8001604:	20000230 	.word	0x20000230
 8001608:	20000231 	.word	0x20000231
 800160c:	2000022c 	.word	0x2000022c
 8001610:	20000600 	.word	0x20000600

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b092      	sub	sp, #72	; 0x48
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	2234      	movs	r2, #52	; 0x34
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f009 f9ec 	bl	800aa00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <SystemClock_Config+0x94>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800163e:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <SystemClock_Config+0x94>)
 8001640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001644:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001646:	2301      	movs	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164e:	2302      	movs	r3, #2
 8001650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001658:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800165c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800165e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001662:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4618      	mov	r0, r3
 800166a:	f003 fe05 	bl	8005278 <HAL_RCC_OscConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001674:	f001 fa26 	bl	8002ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001678:	230f      	movs	r3, #15
 800167a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167c:	2303      	movs	r3, #3
 800167e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	2101      	movs	r1, #1
 8001690:	4618      	mov	r0, r3
 8001692:	f004 f921 	bl	80058d8 <HAL_RCC_ClockConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800169c:	f001 fa12 	bl	8002ac4 <Error_Handler>
  }
}
 80016a0:	bf00      	nop
 80016a2:	3748      	adds	r7, #72	; 0x48
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40007000 	.word	0x40007000

080016ac <LightLED>:

/* USER CODE BEGIN 4 */
void LightLED(uint8_t color){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	481e      	ldr	r0, [pc, #120]	; (8001734 <LightLED+0x88>)
 80016bc:	f002 f967 	bl	800398e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	481b      	ldr	r0, [pc, #108]	; (8001734 <LightLED+0x88>)
 80016c6:	f002 f962 	bl	800398e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d0:	4818      	ldr	r0, [pc, #96]	; (8001734 <LightLED+0x88>)
 80016d2:	f002 f95c 	bl	800398e <HAL_GPIO_WritePin>
	uint8_t errorMessage = NoSuchColor;
 80016d6:	230a      	movs	r3, #10
 80016d8:	73fb      	strb	r3, [r7, #15]
	switch (color){
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d81e      	bhi.n	800171e <LightLED+0x72>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <LightLED+0x3c>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	08001729 	.word	0x08001729
 80016ec:	080016f9 	.word	0x080016f9
 80016f0:	08001707 	.word	0x08001707
 80016f4:	08001713 	.word	0x08001713
	case ColorRed:
		HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fe:	480d      	ldr	r0, [pc, #52]	; (8001734 <LightLED+0x88>)
 8001700:	f002 f945 	bl	800398e <HAL_GPIO_WritePin>
		break;
 8001704:	e011      	b.n	800172a <LightLED+0x7e>
	case ColorGreen:
		HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	480a      	ldr	r0, [pc, #40]	; (8001734 <LightLED+0x88>)
 800170c:	f002 f93f 	bl	800398e <HAL_GPIO_WritePin>
		break;
 8001710:	e00b      	b.n	800172a <LightLED+0x7e>
	case ColorBlue:
		HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	2140      	movs	r1, #64	; 0x40
 8001716:	4807      	ldr	r0, [pc, #28]	; (8001734 <LightLED+0x88>)
 8001718:	f002 f939 	bl	800398e <HAL_GPIO_WritePin>
		break;
 800171c:	e005      	b.n	800172a <LightLED+0x7e>
	case ColorOff:
		break;
	default:
		PrintError(errorMessage);
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f809 	bl	8001738 <PrintError>
	}
}
 8001726:	e000      	b.n	800172a <LightLED+0x7e>
		break;
 8001728:	bf00      	nop
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40020400 	.word	0x40020400

08001738 <PrintError>:

void PrintError(uint8_t errorMessage){
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
	LightLED(ColorRed);
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff ffb2 	bl	80016ac <LightLED>
	uint8_t printError[] = {HelloByte, ErrorByte, errorMessage};
 8001748:	23aa      	movs	r3, #170	; 0xaa
 800174a:	733b      	strb	r3, [r7, #12]
 800174c:	2300      	movs	r3, #0
 800174e:	737b      	strb	r3, [r7, #13]
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	73bb      	strb	r3, [r7, #14]
	CDC_Transmit_FS(printError, 3);
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2103      	movs	r1, #3
 800175a:	4618      	mov	r0, r3
 800175c:	f008 fd14 	bl	800a188 <CDC_Transmit_FS>
	while(!(dataReceived == 1 && saveReceivedData[0] == 0xaa && saveReceivedData[1] == 0x0a)){//Wait for user respond
 8001760:	bf00      	nop
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <PrintError+0x58>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d1fb      	bne.n	8001762 <PrintError+0x2a>
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <PrintError+0x5c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2baa      	cmp	r3, #170	; 0xaa
 8001770:	d1f7      	bne.n	8001762 <PrintError+0x2a>
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <PrintError+0x5c>)
 8001774:	785b      	ldrb	r3, [r3, #1]
 8001776:	2b0a      	cmp	r3, #10
 8001778:	d1f3      	bne.n	8001762 <PrintError+0x2a>
	}
	LightLED(ColorOff);
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff ff96 	bl	80016ac <LightLED>
	dataReceived = 0;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <PrintError+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000022c 	.word	0x2000022c
 8001794:	20000600 	.word	0x20000600

08001798 <SendMessage>:

void SendMessage(uint8_t feature, uint8_t message, uint8_t length){
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	460b      	mov	r3, r1
 80017a4:	71bb      	strb	r3, [r7, #6]
 80017a6:	4613      	mov	r3, r2
 80017a8:	717b      	strb	r3, [r7, #5]
 80017aa:	466b      	mov	r3, sp
 80017ac:	461d      	mov	r5, r3
	uint8_t sendMessage[length];
 80017ae:	797c      	ldrb	r4, [r7, #5]
 80017b0:	4623      	mov	r3, r4
 80017b2:	3b01      	subs	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	b2e0      	uxtb	r0, r4
 80017b8:	f04f 0100 	mov.w	r1, #0
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	00cb      	lsls	r3, r1, #3
 80017c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017ca:	00c2      	lsls	r2, r0, #3
 80017cc:	b2e0      	uxtb	r0, r4
 80017ce:	f04f 0100 	mov.w	r1, #0
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	00cb      	lsls	r3, r1, #3
 80017dc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017e0:	00c2      	lsls	r2, r0, #3
 80017e2:	4623      	mov	r3, r4
 80017e4:	3307      	adds	r3, #7
 80017e6:	08db      	lsrs	r3, r3, #3
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	ebad 0d03 	sub.w	sp, sp, r3
 80017ee:	466b      	mov	r3, sp
 80017f0:	3300      	adds	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
	sendMessage[0] = HelloByte;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	22aa      	movs	r2, #170	; 0xaa
 80017f8:	701a      	strb	r2, [r3, #0]
	if(length == 2){
 80017fa:	797b      	ldrb	r3, [r7, #5]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d103      	bne.n	8001808 <SendMessage+0x70>
		sendMessage[1] = message;
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	79ba      	ldrb	r2, [r7, #6]
 8001804:	705a      	strb	r2, [r3, #1]
 8001806:	e008      	b.n	800181a <SendMessage+0x82>
	}else if(length == 3){
 8001808:	797b      	ldrb	r3, [r7, #5]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d105      	bne.n	800181a <SendMessage+0x82>
		sendMessage[1] = feature;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	705a      	strb	r2, [r3, #1]
		sendMessage[2] = message;
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	79ba      	ldrb	r2, [r7, #6]
 8001818:	709a      	strb	r2, [r3, #2]
	}
	CDC_Transmit_FS(sendMessage, length);
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	797a      	ldrb	r2, [r7, #5]
 800181e:	b292      	uxth	r2, r2
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f008 fcb0 	bl	800a188 <CDC_Transmit_FS>
 8001828:	46ad      	mov	sp, r5
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bdb0      	pop	{r4, r5, r7, pc}

08001832 <Debounce>:

int Debounce(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	807b      	strh	r3, [r7, #2]
	if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET){
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f002 f88c 	bl	8003960 <HAL_GPIO_ReadPin>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10f      	bne.n	800186e <Debounce+0x3c>
		HAL_Delay(100);
 800184e:	2064      	movs	r0, #100	; 0x64
 8001850:	f001 fdd6 	bl	8003400 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET){
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	4619      	mov	r1, r3
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f002 f881 	bl	8003960 <HAL_GPIO_ReadPin>
 800185e:	4603      	mov	r3, r0
 8001860:	2b01      	cmp	r3, #1
 8001862:	d104      	bne.n	800186e <Debounce+0x3c>
			HAL_Delay(100);
 8001864:	2064      	movs	r0, #100	; 0x64
 8001866:	f001 fdcb 	bl	8003400 <HAL_Delay>
			return 1;
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <Debounce+0x3e>
		}
	}
	return 0;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <CheckDelay>:
		free(allDevices[i].mSeq);
	}
}


int CheckDelay(uint32_t measTime, uint16_t msDelay){
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
/* function returns 1 after adjusted delay time
* measTime: time since measurement started
* msDelay: delay time in ms*/
	if(measTime < msDelay){
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d201      	bcs.n	8001890 <CheckDelay+0x18>
		return 0;
 800188c:	2300      	movs	r3, #0
 800188e:	e000      	b.n	8001892 <CheckDelay+0x1a>
	}else{
		return 1;
 8001890:	2301      	movs	r3, #1
	}
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <MD_InitSignalform>:


void MD_InitSignalform(uint8_t i){
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
/* function puts dev to init level depending on its signalform
* dev: measuring device*/

	if(allDevices[i].signalform == FallingClock || allDevices[i].signalform == FallingTrigger || allDevices[i].signalform == FallingEdge){
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4a3c      	ldr	r2, [pc, #240]	; (800199c <MD_InitSignalform+0x100>)
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	330c      	adds	r3, #12
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d013      	beq.n	80018e2 <MD_InitSignalform+0x46>
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	4a37      	ldr	r2, [pc, #220]	; (800199c <MD_InitSignalform+0x100>)
 80018be:	212c      	movs	r1, #44	; 0x2c
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	330c      	adds	r3, #12
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <MD_InitSignalform+0x46>
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4a32      	ldr	r2, [pc, #200]	; (800199c <MD_InitSignalform+0x100>)
 80018d2:	212c      	movs	r1, #44	; 0x2c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	330c      	adds	r3, #12
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d113      	bne.n	800190a <MD_InitSignalform+0x6e>
		HAL_GPIO_WritePin(allDevices[i].port_out, allDevices[i].pin_out, GPIO_PIN_SET);
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4a2d      	ldr	r2, [pc, #180]	; (800199c <MD_InitSignalform+0x100>)
 80018e6:	212c      	movs	r1, #44	; 0x2c
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4a2a      	ldr	r2, [pc, #168]	; (800199c <MD_InitSignalform+0x100>)
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3304      	adds	r3, #4
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	4619      	mov	r1, r3
 8001904:	f002 f843 	bl	800398e <HAL_GPIO_WritePin>
 8001908:	e03a      	b.n	8001980 <MD_InitSignalform+0xe4>
	}else if(allDevices[i].signalform == RisingClock || allDevices[i].signalform == RisingTrigger || allDevices[i].signalform == M_Sequence || allDevices[i].signalform == RisingEdge){
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4a23      	ldr	r2, [pc, #140]	; (800199c <MD_InitSignalform+0x100>)
 800190e:	212c      	movs	r1, #44	; 0x2c
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	330c      	adds	r3, #12
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b06      	cmp	r3, #6
 800191c:	d01d      	beq.n	800195a <MD_InitSignalform+0xbe>
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	4a1e      	ldr	r2, [pc, #120]	; (800199c <MD_InitSignalform+0x100>)
 8001922:	212c      	movs	r1, #44	; 0x2c
 8001924:	fb01 f303 	mul.w	r3, r1, r3
 8001928:	4413      	add	r3, r2
 800192a:	330c      	adds	r3, #12
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d013      	beq.n	800195a <MD_InitSignalform+0xbe>
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <MD_InitSignalform+0x100>)
 8001936:	212c      	movs	r1, #44	; 0x2c
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	330c      	adds	r3, #12
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b07      	cmp	r3, #7
 8001944:	d009      	beq.n	800195a <MD_InitSignalform+0xbe>
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <MD_InitSignalform+0x100>)
 800194a:	212c      	movs	r1, #44	; 0x2c
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	330c      	adds	r3, #12
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d112      	bne.n	8001980 <MD_InitSignalform+0xe4>
		HAL_GPIO_WritePin(allDevices[i].port_out, allDevices[i].pin_out, GPIO_PIN_RESET);
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <MD_InitSignalform+0x100>)
 800195e:	212c      	movs	r1, #44	; 0x2c
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	4a0c      	ldr	r2, [pc, #48]	; (800199c <MD_InitSignalform+0x100>)
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	f002 f807 	bl	800398e <HAL_GPIO_WritePin>
	}
	allDevices[i].mSeqCounter = 0;
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4a06      	ldr	r2, [pc, #24]	; (800199c <MD_InitSignalform+0x100>)
 8001984:	212c      	movs	r1, #44	; 0x2c
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	3328      	adds	r3, #40	; 0x28
 800198e:	2200      	movs	r2, #0
 8001990:	801a      	strh	r2, [r3, #0]
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000474 	.word	0x20000474

080019a0 <MD_Trigger>:

void MD_Trigger(device dev, uint32_t runningTime){
 80019a0:	b084      	sub	sp, #16
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	f107 0c08 	add.w	ip, r7, #8
 80019aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
/* function toggles level for pulsLength(ms) of dev to create a Triggersignal
* dev: measuring device
* runningTime: time since measurement runs*/

	if(runningTime > 0 && runningTime <= dev.pulsLength){
 80019ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00b      	beq.n	80019cc <MD_Trigger+0x2c>
 80019b4:	8a7b      	ldrh	r3, [r7, #18]
 80019b6:	461a      	mov	r2, r3
 80019b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d806      	bhi.n	80019cc <MD_Trigger+0x2c>
		HAL_GPIO_WritePin(dev.port_out, dev.pin_out, dev.signalform);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	89b9      	ldrh	r1, [r7, #12]
 80019c2:	7d3a      	ldrb	r2, [r7, #20]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f001 ffe2 	bl	800398e <HAL_GPIO_WritePin>
 80019ca:	e00b      	b.n	80019e4 <MD_Trigger+0x44>
	}else{
		HAL_GPIO_WritePin(dev.port_out, dev.pin_out, !dev.signalform);
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	89b9      	ldrh	r1, [r7, #12]
 80019d0:	7d3b      	ldrb	r3, [r7, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	f001 ffd6 	bl	800398e <HAL_GPIO_WritePin>
	}
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019ec:	b004      	add	sp, #16
 80019ee:	4770      	bx	lr

080019f0 <InitSignalformAll>:


void InitSignalformAll(){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
//function puts all measuring devices to init level depending on their signalform

	for(uint8_t i = 0; i < deviceCount; i++){
 80019f6:	2300      	movs	r3, #0
 80019f8:	71fb      	strb	r3, [r7, #7]
 80019fa:	e006      	b.n	8001a0a <InitSignalformAll+0x1a>
		MD_InitSignalform(i);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff4c 	bl	800189c <MD_InitSignalform>
	for(uint8_t i = 0; i < deviceCount; i++){
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	3301      	adds	r3, #1
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <InitSignalformAll+0x30>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	79fa      	ldrb	r2, [r7, #7]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d3f3      	bcc.n	80019fc <InitSignalformAll+0xc>
	}
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000240 	.word	0x20000240

08001a24 <ReadData>:

//reads the received message and executes the corresponding function
int ReadData(uint8_t buf[]){
 8001a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af04      	add	r7, sp, #16
 8001a2a:	6078      	str	r0, [r7, #4]
/* function reads the received message and calls the corresponding function
* buf: save received byte messages */

	if(buf[0] != HelloByte){
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2baa      	cmp	r3, #170	; 0xaa
 8001a32:	d007      	beq.n	8001a44 <ReadData+0x20>
		uint8_t errorMessage = InvalidDataReceived;
 8001a34:	2305      	movs	r3, #5
 8001a36:	73bb      	strb	r3, [r7, #14]
		PrintError(errorMessage);
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fe7c 	bl	8001738 <PrintError>
		return 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e0a9      	b.n	8001b98 <ReadData+0x174>
	}
	uint8_t errorMessage = NoSuchMessage;
 8001a44:	2306      	movs	r3, #6
 8001a46:	73fb      	strb	r3, [r7, #15]
	switch (buf[1]){
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	dc14      	bgt.n	8001a7c <ReadData+0x58>
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f2c0 8099 	blt.w	8001b8a <ReadData+0x166>
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	f200 8096 	bhi.w	8001b8a <ReadData+0x166>
 8001a5e:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <ReadData+0x40>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001a85 	.word	0x08001a85
 8001a68:	08001ab1 	.word	0x08001ab1
 8001a6c:	08001add 	.word	0x08001add
 8001a70:	08001af7 	.word	0x08001af7
 8001a74:	08001b75 	.word	0x08001b75
 8001a78:	08001b7d 	.word	0x08001b7d
 8001a7c:	2bff      	cmp	r3, #255	; 0xff
 8001a7e:	f000 8081 	beq.w	8001b84 <ReadData+0x160>
 8001a82:	e082      	b.n	8001b8a <ReadData+0x166>
	case 0x00:
		SetStartSource(buf[2], buf[3]<<8 | buf[4], buf[5]);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3302      	adds	r3, #2
 8001a88:	7818      	ldrb	r0, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3303      	adds	r3, #3
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3304      	adds	r3, #4
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	b299      	uxth	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3305      	adds	r3, #5
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f000 f879 	bl	8001ba0 <SetStartSource>
		break;
 8001aae:	e072      	b.n	8001b96 <ReadData+0x172>
	case 0x01:
		SetStopSource(buf[2], buf[3]<<8 | buf[4], buf[5]);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	7818      	ldrb	r0, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3303      	adds	r3, #3
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	b21a      	sxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	b299      	uxth	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3305      	adds	r3, #5
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f000 f8f7 	bl	8001cc8 <SetStopSource>
		break;
 8001ada:	e05c      	b.n	8001b96 <ReadData+0x172>
	case 0x02:
		SetEvent(buf[2], buf[3], buf[4]);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	7818      	ldrb	r0, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3303      	adds	r3, #3
 8001ae6:	7819      	ldrb	r1, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f000 f97e 	bl	8001df0 <SetEvent>
		break;
 8001af4:	e04f      	b.n	8001b96 <ReadData+0x172>
	case 0x03:
		SetOutput(buf[2], buf[3], buf[4]<<8 | buf[5], buf[6],  buf[7]<<8 | buf[8], buf[9]<<8 | buf[10], buf[11], buf[12]);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3302      	adds	r3, #2
 8001afa:	781c      	ldrb	r4, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3303      	adds	r3, #3
 8001b00:	781d      	ldrb	r5, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3304      	adds	r3, #4
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	b21a      	sxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3305      	adds	r3, #5
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	b29e      	uxth	r6, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3306      	adds	r3, #6
 8001b1e:	f893 c000 	ldrb.w	ip, [r3]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3307      	adds	r3, #7
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3308      	adds	r3, #8
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	3209      	adds	r2, #9
 8001b3e:	7812      	ldrb	r2, [r2, #0]
 8001b40:	0212      	lsls	r2, r2, #8
 8001b42:	b211      	sxth	r1, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	320a      	adds	r2, #10
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	b212      	sxth	r2, r2
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	b212      	sxth	r2, r2
 8001b50:	b292      	uxth	r2, r2
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	310b      	adds	r1, #11
 8001b56:	7809      	ldrb	r1, [r1, #0]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	300c      	adds	r0, #12
 8001b5c:	7800      	ldrb	r0, [r0, #0]
 8001b5e:	9003      	str	r0, [sp, #12]
 8001b60:	9102      	str	r1, [sp, #8]
 8001b62:	9201      	str	r2, [sp, #4]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	4663      	mov	r3, ip
 8001b68:	4632      	mov	r2, r6
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f000 f9cb 	bl	8001f08 <SetOutput>
		break;
 8001b72:	e010      	b.n	8001b96 <ReadData+0x172>
	case 0x04:
		StartMeasurement(USB);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f000 fb2b 	bl	80021d0 <StartMeasurement>
		break;
 8001b7a:	e00c      	b.n	8001b96 <ReadData+0x172>
	case 0x05:
		StopMeasurement(USB);
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f000 fbd3 	bl	8002328 <StopMeasurement>
		break;
 8001b82:	e008      	b.n	8001b96 <ReadData+0x172>
	case 0xff:
		WhoAmI();
 8001b84:	f000 fc6a 	bl	800245c <WhoAmI>
		break;
 8001b88:	e005      	b.n	8001b96 <ReadData+0x172>
	default:
		PrintError(errorMessage);
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fdd3 	bl	8001738 <PrintError>
		return 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <ReadData+0x174>
	}
	return 1;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ba0 <SetStartSource>:

//
void SetStartSource(uint8_t newStartSource, uint16_t delay, uint8_t signalform){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	460b      	mov	r3, r1
 8001bac:	80bb      	strh	r3, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	71bb      	strb	r3, [r7, #6]
/* function sets the requirements how to start a measurement
* newStartSource: Source of the signal which triggers to start a measurement
* delay: delay to wait before measurement starts
* signalform: type of signal which triggers to start a measurement */

	uint32_t tempFall = 0x00;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
	uint32_t tempRise = 0x00;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
	if(newStartSource > MD6){
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d906      	bls.n	8001bce <SetStartSource+0x2e>
		uint8_t errorMessage = NoSuchStartSource;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	73bb      	strb	r3, [r7, #14]
		PrintError(errorMessage);
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fdb6 	bl	8001738 <PrintError>
		return;
 8001bcc:	e073      	b.n	8001cb6 <SetStartSource+0x116>
	}else{
		start.source = newStartSource;
 8001bce:	4a3b      	ldr	r2, [pc, #236]	; (8001cbc <SetStartSource+0x11c>)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	7013      	strb	r3, [r2, #0]
		start.delay = delay;
 8001bd4:	4a39      	ldr	r2, [pc, #228]	; (8001cbc <SetStartSource+0x11c>)
 8001bd6:	88bb      	ldrh	r3, [r7, #4]
 8001bd8:	8053      	strh	r3, [r2, #2]
		start.signalform = signalform;
 8001bda:	4a38      	ldr	r2, [pc, #224]	; (8001cbc <SetStartSource+0x11c>)
 8001bdc:	79bb      	ldrb	r3, [r7, #6]
 8001bde:	7113      	strb	r3, [r2, #4]
		uint8_t errorMessage = NoSuchSignalform;
 8001be0:	230b      	movs	r3, #11
 8001be2:	73fb      	strb	r3, [r7, #15]
		if(start.source > Button2){
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <SetStartSource+0x11c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d964      	bls.n	8001cb6 <SetStartSource+0x116>
			tempRise = EXTI->RTSR;
 8001bec:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <SetStartSource+0x120>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	613b      	str	r3, [r7, #16]
			tempFall = EXTI->FTSR;
 8001bf2:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <SetStartSource+0x120>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	617b      	str	r3, [r7, #20]
			CLEAR_BIT(tempRise, (uint32_t) allDevices[newStartSource].pin_out);
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4a32      	ldr	r2, [pc, #200]	; (8001cc4 <SetStartSource+0x124>)
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3304      	adds	r3, #4
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
			CLEAR_BIT(tempFall, (uint32_t) allDevices[newStartSource].pin_out);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	4a2c      	ldr	r2, [pc, #176]	; (8001cc4 <SetStartSource+0x124>)
 8001c14:	212c      	movs	r1, #44	; 0x2c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4013      	ands	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
			switch (start.signalform){
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <SetStartSource+0x11c>)
 8001c2a:	791b      	ldrb	r3, [r3, #4]
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d01f      	beq.n	8001c70 <SetStartSource+0xd0>
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	dc36      	bgt.n	8001ca2 <SetStartSource+0x102>
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d00e      	beq.n	8001c56 <SetStartSource+0xb6>
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d132      	bne.n	8001ca2 <SetStartSource+0x102>
			case RisingEdge:
				SET_BIT(tempRise, (uint32_t) allDevices[newStartSource].pin_out);
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <SetStartSource+0x124>)
 8001c40:	212c      	movs	r1, #44	; 0x2c
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	3304      	adds	r3, #4
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
				break;
 8001c54:	e029      	b.n	8001caa <SetStartSource+0x10a>
			case FallingEdge:
				SET_BIT(tempFall, (uint32_t) allDevices[newStartSource].pin_out);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <SetStartSource+0x124>)
 8001c5a:	212c      	movs	r1, #44	; 0x2c
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	3304      	adds	r3, #4
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
				break;
 8001c6e:	e01c      	b.n	8001caa <SetStartSource+0x10a>
			case AnyEdge:
				SET_BIT(tempRise, (uint32_t) allDevices[newStartSource].pin_out);
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <SetStartSource+0x124>)
 8001c74:	212c      	movs	r1, #44	; 0x2c
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
				SET_BIT(tempFall, (uint32_t) allDevices[newStartSource].pin_out);
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <SetStartSource+0x124>)
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3304      	adds	r3, #4
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
				break;
 8001ca0:	e003      	b.n	8001caa <SetStartSource+0x10a>
			default:
				PrintError(errorMessage);
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fd47 	bl	8001738 <PrintError>
			}
			EXTI->RTSR = tempRise;
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <SetStartSource+0x120>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	6093      	str	r3, [r2, #8]
			EXTI->FTSR = tempFall;
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <SetStartSource+0x120>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	60d3      	str	r3, [r2, #12]
		}
	}
}
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000638 	.word	0x20000638
 8001cc0:	40010400 	.word	0x40010400
 8001cc4:	20000474 	.word	0x20000474

08001cc8 <SetStopSource>:

void SetStopSource(uint8_t newStopSource, uint16_t delay, uint8_t signalform){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	80bb      	strh	r3, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	71bb      	strb	r3, [r7, #6]
/* function sets the requirements how to stop a measurement
* newStartSource: Source of the signal which triggers to stop a measurement
* delay: delay to wait before measurement stops
* signalform: type of signal which triggers to stop a measurement */
	uint32_t tempFall = 0x00;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
	uint32_t tempRise = 0x00;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
	if(newStopSource > MD6){
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d906      	bls.n	8001cf6 <SetStopSource+0x2e>
		uint8_t errorMessage = NoSuchStopSource;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	73bb      	strb	r3, [r7, #14]
		PrintError(errorMessage);
 8001cec:	7bbb      	ldrb	r3, [r7, #14]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fd22 	bl	8001738 <PrintError>
		return;
 8001cf4:	e073      	b.n	8001dde <SetStopSource+0x116>
	}else{
		stop.source = newStopSource;
 8001cf6:	4a3b      	ldr	r2, [pc, #236]	; (8001de4 <SetStopSource+0x11c>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	7013      	strb	r3, [r2, #0]
		stop.delay = delay;
 8001cfc:	4a39      	ldr	r2, [pc, #228]	; (8001de4 <SetStopSource+0x11c>)
 8001cfe:	88bb      	ldrh	r3, [r7, #4]
 8001d00:	8053      	strh	r3, [r2, #2]
		stop.signalform = signalform;
 8001d02:	4a38      	ldr	r2, [pc, #224]	; (8001de4 <SetStopSource+0x11c>)
 8001d04:	79bb      	ldrb	r3, [r7, #6]
 8001d06:	7113      	strb	r3, [r2, #4]
		uint8_t errorMessage = NoSuchSignalform;
 8001d08:	230b      	movs	r3, #11
 8001d0a:	73fb      	strb	r3, [r7, #15]
		if(stop.source > Button2){
 8001d0c:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <SetStopSource+0x11c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d964      	bls.n	8001dde <SetStopSource+0x116>
			tempRise = EXTI->RTSR;
 8001d14:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <SetStopSource+0x120>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	613b      	str	r3, [r7, #16]
			tempFall = EXTI->FTSR;
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <SetStopSource+0x120>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	617b      	str	r3, [r7, #20]
			CLEAR_BIT(tempRise, (uint32_t) allDevices[newStopSource].pin_out);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4a32      	ldr	r2, [pc, #200]	; (8001dec <SetStopSource+0x124>)
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
			CLEAR_BIT(tempFall, (uint32_t) allDevices[newStopSource].pin_out);
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	4a2c      	ldr	r2, [pc, #176]	; (8001dec <SetStopSource+0x124>)
 8001d3c:	212c      	movs	r1, #44	; 0x2c
 8001d3e:	fb01 f303 	mul.w	r3, r1, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	3304      	adds	r3, #4
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
			switch (stop.signalform){
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <SetStopSource+0x11c>)
 8001d52:	791b      	ldrb	r3, [r3, #4]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d01f      	beq.n	8001d98 <SetStopSource+0xd0>
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	dc36      	bgt.n	8001dca <SetStopSource+0x102>
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d00e      	beq.n	8001d7e <SetStopSource+0xb6>
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d132      	bne.n	8001dca <SetStopSource+0x102>
			case RisingEdge:
				SET_BIT(tempRise, (uint32_t) allDevices[newStopSource].pin_out);
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	4a21      	ldr	r2, [pc, #132]	; (8001dec <SetStopSource+0x124>)
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
				break;
 8001d7c:	e029      	b.n	8001dd2 <SetStopSource+0x10a>
			case FallingEdge:
				SET_BIT(tempFall, (uint32_t) allDevices[newStopSource].pin_out);
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <SetStopSource+0x124>)
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
				break;
 8001d96:	e01c      	b.n	8001dd2 <SetStopSource+0x10a>
			case AnyEdge:
				SET_BIT(tempRise, (uint32_t) allDevices[newStopSource].pin_out);
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	4a14      	ldr	r2, [pc, #80]	; (8001dec <SetStopSource+0x124>)
 8001d9c:	212c      	movs	r1, #44	; 0x2c
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
				SET_BIT(tempFall, (uint32_t) allDevices[newStopSource].pin_out);
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <SetStopSource+0x124>)
 8001db4:	212c      	movs	r1, #44	; 0x2c
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
				break;
 8001dc8:	e003      	b.n	8001dd2 <SetStopSource+0x10a>
			default:
				PrintError(errorMessage);
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fcb3 	bl	8001738 <PrintError>
			}
			EXTI->RTSR = tempRise;
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <SetStopSource+0x120>)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR = tempFall;
 8001dd8:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <SetStopSource+0x120>)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	60d3      	str	r3, [r2, #12]
		}
	}
}
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000640 	.word	0x20000640
 8001de8:	40010400 	.word	0x40010400
 8001dec:	20000474 	.word	0x20000474

08001df0 <SetEvent>:

void SetEvent(uint8_t eventSource, uint8_t active, uint8_t signalform){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	71bb      	strb	r3, [r7, #6]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	717b      	strb	r3, [r7, #5]
/* function sets the requirements how an event is triggered
* eventSource: Source of the signal which triggers an event
* active: turns the ability to trigger an event with this eventSource on (1) or off (0)
* signalform: type of signal which triggers an event*/
	event.source = eventSource;
 8001e02:	4a3e      	ldr	r2, [pc, #248]	; (8001efc <SetEvent+0x10c>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	7013      	strb	r3, [r2, #0]
	event.active = active;
 8001e08:	4a3c      	ldr	r2, [pc, #240]	; (8001efc <SetEvent+0x10c>)
 8001e0a:	79bb      	ldrb	r3, [r7, #6]
 8001e0c:	7053      	strb	r3, [r2, #1]
	event.signalform = signalform;
 8001e0e:	4a3b      	ldr	r2, [pc, #236]	; (8001efc <SetEvent+0x10c>)
 8001e10:	797b      	ldrb	r3, [r7, #5]
 8001e12:	7093      	strb	r3, [r2, #2]
	uint32_t tempFall = 0x00;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
	uint32_t tempRise = 0x00;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
	uint8_t errorMessage = NoSuchSignalform;
 8001e1c:	230b      	movs	r3, #11
 8001e1e:	73fb      	strb	r3, [r7, #15]
	if(event.source > Button2){
 8001e20:	4b36      	ldr	r3, [pc, #216]	; (8001efc <SetEvent+0x10c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d964      	bls.n	8001ef2 <SetEvent+0x102>
		tempRise = EXTI->RTSR;
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <SetEvent+0x110>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	613b      	str	r3, [r7, #16]
		tempFall = EXTI->FTSR;
 8001e2e:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <SetEvent+0x110>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	617b      	str	r3, [r7, #20]
		CLEAR_BIT(tempRise, (uint32_t) allDevices[eventSource].pin_out);
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	4a33      	ldr	r2, [pc, #204]	; (8001f04 <SetEvent+0x114>)
 8001e38:	212c      	movs	r1, #44	; 0x2c
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
		CLEAR_BIT(tempFall, (uint32_t) allDevices[eventSource].pin_out);
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	4a2d      	ldr	r2, [pc, #180]	; (8001f04 <SetEvent+0x114>)
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4013      	ands	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
		switch (event.signalform){
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <SetEvent+0x10c>)
 8001e66:	789b      	ldrb	r3, [r3, #2]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d01f      	beq.n	8001eac <SetEvent+0xbc>
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	dc36      	bgt.n	8001ede <SetEvent+0xee>
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d00e      	beq.n	8001e92 <SetEvent+0xa2>
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d132      	bne.n	8001ede <SetEvent+0xee>
		case RisingEdge:
			SET_BIT(tempRise, (uint32_t) allDevices[eventSource].pin_out);
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <SetEvent+0x114>)
 8001e7c:	212c      	movs	r1, #44	; 0x2c
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
			break;
 8001e90:	e029      	b.n	8001ee6 <SetEvent+0xf6>
		case FallingEdge:
			SET_BIT(tempFall, (uint32_t) allDevices[eventSource].pin_out);
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <SetEvent+0x114>)
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]
			break;
 8001eaa:	e01c      	b.n	8001ee6 <SetEvent+0xf6>
		case AnyEdge:
			SET_BIT(tempRise, (uint32_t) allDevices[eventSource].pin_out);
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <SetEvent+0x114>)
 8001eb0:	212c      	movs	r1, #44	; 0x2c
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3304      	adds	r3, #4
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
			SET_BIT(tempFall, (uint32_t) allDevices[eventSource].pin_out);
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <SetEvent+0x114>)
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
			break;
 8001edc:	e003      	b.n	8001ee6 <SetEvent+0xf6>
		default:
			PrintError(errorMessage);
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fc29 	bl	8001738 <PrintError>
		}
		EXTI->RTSR = tempRise;
 8001ee6:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <SetEvent+0x110>)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	6093      	str	r3, [r2, #8]
		EXTI->FTSR = tempFall;
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <SetEvent+0x110>)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	60d3      	str	r3, [r2, #12]
	}
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000634 	.word	0x20000634
 8001f00:	40010400 	.word	0x40010400
 8001f04:	20000474 	.word	0x20000474

08001f08 <SetOutput>:

void SetOutput(uint8_t device, uint8_t active, uint16_t delay, uint8_t signalform, uint16_t pulsLength, uint16_t frequency, uint8_t stopTrigger, uint8_t degree /*uint16_t pnDelay*/){
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4604      	mov	r4, r0
 8001f10:	4608      	mov	r0, r1
 8001f12:	4611      	mov	r1, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	4623      	mov	r3, r4
 8001f18:	71fb      	strb	r3, [r7, #7]
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71bb      	strb	r3, [r7, #6]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	80bb      	strh	r3, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	70fb      	strb	r3, [r7, #3]
* delay: delay to wait after measurement started
* signalform: type of output sync signal
* stopTrigger == 1: generates a trigger signal when measurement stops
* degree: degree to generate an M-Sequence */

	if(device >= deviceCount){
 8001f26:	4ba6      	ldr	r3, [pc, #664]	; (80021c0 <SetOutput+0x2b8>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d306      	bcc.n	8001f3e <SetOutput+0x36>
		uint8_t errorMessage = NoSuchDevice;
 8001f30:	2307      	movs	r3, #7
 8001f32:	73fb      	strb	r3, [r7, #15]
		PrintError(errorMessage);
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fbfe 	bl	8001738 <PrintError>
		return;
 8001f3c:	e134      	b.n	80021a8 <SetOutput+0x2a0>
	}
	allDevices[device].active = active;
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	4aa0      	ldr	r2, [pc, #640]	; (80021c4 <SetOutput+0x2bc>)
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	3306      	adds	r3, #6
 8001f4c:	79ba      	ldrb	r2, [r7, #6]
 8001f4e:	701a      	strb	r2, [r3, #0]
	allDevices[device].delay = delay;
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	4a9c      	ldr	r2, [pc, #624]	; (80021c4 <SetOutput+0x2bc>)
 8001f54:	212c      	movs	r1, #44	; 0x2c
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3308      	adds	r3, #8
 8001f5e:	88ba      	ldrh	r2, [r7, #4]
 8001f60:	801a      	strh	r2, [r3, #0]
	allDevices[device].signalform = signalform;
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	4a97      	ldr	r2, [pc, #604]	; (80021c4 <SetOutput+0x2bc>)
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	330c      	adds	r3, #12
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	701a      	strb	r2, [r3, #0]
	allDevices[device].pulsLength = pulsLength;
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	4a93      	ldr	r2, [pc, #588]	; (80021c4 <SetOutput+0x2bc>)
 8001f78:	212c      	movs	r1, #44	; 0x2c
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	4413      	add	r3, r2
 8001f80:	330a      	adds	r3, #10
 8001f82:	8c3a      	ldrh	r2, [r7, #32]
 8001f84:	801a      	strh	r2, [r3, #0]
	allDevices[device].frequency = frequency;
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	4a8e      	ldr	r2, [pc, #568]	; (80021c4 <SetOutput+0x2bc>)
 8001f8a:	212c      	movs	r1, #44	; 0x2c
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	330e      	adds	r3, #14
 8001f94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f96:	801a      	strh	r2, [r3, #0]
	allDevices[device].stopTrigger = stopTrigger;
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	4a8a      	ldr	r2, [pc, #552]	; (80021c4 <SetOutput+0x2bc>)
 8001f9c:	212c      	movs	r1, #44	; 0x2c
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3314      	adds	r3, #20
 8001fa6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001faa:	701a      	strb	r2, [r3, #0]
	allDevices[device].degree = degree;
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	4a85      	ldr	r2, [pc, #532]	; (80021c4 <SetOutput+0x2bc>)
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3320      	adds	r3, #32
 8001fba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001fbe:	701a      	strb	r2, [r3, #0]

	if(active && allDevices[device].degree != 0){
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d042      	beq.n	800204c <SetOutput+0x144>
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	4a7e      	ldr	r2, [pc, #504]	; (80021c4 <SetOutput+0x2bc>)
 8001fca:	212c      	movs	r1, #44	; 0x2c
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3320      	adds	r3, #32
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d038      	beq.n	800204c <SetOutput+0x144>
		maxSeqLength = pow(2, allDevices[device].degree)-1;
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	4a79      	ldr	r2, [pc, #484]	; (80021c4 <SetOutput+0x2bc>)
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3320      	adds	r3, #32
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fa0a 	bl	8000404 <__aeabi_ui2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	f04f 0000 	mov.w	r0, #0
 8001ff8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ffc:	f008 fe02 	bl	800ac04 <pow>
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	4b70      	ldr	r3, [pc, #448]	; (80021c8 <SetOutput+0x2c0>)
 8002006:	f7fe f8bf 	bl	8000188 <__aeabi_dsub>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f7fe fd21 	bl	8000a58 <__aeabi_d2uiz>
 8002016:	4603      	mov	r3, r0
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b6c      	ldr	r3, [pc, #432]	; (80021cc <SetOutput+0x2c4>)
 800201c:	701a      	strb	r2, [r3, #0]
		allDevices[device].mSeq = (uint8_t *)realloc(allDevices[device].mSeq, maxSeqLength);
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4a68      	ldr	r2, [pc, #416]	; (80021c4 <SetOutput+0x2bc>)
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3324      	adds	r3, #36	; 0x24
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a67      	ldr	r2, [pc, #412]	; (80021cc <SetOutput+0x2c4>)
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	79fc      	ldrb	r4, [r7, #7]
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f008 fd90 	bl	800ab5c <realloc>
 800203c:	4602      	mov	r2, r0
 800203e:	4961      	ldr	r1, [pc, #388]	; (80021c4 <SetOutput+0x2bc>)
 8002040:	232c      	movs	r3, #44	; 0x2c
 8002042:	fb03 f304 	mul.w	r3, r3, r4
 8002046:	440b      	add	r3, r1
 8002048:	3324      	adds	r3, #36	; 0x24
 800204a:	601a      	str	r2, [r3, #0]
	}

	if(active && frequency != 0){
 800204c:	79bb      	ldrb	r3, [r7, #6]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80a6 	beq.w	80021a0 <SetOutput+0x298>
 8002054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80a2 	beq.w	80021a0 <SetOutput+0x298>
		if(allDevices[device].signalform == M_Sequence){
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	4a59      	ldr	r2, [pc, #356]	; (80021c4 <SetOutput+0x2bc>)
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	330c      	adds	r3, #12
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b07      	cmp	r3, #7
 800206e:	d12e      	bne.n	80020ce <SetOutput+0x1c6>
			mls(allDevices[device].degree, allDevices[device].mSeq);
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	4a54      	ldr	r2, [pc, #336]	; (80021c4 <SetOutput+0x2bc>)
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	3320      	adds	r3, #32
 800207e:	781a      	ldrb	r2, [r3, #0]
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	4950      	ldr	r1, [pc, #320]	; (80021c4 <SetOutput+0x2bc>)
 8002084:	202c      	movs	r0, #44	; 0x2c
 8002086:	fb00 f303 	mul.w	r3, r0, r3
 800208a:	440b      	add	r3, r1
 800208c:	3324      	adds	r3, #36	; 0x24
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f7fe ffe6 	bl	8001064 <mls>
			allDevices[device].timeRef = 1e6 / frequency;//timeRef in µs
 8002098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe f9c2 	bl	8000424 <__aeabi_i2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	a142      	add	r1, pc, #264	; (adr r1, 80021b0 <SetOutput+0x2a8>)
 80020a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020aa:	f7fe fb4f 	bl	800074c <__aeabi_ddiv>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	79fc      	ldrb	r4, [r7, #7]
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7fe fcce 	bl	8000a58 <__aeabi_d2uiz>
 80020bc:	4602      	mov	r2, r0
 80020be:	4941      	ldr	r1, [pc, #260]	; (80021c4 <SetOutput+0x2bc>)
 80020c0:	232c      	movs	r3, #44	; 0x2c
 80020c2:	fb03 f304 	mul.w	r3, r3, r4
 80020c6:	440b      	add	r3, r1
 80020c8:	3310      	adds	r3, #16
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e057      	b.n	800217e <SetOutput+0x276>
		}else{
			if(frequency >= 8){
 80020ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020d0:	2b07      	cmp	r3, #7
 80020d2:	d925      	bls.n	8002120 <SetOutput+0x218>
				allDevices[device].timBase -> PSC = 32-1;
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	4a3b      	ldr	r2, [pc, #236]	; (80021c4 <SetOutput+0x2bc>)
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	331c      	adds	r3, #28
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	221f      	movs	r2, #31
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
				allDevices[device].timeRef = 1e6 / (frequency * 2);//toggle every half period
 80020e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe f999 	bl	8000424 <__aeabi_i2d>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	a12e      	add	r1, pc, #184	; (adr r1, 80021b0 <SetOutput+0x2a8>)
 80020f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020fc:	f7fe fb26 	bl	800074c <__aeabi_ddiv>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	79fc      	ldrb	r4, [r7, #7]
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f7fe fca5 	bl	8000a58 <__aeabi_d2uiz>
 800210e:	4602      	mov	r2, r0
 8002110:	492c      	ldr	r1, [pc, #176]	; (80021c4 <SetOutput+0x2bc>)
 8002112:	232c      	movs	r3, #44	; 0x2c
 8002114:	fb03 f304 	mul.w	r3, r3, r4
 8002118:	440b      	add	r3, r1
 800211a:	3310      	adds	r3, #16
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	e02e      	b.n	800217e <SetOutput+0x276>
			}else{
				allDevices[device].timBase -> PSC = 265-1;
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <SetOutput+0x2bc>)
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	331c      	adds	r3, #28
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f44f 7284 	mov.w	r2, #264	; 0x108
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
				allDevices[device].timeRef = (1e6 / (frequency * 2 * 8)) - 300;
 8002136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f972 	bl	8000424 <__aeabi_i2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	a11a      	add	r1, pc, #104	; (adr r1, 80021b0 <SetOutput+0x2a8>)
 8002146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800214a:	f7fe faff 	bl	800074c <__aeabi_ddiv>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	a318      	add	r3, pc, #96	; (adr r3, 80021b8 <SetOutput+0x2b0>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	f7fe f814 	bl	8000188 <__aeabi_dsub>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	79fc      	ldrb	r4, [r7, #7]
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fc75 	bl	8000a58 <__aeabi_d2uiz>
 800216e:	4602      	mov	r2, r0
 8002170:	4914      	ldr	r1, [pc, #80]	; (80021c4 <SetOutput+0x2bc>)
 8002172:	232c      	movs	r3, #44	; 0x2c
 8002174:	fb03 f304 	mul.w	r3, r3, r4
 8002178:	440b      	add	r3, r1
 800217a:	3310      	adds	r3, #16
 800217c:	601a      	str	r2, [r3, #0]
			}

		}
		allDevices[device].timBase -> ARR = allDevices[device].timeRef;
 800217e:	79fa      	ldrb	r2, [r7, #7]
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	4910      	ldr	r1, [pc, #64]	; (80021c4 <SetOutput+0x2bc>)
 8002184:	202c      	movs	r0, #44	; 0x2c
 8002186:	fb00 f303 	mul.w	r3, r0, r3
 800218a:	440b      	add	r3, r1
 800218c:	331c      	adds	r3, #28
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <SetOutput+0x2bc>)
 8002192:	202c      	movs	r0, #44	; 0x2c
 8002194:	fb00 f202 	mul.w	r2, r0, r2
 8002198:	440a      	add	r2, r1
 800219a:	3210      	adds	r2, #16
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	MD_InitSignalform(device);
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fb7a 	bl	800189c <MD_InitSignalform>
}
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd90      	pop	{r4, r7, pc}
 80021ae:	bf00      	nop
 80021b0:	00000000 	.word	0x00000000
 80021b4:	412e8480 	.word	0x412e8480
 80021b8:	00000000 	.word	0x00000000
 80021bc:	4072c000 	.word	0x4072c000
 80021c0:	20000240 	.word	0x20000240
 80021c4:	20000474 	.word	0x20000474
 80021c8:	3ff00000 	.word	0x3ff00000
 80021cc:	20000241 	.word	0x20000241

080021d0 <StartMeasurement>:

void StartMeasurement(uint8_t usedSource){
 80021d0:	b5b0      	push	{r4, r5, r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
/* function starts a measurement
* usedSource: signal which triggered the start of the measurement*/
	if(start.source == usedSource && measRun == 0){
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <StartMeasurement+0x13c>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	79fa      	ldrb	r2, [r7, #7]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f040 808e 	bne.w	8002302 <StartMeasurement+0x132>
 80021e6:	4b4a      	ldr	r3, [pc, #296]	; (8002310 <StartMeasurement+0x140>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8089 	bne.w	8002302 <StartMeasurement+0x132>
		InitSignalformAll();
 80021f0:	f7ff fbfe 	bl	80019f0 <InitSignalformAll>
		HAL_Delay(start.delay);
 80021f4:	4b45      	ldr	r3, [pc, #276]	; (800230c <StartMeasurement+0x13c>)
 80021f6:	885b      	ldrh	r3, [r3, #2]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 f901 	bl	8003400 <HAL_Delay>
		LightLED(ColorGreen);
 80021fe:	2002      	movs	r0, #2
 8002200:	f7ff fa54 	bl	80016ac <LightLED>
		measRun = 1;
 8002204:	4b42      	ldr	r3, [pc, #264]	; (8002310 <StartMeasurement+0x140>)
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
		SendMessage(RunByte, MeasurementRun, 3);
 800220a:	2203      	movs	r2, #3
 800220c:	21bb      	movs	r1, #187	; 0xbb
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff fac2 	bl	8001798 <SendMessage>
		stopTime = 0;
 8002214:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <StartMeasurement+0x144>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
		startTime = HAL_GetTick();
 800221a:	f001 f8e7 	bl	80033ec <HAL_GetTick>
 800221e:	4603      	mov	r3, r0
 8002220:	4a3d      	ldr	r2, [pc, #244]	; (8002318 <StartMeasurement+0x148>)
 8002222:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim6);
 8002224:	483d      	ldr	r0, [pc, #244]	; (800231c <StartMeasurement+0x14c>)
 8002226:	f003 fdf7 	bl	8005e18 <HAL_TIM_Base_Start_IT>
		for(uint8_t i = MD1; i < deviceCount; i++){
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	e063      	b.n	80022f8 <StartMeasurement+0x128>
			if(allDevices[i].active){
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	4a3b      	ldr	r2, [pc, #236]	; (8002320 <StartMeasurement+0x150>)
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3306      	adds	r3, #6
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d056      	beq.n	80022f2 <StartMeasurement+0x122>
				if(allDevices[i].signalform == RisingEdge || allDevices[i].signalform == FallingEdge){
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	4a36      	ldr	r2, [pc, #216]	; (8002320 <StartMeasurement+0x150>)
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	330c      	adds	r3, #12
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d009      	beq.n	800226c <StartMeasurement+0x9c>
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	4a31      	ldr	r2, [pc, #196]	; (8002320 <StartMeasurement+0x150>)
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	330c      	adds	r3, #12
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d12d      	bne.n	80022c8 <StartMeasurement+0xf8>
					HAL_GPIO_WritePin(allDevices[i].port_out, allDevices[i].pin_out, !HAL_GPIO_ReadPin(allDevices[i].port_out, allDevices[i].pin_out));
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	4a2c      	ldr	r2, [pc, #176]	; (8002320 <StartMeasurement+0x150>)
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	681c      	ldr	r4, [r3, #0]
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	4a28      	ldr	r2, [pc, #160]	; (8002320 <StartMeasurement+0x150>)
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	3304      	adds	r3, #4
 8002288:	881d      	ldrh	r5, [r3, #0]
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	4a24      	ldr	r2, [pc, #144]	; (8002320 <StartMeasurement+0x150>)
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	4921      	ldr	r1, [pc, #132]	; (8002320 <StartMeasurement+0x150>)
 800229c:	202c      	movs	r0, #44	; 0x2c
 800229e:	fb00 f303 	mul.w	r3, r0, r3
 80022a2:	440b      	add	r3, r1
 80022a4:	3304      	adds	r3, #4
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	4610      	mov	r0, r2
 80022ac:	f001 fb58 	bl	8003960 <HAL_GPIO_ReadPin>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf0c      	ite	eq
 80022b6:	2301      	moveq	r3, #1
 80022b8:	2300      	movne	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	4629      	mov	r1, r5
 80022c0:	4620      	mov	r0, r4
 80022c2:	f001 fb64 	bl	800398e <HAL_GPIO_WritePin>
 80022c6:	e014      	b.n	80022f2 <StartMeasurement+0x122>
				}else if(allDevices[i].frequency != 0){
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	4a15      	ldr	r2, [pc, #84]	; (8002320 <StartMeasurement+0x150>)
 80022cc:	212c      	movs	r1, #44	; 0x2c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	330e      	adds	r3, #14
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <StartMeasurement+0x122>
					HAL_TIM_Base_Start_IT(allDevices[i].clockTimer);
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <StartMeasurement+0x150>)
 80022e0:	212c      	movs	r1, #44	; 0x2c
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	3318      	adds	r3, #24
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fd93 	bl	8005e18 <HAL_TIM_Base_Start_IT>
		for(uint8_t i = MD1; i < deviceCount; i++){
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	3301      	adds	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <StartMeasurement+0x154>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d396      	bcc.n	8002230 <StartMeasurement+0x60>
				}
			}
		}
	}
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bdb0      	pop	{r4, r5, r7, pc}
 800230a:	bf00      	nop
 800230c:	20000638 	.word	0x20000638
 8002310:	2000022d 	.word	0x2000022d
 8002314:	2000023c 	.word	0x2000023c
 8002318:	20000234 	.word	0x20000234
 800231c:	20000748 	.word	0x20000748
 8002320:	20000474 	.word	0x20000474
 8002324:	20000240 	.word	0x20000240

08002328 <StopMeasurement>:

void StopMeasurement(uint8_t usedSource){
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
/* function stops a measurement
* usedSource: signal which triggered the stop of the measurement*/
	if(stop.source == usedSource && measRun == 1){
 8002332:	4b44      	ldr	r3, [pc, #272]	; (8002444 <StopMeasurement+0x11c>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	79fa      	ldrb	r2, [r7, #7]
 8002338:	429a      	cmp	r2, r3
 800233a:	d17f      	bne.n	800243c <StopMeasurement+0x114>
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <StopMeasurement+0x120>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d17b      	bne.n	800243c <StopMeasurement+0x114>
		HAL_Delay(stop.delay);
 8002344:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <StopMeasurement+0x11c>)
 8002346:	885b      	ldrh	r3, [r3, #2]
 8002348:	4618      	mov	r0, r3
 800234a:	f001 f859 	bl	8003400 <HAL_Delay>
		LightLED(ColorOff);
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff f9ac 	bl	80016ac <LightLED>
		measRun = 0;
 8002354:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <StopMeasurement+0x120>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
		SendMessage(RunByte, MeasurementStop, 3);
 800235a:	2203      	movs	r2, #3
 800235c:	21cc      	movs	r1, #204	; 0xcc
 800235e:	2002      	movs	r0, #2
 8002360:	f7ff fa1a 	bl	8001798 <SendMessage>
		stopTime = HAL_GetTick();
 8002364:	f001 f842 	bl	80033ec <HAL_GetTick>
 8002368:	4603      	mov	r3, r0
 800236a:	4a38      	ldr	r2, [pc, #224]	; (800244c <StopMeasurement+0x124>)
 800236c:	6013      	str	r3, [r2, #0]
		startTime = 0;
 800236e:	4b38      	ldr	r3, [pc, #224]	; (8002450 <StopMeasurement+0x128>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
		for(uint8_t i = MD1; i < deviceCount; i++){
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e059      	b.n	800242e <StopMeasurement+0x106>
			if(allDevices[i].signalform == RisingEdge || allDevices[i].signalform == FallingEdge){
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	4a35      	ldr	r2, [pc, #212]	; (8002454 <StopMeasurement+0x12c>)
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	330c      	adds	r3, #12
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d009      	beq.n	80023a2 <StopMeasurement+0x7a>
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	4a30      	ldr	r2, [pc, #192]	; (8002454 <StopMeasurement+0x12c>)
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	330c      	adds	r3, #12
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d12d      	bne.n	80023fe <StopMeasurement+0xd6>
				HAL_GPIO_WritePin(allDevices[i].port_out, allDevices[i].pin_out, !HAL_GPIO_ReadPin(allDevices[i].port_out, allDevices[i].pin_out));
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <StopMeasurement+0x12c>)
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	681c      	ldr	r4, [r3, #0]
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	4a28      	ldr	r2, [pc, #160]	; (8002454 <StopMeasurement+0x12c>)
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	3304      	adds	r3, #4
 80023be:	881d      	ldrh	r5, [r3, #0]
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	4a24      	ldr	r2, [pc, #144]	; (8002454 <StopMeasurement+0x12c>)
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	4920      	ldr	r1, [pc, #128]	; (8002454 <StopMeasurement+0x12c>)
 80023d2:	202c      	movs	r0, #44	; 0x2c
 80023d4:	fb00 f303 	mul.w	r3, r0, r3
 80023d8:	440b      	add	r3, r1
 80023da:	3304      	adds	r3, #4
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	4619      	mov	r1, r3
 80023e0:	4610      	mov	r0, r2
 80023e2:	f001 fabd 	bl	8003960 <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	4629      	mov	r1, r5
 80023f6:	4620      	mov	r0, r4
 80023f8:	f001 fac9 	bl	800398e <HAL_GPIO_WritePin>
 80023fc:	e014      	b.n	8002428 <StopMeasurement+0x100>
			}else if(allDevices[i].frequency != 0){
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	4a14      	ldr	r2, [pc, #80]	; (8002454 <StopMeasurement+0x12c>)
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	330e      	adds	r3, #14
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <StopMeasurement+0x100>
				HAL_TIM_Base_Stop_IT(allDevices[i].clockTimer);
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <StopMeasurement+0x12c>)
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3318      	adds	r3, #24
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f003 fd4a 	bl	8005ebc <HAL_TIM_Base_Stop_IT>
		for(uint8_t i = MD1; i < deviceCount; i++){
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	3301      	adds	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <StopMeasurement+0x130>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	429a      	cmp	r2, r3
 8002436:	d3a0      	bcc.n	800237a <StopMeasurement+0x52>
			}
		}
		InitSignalformAll();
 8002438:	f7ff fada 	bl	80019f0 <InitSignalformAll>
	}
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bdb0      	pop	{r4, r5, r7, pc}
 8002444:	20000640 	.word	0x20000640
 8002448:	2000022d 	.word	0x2000022d
 800244c:	2000023c 	.word	0x2000023c
 8002450:	20000234 	.word	0x20000234
 8002454:	20000474 	.word	0x20000474
 8002458:	20000240 	.word	0x20000240

0800245c <WhoAmI>:

void WhoAmI(){
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	SendMessage(0, SendWhoAmI, 2);
 8002460:	2202      	movs	r2, #2
 8002462:	21aa      	movs	r1, #170	; 0xaa
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff f997 	bl	8001798 <SendMessage>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <UpdateStartTrigger>:

void UpdateStartTrigger(){
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	b08b      	sub	sp, #44	; 0x2c
 8002474:	af08      	add	r7, sp, #32
/* function toggles level of all active devices for 4ms when measurement starts*/
	measTime = HAL_GetTick() - startTime;
 8002476:	f000 ffb9 	bl	80033ec <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <UpdateStartTrigger+0xc8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	4a2e      	ldr	r2, [pc, #184]	; (800253c <UpdateStartTrigger+0xcc>)
 8002484:	6013      	str	r3, [r2, #0]
	for(uint8_t i = MD1; i < deviceCount; i++){
 8002486:	2300      	movs	r3, #0
 8002488:	71fb      	strb	r3, [r7, #7]
 800248a:	e04a      	b.n	8002522 <UpdateStartTrigger+0xb2>
		if(allDevices[i].active && CheckDelay(measTime, allDevices[i].delay)){
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	4a2c      	ldr	r2, [pc, #176]	; (8002540 <UpdateStartTrigger+0xd0>)
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3306      	adds	r3, #6
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d03c      	beq.n	800251a <UpdateStartTrigger+0xaa>
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <UpdateStartTrigger+0xcc>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4926      	ldr	r1, [pc, #152]	; (8002540 <UpdateStartTrigger+0xd0>)
 80024a8:	202c      	movs	r0, #44	; 0x2c
 80024aa:	fb00 f303 	mul.w	r3, r0, r3
 80024ae:	440b      	add	r3, r1
 80024b0:	3308      	adds	r3, #8
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f7ff f9de 	bl	8001878 <CheckDelay>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d02b      	beq.n	800251a <UpdateStartTrigger+0xaa>
			uint32_t runningTime = measTime - allDevices[i].delay;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	; (800253c <UpdateStartTrigger+0xcc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	79fa      	ldrb	r2, [r7, #7]
 80024c8:	491d      	ldr	r1, [pc, #116]	; (8002540 <UpdateStartTrigger+0xd0>)
 80024ca:	202c      	movs	r0, #44	; 0x2c
 80024cc:	fb00 f202 	mul.w	r2, r0, r2
 80024d0:	440a      	add	r2, r1
 80024d2:	3208      	adds	r2, #8
 80024d4:	8812      	ldrh	r2, [r2, #0]
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	603b      	str	r3, [r7, #0]
			switch (allDevices[i].signalform){
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	4a18      	ldr	r2, [pc, #96]	; (8002540 <UpdateStartTrigger+0xd0>)
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	330c      	adds	r3, #12
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d816      	bhi.n	800251c <UpdateStartTrigger+0xac>
			case FallingTrigger:
			case RisingTrigger:
				MD_Trigger(allDevices[i], runningTime);
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	4a13      	ldr	r2, [pc, #76]	; (8002540 <UpdateStartTrigger+0xd0>)
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	18d6      	adds	r6, r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	9307      	str	r3, [sp, #28]
 80024fe:	466d      	mov	r5, sp
 8002500:	f106 0410 	add.w	r4, r6, #16
 8002504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002508:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800250c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002510:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002514:	f7ff fa44 	bl	80019a0 <MD_Trigger>
				break;
 8002518:	e000      	b.n	800251c <UpdateStartTrigger+0xac>
			}
		}
 800251a:	bf00      	nop
	for(uint8_t i = MD1; i < deviceCount; i++){
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	3301      	adds	r3, #1
 8002520:	71fb      	strb	r3, [r7, #7]
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <UpdateStartTrigger+0xd4>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	79fa      	ldrb	r2, [r7, #7]
 8002528:	429a      	cmp	r2, r3
 800252a:	d3af      	bcc.n	800248c <UpdateStartTrigger+0x1c>
	}
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002536:	bf00      	nop
 8002538:	20000234 	.word	0x20000234
 800253c:	20000238 	.word	0x20000238
 8002540:	20000474 	.word	0x20000474
 8002544:	20000240 	.word	0x20000240

08002548 <UpdateStopTrigger>:

void UpdateStopTrigger(){
 8002548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254a:	b08b      	sub	sp, #44	; 0x2c
 800254c:	af08      	add	r7, sp, #32
/* function toggles level of all active devices for 4ms when measurement stops*/
	measTime = HAL_GetTick() - stopTime;
 800254e:	f000 ff4d 	bl	80033ec <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <UpdateStopTrigger+0x8c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <UpdateStopTrigger+0x90>)
 800255c:	6013      	str	r3, [r2, #0]
	for(uint8_t i = MD1; i < deviceCount; i++){
 800255e:	2300      	movs	r3, #0
 8002560:	71fb      	strb	r3, [r7, #7]
 8002562:	e02c      	b.n	80025be <UpdateStopTrigger+0x76>
		if(allDevices[i].active && allDevices[i].stopTrigger == 1){
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <UpdateStopTrigger+0x94>)
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3306      	adds	r3, #6
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01f      	beq.n	80025b8 <UpdateStopTrigger+0x70>
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	4a18      	ldr	r2, [pc, #96]	; (80025dc <UpdateStopTrigger+0x94>)
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3314      	adds	r3, #20
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d115      	bne.n	80025b8 <UpdateStopTrigger+0x70>
			MD_Trigger(allDevices[i], measTime);
 800258c:	79fa      	ldrb	r2, [r7, #7]
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <UpdateStopTrigger+0x90>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4912      	ldr	r1, [pc, #72]	; (80025dc <UpdateStopTrigger+0x94>)
 8002594:	202c      	movs	r0, #44	; 0x2c
 8002596:	fb00 f202 	mul.w	r2, r0, r2
 800259a:	188e      	adds	r6, r1, r2
 800259c:	9307      	str	r3, [sp, #28]
 800259e:	466d      	mov	r5, sp
 80025a0:	f106 0410 	add.w	r4, r6, #16
 80025a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80025ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80025b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80025b4:	f7ff f9f4 	bl	80019a0 <MD_Trigger>
	for(uint8_t i = MD1; i < deviceCount; i++){
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	3301      	adds	r3, #1
 80025bc:	71fb      	strb	r3, [r7, #7]
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <UpdateStopTrigger+0x98>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	79fa      	ldrb	r2, [r7, #7]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3cd      	bcc.n	8002564 <UpdateStopTrigger+0x1c>
		}
	}
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000023c 	.word	0x2000023c
 80025d8:	20000238 	.word	0x20000238
 80025dc:	20000474 	.word	0x20000474
 80025e0:	20000240 	.word	0x20000240

080025e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
	//Interrupt Button 1
	if(GPIO_Pin == Button1_Pin){
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	2b80      	cmp	r3, #128	; 0x80
 80025f2:	d102      	bne.n	80025fa <HAL_GPIO_EXTI_Callback+0x16>
		button1_event = 1;
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_GPIO_EXTI_Callback+0x48>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
	}
	//Interrupt Button 2
	if(GPIO_Pin == Button2_Pin){
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d102      	bne.n	8002606 <HAL_GPIO_EXTI_Callback+0x22>
		button2_event = 1;
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
	}
	//Interrupt MD5
	if(GPIO_Pin == MD5_I_Pin){
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800260c:	d102      	bne.n	8002614 <HAL_GPIO_EXTI_Callback+0x30>
		md5_event = 1;
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_GPIO_EXTI_Callback+0x50>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
	}
	//Interrupt MD6
	if(GPIO_Pin == MD6_I_Pin){
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261a:	d102      	bne.n	8002622 <HAL_GPIO_EXTI_Callback+0x3e>
		md6_event = 1;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_GPIO_EXTI_Callback+0x54>)
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
	}
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	2000022e 	.word	0x2000022e
 8002630:	2000022f 	.word	0x2000022f
 8002634:	20000231 	.word	0x20000231
 8002638:	20000230 	.word	0x20000230

0800263c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
/* function uses timer events as a reference to generate the output-sync-signals during the measurement
* *htim: timer that triggered an interrupt */
	if(htim == &htim6){
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4aa7      	ldr	r2, [pc, #668]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d108      	bne.n	800265e <HAL_TIM_PeriodElapsedCallback+0x22>
		if(measRun){
 800264c:	4ba6      	ldr	r3, [pc, #664]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_TIM_PeriodElapsedCallback+0x1e>
			UpdateStartTrigger();
 8002654:	f7ff ff0c 	bl	8002470 <UpdateStartTrigger>
 8002658:	e001      	b.n	800265e <HAL_TIM_PeriodElapsedCallback+0x22>
		}else{
			UpdateStopTrigger();
 800265a:	f7ff ff75 	bl	8002548 <UpdateStopTrigger>
		}
	}

	if(htim == &htim2 && CheckDelay(measTime, allDevices[MD1].delay)){
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4aa2      	ldr	r2, [pc, #648]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d13c      	bne.n	80026e0 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8002666:	4ba2      	ldr	r3, [pc, #648]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4aa2      	ldr	r2, [pc, #648]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800266c:	8912      	ldrh	r2, [r2, #8]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff f901 	bl	8001878 <CheckDelay>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d031      	beq.n	80026e0 <HAL_TIM_PeriodElapsedCallback+0xa4>
		if(allDevices[MD1].signalform != M_Sequence){
 800267c:	4b9d      	ldr	r3, [pc, #628]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800267e:	7b1b      	ldrb	r3, [r3, #12]
 8002680:	2b07      	cmp	r3, #7
 8002682:	d008      	beq.n	8002696 <HAL_TIM_PeriodElapsedCallback+0x5a>
			HAL_GPIO_TogglePin(allDevices[MD1].port_out, allDevices[MD1].pin_out);
 8002684:	4b9b      	ldr	r3, [pc, #620]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a9a      	ldr	r2, [pc, #616]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800268a:	8892      	ldrh	r2, [r2, #4]
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f001 f995 	bl	80039be <HAL_GPIO_TogglePin>
 8002694:	e024      	b.n	80026e0 <HAL_TIM_PeriodElapsedCallback+0xa4>
		}else{
			HAL_GPIO_WritePin(allDevices[MD1].port_out, allDevices[MD1].pin_out, allDevices[MD1].mSeq[allDevices[MD1].mSeqCounter]);
 8002696:	4b97      	ldr	r3, [pc, #604]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	4b96      	ldr	r3, [pc, #600]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800269c:	8899      	ldrh	r1, [r3, #4]
 800269e:	4b95      	ldr	r3, [pc, #596]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	4a94      	ldr	r2, [pc, #592]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80026a4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f001 f96f 	bl	800398e <HAL_GPIO_WritePin>
			allDevices[MD1].mSeqCounter++;
 80026b0:	4b90      	ldr	r3, [pc, #576]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	3301      	adds	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	4b8e      	ldr	r3, [pc, #568]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80026ba:	851a      	strh	r2, [r3, #40]	; 0x28
			if(allDevices[MD1].mSeqCounter > maxSeqLength-1){
 80026bc:	4b8e      	ldr	r3, [pc, #568]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b8c      	ldr	r3, [pc, #560]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	429a      	cmp	r2, r3
 80026c8:	dc0a      	bgt.n	80026e0 <HAL_TIM_PeriodElapsedCallback+0xa4>
				HAL_GPIO_WritePin(allDevices[MD1].port_out, allDevices[MD1].pin_out, GPIO_PIN_SET);
 80026ca:	4b8a      	ldr	r3, [pc, #552]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a89      	ldr	r2, [pc, #548]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80026d0:	8891      	ldrh	r1, [r2, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 f95a 	bl	800398e <HAL_GPIO_WritePin>
				allDevices[MD1].mSeqCounter = 0;
 80026da:	4b86      	ldr	r3, [pc, #536]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
			}
		}
	}
	if(htim == &htim3 && CheckDelay(measTime, allDevices[MD2].delay)){
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a86      	ldr	r2, [pc, #536]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d142      	bne.n	800276e <HAL_TIM_PeriodElapsedCallback+0x132>
 80026e8:	4b81      	ldr	r3, [pc, #516]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a81      	ldr	r2, [pc, #516]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80026ee:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff f8c0 	bl	8001878 <CheckDelay>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d037      	beq.n	800276e <HAL_TIM_PeriodElapsedCallback+0x132>
		if(allDevices[MD2].signalform != M_Sequence){
 80026fe:	4b7d      	ldr	r3, [pc, #500]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002700:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002704:	2b07      	cmp	r3, #7
 8002706:	d008      	beq.n	800271a <HAL_TIM_PeriodElapsedCallback+0xde>
			HAL_GPIO_TogglePin(allDevices[MD2].port_out, allDevices[MD2].pin_out);
 8002708:	4b7a      	ldr	r3, [pc, #488]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	4a79      	ldr	r2, [pc, #484]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800270e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f001 f953 	bl	80039be <HAL_GPIO_TogglePin>
 8002718:	e029      	b.n	800276e <HAL_TIM_PeriodElapsedCallback+0x132>
		}else{
			HAL_GPIO_WritePin(allDevices[MD2].port_out, allDevices[MD2].pin_out, allDevices[MD2].mSeq[allDevices[MD2].mSeqCounter]);
 800271a:	4b76      	ldr	r3, [pc, #472]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800271c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800271e:	4b75      	ldr	r3, [pc, #468]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002720:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8002722:	4b74      	ldr	r3, [pc, #464]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002726:	4a73      	ldr	r2, [pc, #460]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002728:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 800272c:	4413      	add	r3, r2
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	f001 f92c 	bl	800398e <HAL_GPIO_WritePin>
			allDevices[MD2].mSeqCounter++;
 8002736:	4b6f      	ldr	r3, [pc, #444]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002738:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800273c:	3301      	adds	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	4b6c      	ldr	r3, [pc, #432]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002742:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			if(allDevices[MD2].mSeqCounter > maxSeqLength-1){
 8002746:	4b6c      	ldr	r3, [pc, #432]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b69      	ldr	r3, [pc, #420]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800274e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002752:	429a      	cmp	r2, r3
 8002754:	dc0b      	bgt.n	800276e <HAL_TIM_PeriodElapsedCallback+0x132>
				HAL_GPIO_WritePin(allDevices[MD2].port_out, allDevices[MD2].pin_out, GPIO_PIN_SET);
 8002756:	4b67      	ldr	r3, [pc, #412]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	4a66      	ldr	r2, [pc, #408]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800275c:	8e11      	ldrh	r1, [r2, #48]	; 0x30
 800275e:	2201      	movs	r2, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f001 f914 	bl	800398e <HAL_GPIO_WritePin>
				allDevices[MD2].mSeqCounter = 0;
 8002766:	4b63      	ldr	r3, [pc, #396]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002768:	2200      	movs	r2, #0
 800276a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			}
		}
	}
	if(htim == &htim4 && CheckDelay(measTime, allDevices[MD3].delay)){
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a63      	ldr	r2, [pc, #396]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d146      	bne.n	8002804 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8002776:	4b5e      	ldr	r3, [pc, #376]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a5e      	ldr	r2, [pc, #376]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800277c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f878 	bl	8001878 <CheckDelay>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d03a      	beq.n	8002804 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		if(allDevices[MD3].signalform != M_Sequence){
 800278e:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002790:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002794:	2b07      	cmp	r3, #7
 8002796:	d009      	beq.n	80027ac <HAL_TIM_PeriodElapsedCallback+0x170>
			HAL_GPIO_TogglePin(allDevices[MD3].port_out, allDevices[MD3].pin_out);
 8002798:	4b56      	ldr	r3, [pc, #344]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	4a55      	ldr	r2, [pc, #340]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800279e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 f90a 	bl	80039be <HAL_GPIO_TogglePin>
 80027aa:	e02b      	b.n	8002804 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		}else{
			HAL_GPIO_WritePin(allDevices[MD3].port_out, allDevices[MD3].pin_out, allDevices[MD3].mSeq[allDevices[MD3].mSeqCounter]);
 80027ac:	4b51      	ldr	r3, [pc, #324]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80027ae:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80027b0:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80027b2:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 80027b6:	4b4f      	ldr	r3, [pc, #316]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80027b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ba:	4a4e      	ldr	r2, [pc, #312]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80027bc:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 80027c0:	4413      	add	r3, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	f001 f8e2 	bl	800398e <HAL_GPIO_WritePin>
			allDevices[MD3].mSeqCounter++;
 80027ca:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80027cc:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80027d0:	3301      	adds	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80027d6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			if(allDevices[MD3].mSeqCounter > maxSeqLength-1){
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b44      	ldr	r3, [pc, #272]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80027e2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80027e6:	429a      	cmp	r2, r3
 80027e8:	dc0c      	bgt.n	8002804 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				HAL_GPIO_WritePin(allDevices[MD3].port_out, allDevices[MD3].pin_out, GPIO_PIN_SET);
 80027ea:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	4a41      	ldr	r2, [pc, #260]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80027f0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 80027f4:	2201      	movs	r2, #1
 80027f6:	4618      	mov	r0, r3
 80027f8:	f001 f8c9 	bl	800398e <HAL_GPIO_WritePin>
				allDevices[MD3].mSeqCounter = 0;
 80027fc:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80027fe:	2200      	movs	r2, #0
 8002800:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			}
		}
	}
	if(htim == &htim7 && CheckDelay(measTime, allDevices[MD4].delay)){
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a3f      	ldr	r2, [pc, #252]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d14a      	bne.n	80028a2 <HAL_TIM_PeriodElapsedCallback+0x266>
 800280c:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a38      	ldr	r2, [pc, #224]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002812:	f8b2 208c 	ldrh.w	r2, [r2, #140]	; 0x8c
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f82d 	bl	8001878 <CheckDelay>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d03e      	beq.n	80028a2 <HAL_TIM_PeriodElapsedCallback+0x266>
		if(allDevices[MD4].signalform != M_Sequence){
 8002824:	4b33      	ldr	r3, [pc, #204]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002826:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800282a:	2b07      	cmp	r3, #7
 800282c:	d00a      	beq.n	8002844 <HAL_TIM_PeriodElapsedCallback+0x208>
			HAL_GPIO_TogglePin(allDevices[MD4].port_out, allDevices[MD4].pin_out);
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002834:	4a2f      	ldr	r2, [pc, #188]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002836:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f001 f8be 	bl	80039be <HAL_GPIO_TogglePin>
 8002842:	e02e      	b.n	80028a2 <HAL_TIM_PeriodElapsedCallback+0x266>
		}else{
			HAL_GPIO_WritePin(allDevices[MD4].port_out, allDevices[MD4].pin_out, allDevices[MD4].mSeq[allDevices[MD4].mSeqCounter]);
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002846:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800284c:	f8b3 1088 	ldrh.w	r1, [r3, #136]	; 0x88
 8002850:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002852:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002856:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002858:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 800285c:	4413      	add	r3, r2
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	f001 f894 	bl	800398e <HAL_GPIO_WritePin>
			allDevices[MD4].mSeqCounter++;
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002868:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800286c:	3301      	adds	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002872:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			if(allDevices[MD4].mSeqCounter > maxSeqLength-1){
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800287e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002882:	429a      	cmp	r2, r3
 8002884:	dc0d      	bgt.n	80028a2 <HAL_TIM_PeriodElapsedCallback+0x266>
				HAL_GPIO_WritePin(allDevices[MD4].port_out, allDevices[MD4].pin_out, GPIO_PIN_SET);
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800288e:	f8b2 1088 	ldrh.w	r1, [r2, #136]	; 0x88
 8002892:	2201      	movs	r2, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f001 f87a 	bl	800398e <HAL_GPIO_WritePin>
				allDevices[MD4].mSeqCounter = 0;
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800289c:	2200      	movs	r2, #0
 800289e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			}
		}
	}
	if(htim == &htim9 && CheckDelay(measTime, allDevices[MD5].delay)){
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a18      	ldr	r2, [pc, #96]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d15f      	bne.n	800296a <HAL_TIM_PeriodElapsedCallback+0x32e>
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80028b0:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe ffde 	bl	8001878 <CheckDelay>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d053      	beq.n	800296a <HAL_TIM_PeriodElapsedCallback+0x32e>
		if(allDevices[MD5].signalform != M_Sequence){
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80028c4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80028c8:	2b07      	cmp	r3, #7
 80028ca:	d01f      	beq.n	800290c <HAL_TIM_PeriodElapsedCallback+0x2d0>
			HAL_GPIO_TogglePin(allDevices[MD5].port_out, allDevices[MD5].pin_out);
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80028ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028d2:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80028d4:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 f86f 	bl	80039be <HAL_GPIO_TogglePin>
 80028e0:	e043      	b.n	800296a <HAL_TIM_PeriodElapsedCallback+0x32e>
 80028e2:	bf00      	nop
 80028e4:	20000748 	.word	0x20000748
 80028e8:	2000022d 	.word	0x2000022d
 80028ec:	200007c8 	.word	0x200007c8
 80028f0:	20000238 	.word	0x20000238
 80028f4:	20000474 	.word	0x20000474
 80028f8:	20000241 	.word	0x20000241
 80028fc:	200006c8 	.word	0x200006c8
 8002900:	20000648 	.word	0x20000648
 8002904:	20000808 	.word	0x20000808
 8002908:	20000788 	.word	0x20000788
		}else{
			HAL_GPIO_WritePin(allDevices[MD5].port_out, allDevices[MD5].pin_out, allDevices[MD5].mSeq[allDevices[MD5].mSeqCounter]);
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800290e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8002912:	4b67      	ldr	r3, [pc, #412]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002914:	f8b3 10b4 	ldrh.w	r1, [r3, #180]	; 0xb4
 8002918:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800291a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800291e:	4a64      	ldr	r2, [pc, #400]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002920:	f8b2 20d8 	ldrh.w	r2, [r2, #216]	; 0xd8
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	f001 f830 	bl	800398e <HAL_GPIO_WritePin>
			allDevices[MD5].mSeqCounter++;
 800292e:	4b60      	ldr	r3, [pc, #384]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002930:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8002934:	3301      	adds	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b5d      	ldr	r3, [pc, #372]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800293a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
			if(allDevices[MD5].mSeqCounter > maxSeqLength-1){
 800293e:	4b5d      	ldr	r3, [pc, #372]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	4b5a      	ldr	r3, [pc, #360]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002946:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 800294a:	429a      	cmp	r2, r3
 800294c:	dc0d      	bgt.n	800296a <HAL_TIM_PeriodElapsedCallback+0x32e>
				HAL_GPIO_WritePin(allDevices[MD5].port_out, allDevices[MD5].pin_out, GPIO_PIN_SET);
 800294e:	4b58      	ldr	r3, [pc, #352]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002950:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002954:	4a56      	ldr	r2, [pc, #344]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002956:	f8b2 10b4 	ldrh.w	r1, [r2, #180]	; 0xb4
 800295a:	2201      	movs	r2, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f001 f816 	bl	800398e <HAL_GPIO_WritePin>
				allDevices[MD5].mSeqCounter = 0;
 8002962:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002964:	2200      	movs	r2, #0
 8002966:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
			}
		}
	}
	if(htim == &htim10 && CheckDelay(measTime, allDevices[MD6].delay)){
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a52      	ldr	r2, [pc, #328]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d14a      	bne.n	8002a08 <HAL_TIM_PeriodElapsedCallback+0x3cc>
 8002972:	4b52      	ldr	r3, [pc, #328]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x480>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a4e      	ldr	r2, [pc, #312]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002978:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe ff7a 	bl	8001878 <CheckDelay>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d03e      	beq.n	8002a08 <HAL_TIM_PeriodElapsedCallback+0x3cc>
		if(allDevices[MD6].signalform != M_Sequence){
 800298a:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800298c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002990:	2b07      	cmp	r3, #7
 8002992:	d00a      	beq.n	80029aa <HAL_TIM_PeriodElapsedCallback+0x36e>
			HAL_GPIO_TogglePin(allDevices[MD6].port_out, allDevices[MD6].pin_out);
 8002994:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002996:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800299a:	4a45      	ldr	r2, [pc, #276]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800299c:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 f80b 	bl	80039be <HAL_GPIO_TogglePin>
 80029a8:	e02e      	b.n	8002a08 <HAL_TIM_PeriodElapsedCallback+0x3cc>
		}else{
			HAL_GPIO_WritePin(allDevices[MD6].port_out, allDevices[MD6].pin_out, allDevices[MD6].mSeq[allDevices[MD6].mSeqCounter]);
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80029ac:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 80029b0:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80029b2:	f8b3 10e0 	ldrh.w	r1, [r3, #224]	; 0xe0
 80029b6:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80029b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80029bc:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80029be:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f000 ffe1 	bl	800398e <HAL_GPIO_WritePin>
			allDevices[MD6].mSeqCounter++;
 80029cc:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80029ce:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80029d2:	3301      	adds	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80029d8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
			if(allDevices[MD6].mSeqCounter > maxSeqLength-1){
 80029dc:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80029e4:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80029e8:	429a      	cmp	r2, r3
 80029ea:	dc0d      	bgt.n	8002a08 <HAL_TIM_PeriodElapsedCallback+0x3cc>
				HAL_GPIO_WritePin(allDevices[MD6].port_out, allDevices[MD6].pin_out, GPIO_PIN_SET);
 80029ec:	4b30      	ldr	r3, [pc, #192]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80029ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80029f2:	4a2f      	ldr	r2, [pc, #188]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80029f4:	f8b2 10e0 	ldrh.w	r1, [r2, #224]	; 0xe0
 80029f8:	2201      	movs	r2, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 ffc7 	bl	800398e <HAL_GPIO_WritePin>
				allDevices[MD6].mSeqCounter = 0;
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
			}
		}
	}
	if(htim == &htim11 && CheckDelay(measTime, allDevices[MD7].delay)){
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a2d      	ldr	r2, [pc, #180]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d14a      	bne.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0x46a>
 8002a10:	4b2a      	ldr	r3, [pc, #168]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x480>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a26      	ldr	r2, [pc, #152]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a16:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe ff2b 	bl	8001878 <CheckDelay>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d03e      	beq.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0x46a>
		if(allDevices[MD7].signalform != M_Sequence){
 8002a28:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a2a:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002a2e:	2b07      	cmp	r3, #7
 8002a30:	d00a      	beq.n	8002a48 <HAL_TIM_PeriodElapsedCallback+0x40c>
			HAL_GPIO_TogglePin(allDevices[MD7].port_out, allDevices[MD7].pin_out);
 8002a32:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a38:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a3a:	f8b2 210c 	ldrh.w	r2, [r2, #268]	; 0x10c
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 ffbc 	bl	80039be <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(allDevices[MD7].port_out, allDevices[MD7].pin_out, GPIO_PIN_SET);
				allDevices[MD7].mSeqCounter = 0;
			}
		}
	}
}
 8002a46:	e02e      	b.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0x46a>
			HAL_GPIO_WritePin(allDevices[MD7].port_out, allDevices[MD7].pin_out, allDevices[MD7].mSeq[allDevices[MD7].mSeqCounter]);
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a4a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a50:	f8b3 110c 	ldrh.w	r1, [r3, #268]	; 0x10c
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a56:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002a5a:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a5c:	f8b2 2130 	ldrh.w	r2, [r2, #304]	; 0x130
 8002a60:	4413      	add	r3, r2
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	f000 ff92 	bl	800398e <HAL_GPIO_WritePin>
			allDevices[MD7].mSeqCounter++;
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a6c:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8002a70:	3301      	adds	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a76:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
			if(allDevices[MD7].mSeqCounter > maxSeqLength-1){
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a82:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8002a86:	429a      	cmp	r2, r3
 8002a88:	dc0d      	bgt.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0x46a>
				HAL_GPIO_WritePin(allDevices[MD7].port_out, allDevices[MD7].pin_out, GPIO_PIN_SET);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a90:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002a92:	f8b2 110c 	ldrh.w	r1, [r2, #268]	; 0x10c
 8002a96:	2201      	movs	r2, #1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 ff78 	bl	800398e <HAL_GPIO_WritePin>
				allDevices[MD7].mSeqCounter = 0;
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000474 	.word	0x20000474
 8002ab4:	20000241 	.word	0x20000241
 8002ab8:	20000688 	.word	0x20000688
 8002abc:	20000238 	.word	0x20000238
 8002ac0:	20000708 	.word	0x20000708

08002ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac8:	b672      	cpsid	i
}
 8002aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002acc:	e7fe      	b.n	8002acc <Error_Handler+0x8>
	...

08002ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_MspInit+0x58>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <HAL_MspInit+0x58>)
 8002adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae0:	6253      	str	r3, [r2, #36]	; 0x24
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_MspInit+0x58>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_MspInit+0x58>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <HAL_MspInit+0x58>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6213      	str	r3, [r2, #32]
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_MspInit+0x58>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_MspInit+0x58>)
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_MspInit+0x58>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6253      	str	r3, [r2, #36]	; 0x24
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_MspInit+0x58>)
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	40023800 	.word	0x40023800

08002b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <NMI_Handler+0x4>

08002b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <HardFault_Handler+0x4>

08002b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <MemManage_Handler+0x4>

08002b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b42:	e7fe      	b.n	8002b42 <BusFault_Handler+0x4>

08002b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <UsageFault_Handler+0x4>

08002b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b72:	f000 fc29 	bl	80033c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f000 ff36 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <USB_LP_IRQHandler+0x10>)
 8002b8e:	f001 f84b 	bl	8003c28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200014b8 	.word	0x200014b8

08002b9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002ba0:	2080      	movs	r0, #128	; 0x80
 8002ba2:	f000 ff25 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002ba6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002baa:	f000 ff21 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <TIM9_IRQHandler>:

/**
  * @brief This function handles TIM9 global interrupt.
  */
void TIM9_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <TIM9_IRQHandler+0x10>)
 8002bba:	f003 f9a5 	bl	8005f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM9_IRQn 1 */

  /* USER CODE END TIM9_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000788 	.word	0x20000788

08002bc8 <TIM10_IRQHandler>:

/**
  * @brief This function handles TIM10 global interrupt.
  */
void TIM10_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <TIM10_IRQHandler+0x10>)
 8002bce:	f003 f99b 	bl	8005f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM10_IRQn 1 */

  /* USER CODE END TIM10_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000688 	.word	0x20000688

08002bdc <TIM11_IRQHandler>:

/**
  * @brief This function handles TIM11 global interrupt.
  */
void TIM11_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <TIM11_IRQHandler+0x10>)
 8002be2:	f003 f991 	bl	8005f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM11_IRQn 1 */

  /* USER CODE END TIM11_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000708 	.word	0x20000708

08002bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <TIM2_IRQHandler+0x10>)
 8002bf6:	f003 f987 	bl	8005f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200007c8 	.word	0x200007c8

08002c04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <TIM3_IRQHandler+0x10>)
 8002c0a:	f003 f97d 	bl	8005f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200006c8 	.word	0x200006c8

08002c18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <TIM4_IRQHandler+0x10>)
 8002c1e:	f003 f973 	bl	8005f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000648 	.word	0x20000648

08002c2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c34:	f000 fedc 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <TIM6_IRQHandler+0x10>)
 8002c42:	f003 f961 	bl	8005f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000748 	.word	0x20000748

08002c50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <TIM7_IRQHandler+0x10>)
 8002c56:	f003 f957 	bl	8005f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000808 	.word	0x20000808

08002c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <_sbrk+0x5c>)
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <_sbrk+0x60>)
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <_sbrk+0x64>)
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <_sbrk+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d207      	bcs.n	8002ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c94:	f007 fe74 	bl	800a980 <__errno>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	e009      	b.n	8002cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <_sbrk+0x64>)
 8002cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20008000 	.word	0x20008000
 8002cc4:	00000400 	.word	0x00000400
 8002cc8:	20000244 	.word	0x20000244
 8002ccc:	200017b8 	.word	0x200017b8

08002cd0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d02:	221f      	movs	r2, #31
 8002d04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d20:	4813      	ldr	r0, [pc, #76]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d22:	f003 f839 	bl	8005d98 <HAL_TIM_Base_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d2c:	f7ff feca 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d3e:	f003 f9bf 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d48:	f7ff febc 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d54:	463b      	mov	r3, r7
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d5a:	f003 fb91 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d64:	f7ff feae 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200007c8 	.word	0x200007c8

08002d74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d88:	463b      	mov	r3, r7
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <MX_TIM3_Init+0x98>)
 8002d94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8002d96:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002d98:	221f      	movs	r2, #31
 8002d9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002da8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002db6:	4814      	ldr	r0, [pc, #80]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002db8:	f002 ffee 	bl	8005d98 <HAL_TIM_Base_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002dc2:	f7ff fe7f 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dcc:	f107 0308 	add.w	r3, r7, #8
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	480d      	ldr	r0, [pc, #52]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002dd4:	f003 f974 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002dde:	f7ff fe71 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dea:	463b      	mov	r3, r7
 8002dec:	4619      	mov	r1, r3
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002df0:	f003 fb46 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002dfa:	f7ff fe63 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200006c8 	.word	0x200006c8
 8002e0c:	40000400 	.word	0x40000400

08002e10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e16:	f107 0308 	add.w	r3, r7, #8
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e24:	463b      	mov	r3, r7
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <MX_TIM4_Init+0x94>)
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ea8 <MX_TIM4_Init+0x98>)
 8002e30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <MX_TIM4_Init+0x94>)
 8002e34:	221f      	movs	r2, #31
 8002e36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e38:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <MX_TIM4_Init+0x94>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e3e:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <MX_TIM4_Init+0x94>)
 8002e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <MX_TIM4_Init+0x94>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4c:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <MX_TIM4_Init+0x94>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e52:	4814      	ldr	r0, [pc, #80]	; (8002ea4 <MX_TIM4_Init+0x94>)
 8002e54:	f002 ffa0 	bl	8005d98 <HAL_TIM_Base_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002e5e:	f7ff fe31 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e68:	f107 0308 	add.w	r3, r7, #8
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <MX_TIM4_Init+0x94>)
 8002e70:	f003 f926 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002e7a:	f7ff fe23 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e86:	463b      	mov	r3, r7
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <MX_TIM4_Init+0x94>)
 8002e8c:	f003 faf8 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002e96:	f7ff fe15 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000648 	.word	0x20000648
 8002ea8:	40000800 	.word	0x40000800

08002eac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <MX_TIM6_Init+0x64>)
 8002ebc:	4a15      	ldr	r2, [pc, #84]	; (8002f14 <MX_TIM6_Init+0x68>)
 8002ebe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32-1;
 8002ec0:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <MX_TIM6_Init+0x64>)
 8002ec2:	221f      	movs	r2, #31
 8002ec4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <MX_TIM6_Init+0x64>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002ecc:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <MX_TIM6_Init+0x64>)
 8002ece:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ed2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <MX_TIM6_Init+0x64>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002eda:	480d      	ldr	r0, [pc, #52]	; (8002f10 <MX_TIM6_Init+0x64>)
 8002edc:	f002 ff5c 	bl	8005d98 <HAL_TIM_Base_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002ee6:	f7ff fded 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eea:	2300      	movs	r3, #0
 8002eec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ef2:	463b      	mov	r3, r7
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4806      	ldr	r0, [pc, #24]	; (8002f10 <MX_TIM6_Init+0x64>)
 8002ef8:	f003 fac2 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002f02:	f7ff fddf 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000748 	.word	0x20000748
 8002f14:	40001000 	.word	0x40001000

08002f18 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1e:	463b      	mov	r3, r7
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <MX_TIM7_Init+0x64>)
 8002f28:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <MX_TIM7_Init+0x68>)
 8002f2a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32-1;
 8002f2c:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <MX_TIM7_Init+0x64>)
 8002f2e:	221f      	movs	r2, #31
 8002f30:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <MX_TIM7_Init+0x64>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002f38:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <MX_TIM7_Init+0x64>)
 8002f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f3e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <MX_TIM7_Init+0x64>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <MX_TIM7_Init+0x64>)
 8002f48:	f002 ff26 	bl	8005d98 <HAL_TIM_Base_Init>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002f52:	f7ff fdb7 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f5e:	463b      	mov	r3, r7
 8002f60:	4619      	mov	r1, r3
 8002f62:	4806      	ldr	r0, [pc, #24]	; (8002f7c <MX_TIM7_Init+0x64>)
 8002f64:	f003 fa8c 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002f6e:	f7ff fda9 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000808 	.word	0x20000808
 8002f80:	40001400 	.word	0x40001400

08002f84 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8a:	f107 0308 	add.w	r3, r7, #8
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f98:	463b      	mov	r3, r7
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <MX_TIM9_Init+0x94>)
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	; (800301c <MX_TIM9_Init+0x98>)
 8002fa4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32-1;
 8002fa6:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <MX_TIM9_Init+0x94>)
 8002fa8:	221f      	movs	r2, #31
 8002faa:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fac:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <MX_TIM9_Init+0x94>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002fb2:	4b19      	ldr	r3, [pc, #100]	; (8003018 <MX_TIM9_Init+0x94>)
 8002fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fb8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fba:	4b17      	ldr	r3, [pc, #92]	; (8003018 <MX_TIM9_Init+0x94>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc0:	4b15      	ldr	r3, [pc, #84]	; (8003018 <MX_TIM9_Init+0x94>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002fc6:	4814      	ldr	r0, [pc, #80]	; (8003018 <MX_TIM9_Init+0x94>)
 8002fc8:	f002 fee6 	bl	8005d98 <HAL_TIM_Base_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_TIM9_Init+0x52>
  {
    Error_Handler();
 8002fd2:	f7ff fd77 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002fdc:	f107 0308 	add.w	r3, r7, #8
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	480d      	ldr	r0, [pc, #52]	; (8003018 <MX_TIM9_Init+0x94>)
 8002fe4:	f003 f86c 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8002fee:	f7ff fd69 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002ffa:	463b      	mov	r3, r7
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4806      	ldr	r0, [pc, #24]	; (8003018 <MX_TIM9_Init+0x94>)
 8003000:	f003 fa3e 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800300a:	f7ff fd5b 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000788 	.word	0x20000788
 800301c:	40010800 	.word	0x40010800

08003020 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003026:	463b      	mov	r3, r7
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <MX_TIM10_Init+0x6c>)
 8003034:	4a16      	ldr	r2, [pc, #88]	; (8003090 <MX_TIM10_Init+0x70>)
 8003036:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 32-1;
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <MX_TIM10_Init+0x6c>)
 800303a:	221f      	movs	r2, #31
 800303c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <MX_TIM10_Init+0x6c>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <MX_TIM10_Init+0x6c>)
 8003046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800304a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <MX_TIM10_Init+0x6c>)
 800304e:	2200      	movs	r2, #0
 8003050:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <MX_TIM10_Init+0x6c>)
 8003054:	2200      	movs	r2, #0
 8003056:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003058:	480c      	ldr	r0, [pc, #48]	; (800308c <MX_TIM10_Init+0x6c>)
 800305a:	f002 fe9d 	bl	8005d98 <HAL_TIM_Base_Init>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8003064:	f7ff fd2e 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 800306e:	463b      	mov	r3, r7
 8003070:	4619      	mov	r1, r3
 8003072:	4806      	ldr	r0, [pc, #24]	; (800308c <MX_TIM10_Init+0x6c>)
 8003074:	f003 f824 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM10_Init+0x62>
  {
    Error_Handler();
 800307e:	f7ff fd21 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000688 	.word	0x20000688
 8003090:	40010c00 	.word	0x40010c00

08003094 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800309a:	463b      	mov	r3, r7
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <MX_TIM11_Init+0x6c>)
 80030a8:	4a16      	ldr	r2, [pc, #88]	; (8003104 <MX_TIM11_Init+0x70>)
 80030aa:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 32-1;
 80030ac:	4b14      	ldr	r3, [pc, #80]	; (8003100 <MX_TIM11_Init+0x6c>)
 80030ae:	221f      	movs	r2, #31
 80030b0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <MX_TIM11_Init+0x6c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <MX_TIM11_Init+0x6c>)
 80030ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030be:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <MX_TIM11_Init+0x6c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <MX_TIM11_Init+0x6c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80030cc:	480c      	ldr	r0, [pc, #48]	; (8003100 <MX_TIM11_Init+0x6c>)
 80030ce:	f002 fe63 	bl	8005d98 <HAL_TIM_Base_Init>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 80030d8:	f7ff fcf4 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 80030e2:	463b      	mov	r3, r7
 80030e4:	4619      	mov	r1, r3
 80030e6:	4806      	ldr	r0, [pc, #24]	; (8003100 <MX_TIM11_Init+0x6c>)
 80030e8:	f002 ffea 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM11_Init+0x62>
  {
    Error_Handler();
 80030f2:	f7ff fce7 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000708 	.word	0x20000708
 8003104:	40011000 	.word	0x40011000

08003108 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d114      	bne.n	8003144 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800311a:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	4a66      	ldr	r2, [pc, #408]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6253      	str	r3, [r2, #36]	; 0x24
 8003126:	4b64      	ldr	r3, [pc, #400]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	201c      	movs	r0, #28
 8003138:	f000 fa5b 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800313c:	201c      	movs	r0, #28
 800313e:	f000 fa74 	bl	800362a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003142:	e0b4      	b.n	80032ae <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM3)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5c      	ldr	r2, [pc, #368]	; (80032bc <HAL_TIM_Base_MspInit+0x1b4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d114      	bne.n	8003178 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800314e:	4b5a      	ldr	r3, [pc, #360]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	4a59      	ldr	r2, [pc, #356]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6253      	str	r3, [r2, #36]	; 0x24
 800315a:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	623b      	str	r3, [r7, #32]
 8003164:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	201d      	movs	r0, #29
 800316c:	f000 fa41 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003170:	201d      	movs	r0, #29
 8003172:	f000 fa5a 	bl	800362a <HAL_NVIC_EnableIRQ>
}
 8003176:	e09a      	b.n	80032ae <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM4)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a50      	ldr	r2, [pc, #320]	; (80032c0 <HAL_TIM_Base_MspInit+0x1b8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d114      	bne.n	80031ac <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003182:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	4a4c      	ldr	r2, [pc, #304]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	6253      	str	r3, [r2, #36]	; 0x24
 800318e:	4b4a      	ldr	r3, [pc, #296]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	201e      	movs	r0, #30
 80031a0:	f000 fa27 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031a4:	201e      	movs	r0, #30
 80031a6:	f000 fa40 	bl	800362a <HAL_NVIC_EnableIRQ>
}
 80031aa:	e080      	b.n	80032ae <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM6)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a44      	ldr	r2, [pc, #272]	; (80032c4 <HAL_TIM_Base_MspInit+0x1bc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d114      	bne.n	80031e0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031b6:	4b40      	ldr	r3, [pc, #256]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	4a3f      	ldr	r2, [pc, #252]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 80031bc:	f043 0310 	orr.w	r3, r3, #16
 80031c0:	6253      	str	r3, [r2, #36]	; 0x24
 80031c2:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	202b      	movs	r0, #43	; 0x2b
 80031d4:	f000 fa0d 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80031d8:	202b      	movs	r0, #43	; 0x2b
 80031da:	f000 fa26 	bl	800362a <HAL_NVIC_EnableIRQ>
}
 80031de:	e066      	b.n	80032ae <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM7)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <HAL_TIM_Base_MspInit+0x1c0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d114      	bne.n	8003214 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80031ea:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	4a32      	ldr	r2, [pc, #200]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 80031f0:	f043 0320 	orr.w	r3, r3, #32
 80031f4:	6253      	str	r3, [r2, #36]	; 0x24
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003202:	2200      	movs	r2, #0
 8003204:	2100      	movs	r1, #0
 8003206:	202c      	movs	r0, #44	; 0x2c
 8003208:	f000 f9f3 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800320c:	202c      	movs	r0, #44	; 0x2c
 800320e:	f000 fa0c 	bl	800362a <HAL_NVIC_EnableIRQ>
}
 8003212:	e04c      	b.n	80032ae <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM9)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <HAL_TIM_Base_MspInit+0x1c4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d114      	bne.n	8003248 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4a25      	ldr	r2, [pc, #148]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6213      	str	r3, [r2, #32]
 800322a:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	2100      	movs	r1, #0
 800323a:	2019      	movs	r0, #25
 800323c:	f000 f9d9 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8003240:	2019      	movs	r0, #25
 8003242:	f000 f9f2 	bl	800362a <HAL_NVIC_EnableIRQ>
}
 8003246:	e032      	b.n	80032ae <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM10)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a20      	ldr	r2, [pc, #128]	; (80032d0 <HAL_TIM_Base_MspInit+0x1c8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d114      	bne.n	800327c <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003252:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003258:	f043 0308 	orr.w	r3, r3, #8
 800325c:	6213      	str	r3, [r2, #32]
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 800326a:	2200      	movs	r2, #0
 800326c:	2100      	movs	r1, #0
 800326e:	201a      	movs	r0, #26
 8003270:	f000 f9bf 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8003274:	201a      	movs	r0, #26
 8003276:	f000 f9d8 	bl	800362a <HAL_NVIC_EnableIRQ>
}
 800327a:	e018      	b.n	80032ae <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM11)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_TIM_Base_MspInit+0x1cc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d113      	bne.n	80032ae <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 800328c:	f043 0310 	orr.w	r3, r3, #16
 8003290:	6213      	str	r3, [r2, #32]
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	201b      	movs	r0, #27
 80032a4:	f000 f9a5 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 80032a8:	201b      	movs	r0, #27
 80032aa:	f000 f9be 	bl	800362a <HAL_NVIC_EnableIRQ>
}
 80032ae:	bf00      	nop
 80032b0:	3728      	adds	r7, #40	; 0x28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800
 80032c4:	40001000 	.word	0x40001000
 80032c8:	40001400 	.word	0x40001400
 80032cc:	40010800 	.word	0x40010800
 80032d0:	40010c00 	.word	0x40010c00
 80032d4:	40011000 	.word	0x40011000

080032d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032d8:	480c      	ldr	r0, [pc, #48]	; (800330c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032da:	490d      	ldr	r1, [pc, #52]	; (8003310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032dc:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e0:	e002      	b.n	80032e8 <LoopCopyDataInit>

080032e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032e6:	3304      	adds	r3, #4

080032e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032ec:	d3f9      	bcc.n	80032e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032f0:	4c0a      	ldr	r4, [pc, #40]	; (800331c <LoopFillZerobss+0x22>)
  movs r3, #0
 80032f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f4:	e001      	b.n	80032fa <LoopFillZerobss>

080032f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f8:	3204      	adds	r2, #4

080032fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032fc:	d3fb      	bcc.n	80032f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032fe:	f7ff fce7 	bl	8002cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003302:	f007 fb43 	bl	800a98c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003306:	f7fe f879 	bl	80013fc <main>
  bx lr
 800330a:	4770      	bx	lr
  ldr r0, =_sdata
 800330c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003310:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003314:	0800bbf8 	.word	0x0800bbf8
  ldr r2, =_sbss
 8003318:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800331c:	200017b4 	.word	0x200017b4

08003320 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003320:	e7fe      	b.n	8003320 <ADC1_IRQHandler>

08003322 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800332c:	2003      	movs	r0, #3
 800332e:	f000 f955 	bl	80035dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003332:	200f      	movs	r0, #15
 8003334:	f000 f80e 	bl	8003354 <HAL_InitTick>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	71fb      	strb	r3, [r7, #7]
 8003342:	e001      	b.n	8003348 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003344:	f7ff fbc4 	bl	8002ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003348:	79fb      	ldrb	r3, [r7, #7]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003360:	4b16      	ldr	r3, [pc, #88]	; (80033bc <HAL_InitTick+0x68>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d022      	beq.n	80033ae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003368:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_InitTick+0x6c>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_InitTick+0x68>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003374:	fbb1 f3f3 	udiv	r3, r1, r3
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	4618      	mov	r0, r3
 800337e:	f000 f962 	bl	8003646 <HAL_SYSTICK_Config>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10f      	bne.n	80033a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b0f      	cmp	r3, #15
 800338c:	d809      	bhi.n	80033a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800338e:	2200      	movs	r2, #0
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	f04f 30ff 	mov.w	r0, #4294967295
 8003396:	f000 f92c 	bl	80035f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <HAL_InitTick+0x70>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e007      	b.n	80033b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e004      	b.n	80033b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e001      	b.n	80033b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000034 	.word	0x20000034
 80033c0:	2000002c 	.word	0x2000002c
 80033c4:	20000030 	.word	0x20000030

080033c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_IncTick+0x1c>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_IncTick+0x20>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4413      	add	r3, r2
 80033d6:	4a03      	ldr	r2, [pc, #12]	; (80033e4 <HAL_IncTick+0x1c>)
 80033d8:	6013      	str	r3, [r2, #0]
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000848 	.word	0x20000848
 80033e8:	20000034 	.word	0x20000034

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b02      	ldr	r3, [pc, #8]	; (80033fc <HAL_GetTick+0x10>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	20000848 	.word	0x20000848

08003400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003408:	f7ff fff0 	bl	80033ec <HAL_GetTick>
 800340c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d004      	beq.n	8003424 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_Delay+0x40>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003424:	bf00      	nop
 8003426:	f7ff ffe1 	bl	80033ec <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	429a      	cmp	r2, r3
 8003434:	d8f7      	bhi.n	8003426 <HAL_Delay+0x26>
  {
  }
}
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000034 	.word	0x20000034

08003444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003460:	4013      	ands	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800346c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003476:	4a04      	ldr	r2, [pc, #16]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	60d3      	str	r3, [r2, #12]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	0a1b      	lsrs	r3, r3, #8
 8003496:	f003 0307 	and.w	r3, r3, #7
}
 800349a:	4618      	mov	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db0b      	blt.n	80034d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	4906      	ldr	r1, [pc, #24]	; (80034dc <__NVIC_EnableIRQ+0x34>)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2001      	movs	r0, #1
 80034ca:	fa00 f202 	lsl.w	r2, r0, r2
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100

080034e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	db0a      	blt.n	800350a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	490c      	ldr	r1, [pc, #48]	; (800352c <__NVIC_SetPriority+0x4c>)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	440b      	add	r3, r1
 8003504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003508:	e00a      	b.n	8003520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	4908      	ldr	r1, [pc, #32]	; (8003530 <__NVIC_SetPriority+0x50>)
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	3b04      	subs	r3, #4
 8003518:	0112      	lsls	r2, r2, #4
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	440b      	add	r3, r1
 800351e:	761a      	strb	r2, [r3, #24]
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000e100 	.word	0xe000e100
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f1c3 0307 	rsb	r3, r3, #7
 800354e:	2b04      	cmp	r3, #4
 8003550:	bf28      	it	cs
 8003552:	2304      	movcs	r3, #4
 8003554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3304      	adds	r3, #4
 800355a:	2b06      	cmp	r3, #6
 800355c:	d902      	bls.n	8003564 <NVIC_EncodePriority+0x30>
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3b03      	subs	r3, #3
 8003562:	e000      	b.n	8003566 <NVIC_EncodePriority+0x32>
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	f04f 32ff 	mov.w	r2, #4294967295
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	401a      	ands	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	43d9      	mvns	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800358c:	4313      	orrs	r3, r2
         );
}
 800358e:	4618      	mov	r0, r3
 8003590:	3724      	adds	r7, #36	; 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a8:	d301      	bcc.n	80035ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00f      	b.n	80035ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <SysTick_Config+0x40>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b6:	210f      	movs	r1, #15
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	f7ff ff90 	bl	80034e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <SysTick_Config+0x40>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <SysTick_Config+0x40>)
 80035c8:	2207      	movs	r2, #7
 80035ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	e000e010 	.word	0xe000e010

080035dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ff2d 	bl	8003444 <__NVIC_SetPriorityGrouping>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b086      	sub	sp, #24
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	4603      	mov	r3, r0
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003604:	f7ff ff42 	bl	800348c <__NVIC_GetPriorityGrouping>
 8003608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	f7ff ff90 	bl	8003534 <NVIC_EncodePriority>
 8003614:	4602      	mov	r2, r0
 8003616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff5f 	bl	80034e0 <__NVIC_SetPriority>
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff35 	bl	80034a8 <__NVIC_EnableIRQ>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ffa2 	bl	8003598 <SysTick_Config>
 8003654:	4603      	mov	r3, r0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003676:	e154      	b.n	8003922 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8146 	beq.w	800391c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d005      	beq.n	80036a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d130      	bne.n	800370a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80036de:	2201      	movs	r2, #1
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f003 0201 	and.w	r2, r3, #1
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b03      	cmp	r3, #3
 8003714:	d017      	beq.n	8003746 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d123      	bne.n	800379a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	08da      	lsrs	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3208      	adds	r2, #8
 800375a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	08da      	lsrs	r2, r3, #3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3208      	adds	r2, #8
 8003794:	6939      	ldr	r1, [r7, #16]
 8003796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0203 	and.w	r2, r3, #3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80a0 	beq.w	800391c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037dc:	4b58      	ldr	r3, [pc, #352]	; (8003940 <HAL_GPIO_Init+0x2e0>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4a57      	ldr	r2, [pc, #348]	; (8003940 <HAL_GPIO_Init+0x2e0>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6213      	str	r3, [r2, #32]
 80037e8:	4b55      	ldr	r3, [pc, #340]	; (8003940 <HAL_GPIO_Init+0x2e0>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80037f4:	4a53      	ldr	r2, [pc, #332]	; (8003944 <HAL_GPIO_Init+0x2e4>)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	089b      	lsrs	r3, r3, #2
 80037fa:	3302      	adds	r3, #2
 80037fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003800:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	220f      	movs	r2, #15
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <HAL_GPIO_Init+0x2e8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d019      	beq.n	8003854 <HAL_GPIO_Init+0x1f4>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a4a      	ldr	r2, [pc, #296]	; (800394c <HAL_GPIO_Init+0x2ec>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d013      	beq.n	8003850 <HAL_GPIO_Init+0x1f0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a49      	ldr	r2, [pc, #292]	; (8003950 <HAL_GPIO_Init+0x2f0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00d      	beq.n	800384c <HAL_GPIO_Init+0x1ec>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a48      	ldr	r2, [pc, #288]	; (8003954 <HAL_GPIO_Init+0x2f4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d007      	beq.n	8003848 <HAL_GPIO_Init+0x1e8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a47      	ldr	r2, [pc, #284]	; (8003958 <HAL_GPIO_Init+0x2f8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_GPIO_Init+0x1e4>
 8003840:	2304      	movs	r3, #4
 8003842:	e008      	b.n	8003856 <HAL_GPIO_Init+0x1f6>
 8003844:	2305      	movs	r3, #5
 8003846:	e006      	b.n	8003856 <HAL_GPIO_Init+0x1f6>
 8003848:	2303      	movs	r3, #3
 800384a:	e004      	b.n	8003856 <HAL_GPIO_Init+0x1f6>
 800384c:	2302      	movs	r3, #2
 800384e:	e002      	b.n	8003856 <HAL_GPIO_Init+0x1f6>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_GPIO_Init+0x1f6>
 8003854:	2300      	movs	r3, #0
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	f002 0203 	and.w	r2, r2, #3
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	4093      	lsls	r3, r2
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003866:	4937      	ldr	r1, [pc, #220]	; (8003944 <HAL_GPIO_Init+0x2e4>)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	3302      	adds	r3, #2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003874:	4b39      	ldr	r3, [pc, #228]	; (800395c <HAL_GPIO_Init+0x2fc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003898:	4a30      	ldr	r2, [pc, #192]	; (800395c <HAL_GPIO_Init+0x2fc>)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800389e:	4b2f      	ldr	r3, [pc, #188]	; (800395c <HAL_GPIO_Init+0x2fc>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038c2:	4a26      	ldr	r2, [pc, #152]	; (800395c <HAL_GPIO_Init+0x2fc>)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c8:	4b24      	ldr	r3, [pc, #144]	; (800395c <HAL_GPIO_Init+0x2fc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038ec:	4a1b      	ldr	r2, [pc, #108]	; (800395c <HAL_GPIO_Init+0x2fc>)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f2:	4b1a      	ldr	r3, [pc, #104]	; (800395c <HAL_GPIO_Init+0x2fc>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003916:	4a11      	ldr	r2, [pc, #68]	; (800395c <HAL_GPIO_Init+0x2fc>)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3301      	adds	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f aea3 	bne.w	8003678 <HAL_GPIO_Init+0x18>
  }
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40023800 	.word	0x40023800
 8003944:	40010000 	.word	0x40010000
 8003948:	40020000 	.word	0x40020000
 800394c:	40020400 	.word	0x40020400
 8003950:	40020800 	.word	0x40020800
 8003954:	40020c00 	.word	0x40020c00
 8003958:	40021000 	.word	0x40021000
 800395c:	40010400 	.word	0x40010400

08003960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	e001      	b.n	8003982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	807b      	strh	r3, [r7, #2]
 800399a:	4613      	mov	r3, r2
 800399c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800399e:	787b      	ldrb	r3, [r7, #1]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039a4:	887a      	ldrh	r2, [r7, #2]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80039aa:	e003      	b.n	80039b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80039ac:	887b      	ldrh	r3, [r7, #2]
 80039ae:	041a      	lsls	r2, r3, #16
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	619a      	str	r2, [r3, #24]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d0:	887a      	ldrh	r2, [r7, #2]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4013      	ands	r3, r2
 80039d6:	041a      	lsls	r2, r3, #16
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	43d9      	mvns	r1, r3
 80039dc:	887b      	ldrh	r3, [r7, #2]
 80039de:	400b      	ands	r3, r1
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	619a      	str	r2, [r3, #24]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a06:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fde8 	bl	80025e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40010400 	.word	0x40010400

08003a20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a22:	b08b      	sub	sp, #44	; 0x2c
 8003a24:	af06      	add	r7, sp, #24
 8003a26:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e0d0      	b.n	8003bd4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f006 fcfa 	bl	800a440 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2203      	movs	r2, #3
 8003a50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f002 fd85 	bl	8006568 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	e04c      	b.n	8003afe <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	440b      	add	r3, r1
 8003a74:	3301      	adds	r3, #1
 8003a76:	2201      	movs	r2, #1
 8003a78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	440b      	add	r3, r1
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	b298      	uxth	r0, r3
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3336      	adds	r3, #54	; 0x36
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3303      	adds	r3, #3
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	440b      	add	r3, r1
 8003aca:	3338      	adds	r3, #56	; 0x38
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	440b      	add	r3, r1
 8003ade:	333c      	adds	r3, #60	; 0x3c
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	440b      	add	r3, r1
 8003af2:	3340      	adds	r3, #64	; 0x40
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	3301      	adds	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3ad      	bcc.n	8003a64 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e044      	b.n	8003b98 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	440b      	add	r3, r1
 8003b32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	440b      	add	r3, r1
 8003b48:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	440b      	add	r3, r1
 8003b74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	440b      	add	r3, r1
 8003b8a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	3301      	adds	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d3b5      	bcc.n	8003b0e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	687e      	ldr	r6, [r7, #4]
 8003baa:	466d      	mov	r5, sp
 8003bac:	f106 0410 	add.w	r4, r6, #16
 8003bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	602b      	str	r3, [r5, #0]
 8003bb8:	1d33      	adds	r3, r6, #4
 8003bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bbc:	6838      	ldr	r0, [r7, #0]
 8003bbe:	f002 fced 	bl	800659c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bdc <HAL_PCD_Start>:
  * @brief  Start the USB_CDC device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_PCD_Start+0x16>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e016      	b.n	8003c20 <HAL_PCD_Start+0x44>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 fc9c 	bl	800653c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003c04:	2101      	movs	r1, #1
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f006 fbfc 	bl	800a404 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f004 fe40 	bl	8008896 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 fe38 	bl	80088aa <USB_ReadInterrupts>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c44:	d102      	bne.n	8003c4c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 faf5 	bl	8004236 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f004 fe2a 	bl	80088aa <USB_ReadInterrupts>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c60:	d112      	bne.n	8003c88 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c74:	b292      	uxth	r2, r2
 8003c76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f006 fc5b 	bl	800a536 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c80:	2100      	movs	r1, #0
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8c7 	bl	8003e16 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f004 fe0c 	bl	80088aa <USB_ReadInterrupts>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cb0:	b292      	uxth	r2, r2
 8003cb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f004 fdf5 	bl	80088aa <USB_ReadInterrupts>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cca:	d10b      	bne.n	8003ce4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cde:	b292      	uxth	r2, r2
 8003ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f004 fdde 	bl	80088aa <USB_ReadInterrupts>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf8:	d126      	bne.n	8003d48 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0204 	bic.w	r2, r2, #4
 8003d0c:	b292      	uxth	r2, r2
 8003d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0208 	bic.w	r2, r2, #8
 8003d24:	b292      	uxth	r2, r2
 8003d26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f006 fc3c 	bl	800a5a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d42:	b292      	uxth	r2, r2
 8003d44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f004 fdac 	bl	80088aa <USB_ReadInterrupts>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5c:	d126      	bne.n	8003dac <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0208 	orr.w	r2, r2, #8
 8003d70:	b292      	uxth	r2, r2
 8003d72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0204 	orr.w	r2, r2, #4
 8003da0:	b292      	uxth	r2, r2
 8003da2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f006 fbe4 	bl	800a574 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f004 fd7a 	bl	80088aa <USB_ReadInterrupts>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc0:	d10e      	bne.n	8003de0 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f006 fb9d 	bl	800a51a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f004 fd60 	bl	80088aa <USB_ReadInterrupts>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df4:	d10b      	bne.n	8003e0e <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_PCD_SetAddress+0x1a>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e013      	b.n	8003e58 <HAL_PCD_SetAddress+0x42>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	4611      	mov	r1, r2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f004 fd11 	bl	8008870 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	70fb      	strb	r3, [r7, #3]
 8003e72:	460b      	mov	r3, r1
 8003e74:	803b      	strh	r3, [r7, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	da0e      	bge.n	8003ea4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	705a      	strb	r2, [r3, #1]
 8003ea2:	e00e      	b.n	8003ec2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	f003 0207 	and.w	r2, r3, #7
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ece:	883a      	ldrh	r2, [r7, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	78ba      	ldrb	r2, [r7, #2]
 8003ed8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	785b      	ldrb	r3, [r3, #1]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003eec:	78bb      	ldrb	r3, [r7, #2]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d102      	bne.n	8003ef8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_PCD_EP_Open+0xa6>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e00e      	b.n	8003f24 <HAL_PCD_EP_Open+0xc4>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68f9      	ldr	r1, [r7, #12]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f002 fb61 	bl	80065dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003f22:	7afb      	ldrb	r3, [r7, #11]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	da0e      	bge.n	8003f5e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	705a      	strb	r2, [r3, #1]
 8003f5c:	e00e      	b.n	8003f7c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f003 0207 	and.w	r2, r3, #7
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_PCD_EP_Close+0x6a>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e00e      	b.n	8003fb4 <HAL_PCD_EP_Close+0x88>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68f9      	ldr	r1, [r7, #12]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f002 fe83 	bl	8006cb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fcc:	7afb      	ldrb	r3, [r7, #11]
 8003fce:	f003 0207 	and.w	r2, r3, #7
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffc:	7afb      	ldrb	r3, [r7, #11]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	b2da      	uxtb	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004008:	7afb      	ldrb	r3, [r7, #11]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6979      	ldr	r1, [r7, #20]
 8004018:	4618      	mov	r0, r3
 800401a:	f003 f835 	bl	8007088 <USB_EPStartXfer>
 800401e:	e005      	b.n	800402c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	4618      	mov	r0, r3
 8004028:	f003 f82e 	bl	8007088 <USB_EPStartXfer>
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	460b      	mov	r3, r1
 8004040:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	f003 0207 	and.w	r2, r3, #7
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004058:	681b      	ldr	r3, [r3, #0]
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	460b      	mov	r3, r1
 8004072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004074:	7afb      	ldrb	r3, [r7, #11]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2200      	movs	r2, #0
 80040a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2201      	movs	r2, #1
 80040ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b0:	7afb      	ldrb	r3, [r7, #11]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040bc:	7afb      	ldrb	r3, [r7, #11]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6979      	ldr	r1, [r7, #20]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f002 ffdb 	bl	8007088 <USB_EPStartXfer>
 80040d2:	e005      	b.n	80040e0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6979      	ldr	r1, [r7, #20]
 80040da:	4618      	mov	r0, r3
 80040dc:	f002 ffd4 	bl	8007088 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	f003 0207 	and.w	r2, r3, #7
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	d901      	bls.n	8004108 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e03e      	b.n	8004186 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800410c:	2b00      	cmp	r3, #0
 800410e:	da0e      	bge.n	800412e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4413      	add	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	705a      	strb	r2, [r3, #1]
 800412c:	e00c      	b.n	8004148 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_PCD_EP_SetStall+0x7e>
 8004164:	2302      	movs	r3, #2
 8004166:	e00e      	b.n	8004186 <HAL_PCD_EP_SetStall+0x9c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68f9      	ldr	r1, [r7, #12]
 8004176:	4618      	mov	r0, r3
 8004178:	f004 fa7d 	bl	8008676 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d901      	bls.n	80041ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e040      	b.n	800422e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	da0e      	bge.n	80041d2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	4413      	add	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	705a      	strb	r2, [r3, #1]
 80041d0:	e00e      	b.n	80041f0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	f003 0207 	and.w	r2, r3, #7
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	4413      	add	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_PCD_EP_ClrStall+0x82>
 800420c:	2302      	movs	r3, #2
 800420e:	e00e      	b.n	800422e <HAL_PCD_EP_ClrStall+0xa0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68f9      	ldr	r1, [r7, #12]
 800421e:	4618      	mov	r0, r3
 8004220:	f004 fa79 	bl	8008716 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b08e      	sub	sp, #56	; 0x38
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800423e:	e2ec      	b.n	800481a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004248:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800424a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004256:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800425a:	2b00      	cmp	r3, #0
 800425c:	f040 8161 	bne.w	8004522 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004260:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b00      	cmp	r3, #0
 8004268:	d152      	bne.n	8004310 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427a:	81fb      	strh	r3, [r7, #14]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	89fb      	ldrh	r3, [r7, #14]
 8004282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428a:	b29b      	uxth	r3, r3
 800428c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3328      	adds	r3, #40	; 0x28
 8004292:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429c:	b29b      	uxth	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	3302      	adds	r3, #2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	441a      	add	r2, r3
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80042ce:	2100      	movs	r1, #0
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f006 f908 	bl	800a4e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 829b 	beq.w	800481a <PCD_EP_ISR_Handler+0x5e4>
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f040 8296 	bne.w	800481a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	b292      	uxth	r2, r2
 8004302:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800430e:	e284      	b.n	800481a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004320:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004326:	2b00      	cmp	r3, #0
 8004328:	d034      	beq.n	8004394 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004332:	b29b      	uxth	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4413      	add	r3, r2
 800433e:	3306      	adds	r3, #6
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004368:	b29b      	uxth	r3, r3
 800436a:	f004 faf2 	bl	8008952 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29a      	uxth	r2, r3
 8004376:	f640 738f 	movw	r3, #3983	; 0xf8f
 800437a:	4013      	ands	r3, r2
 800437c:	823b      	strh	r3, [r7, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	8a3a      	ldrh	r2, [r7, #16]
 8004384:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004388:	b292      	uxth	r2, r2
 800438a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f006 f87d 	bl	800a48c <HAL_PCD_SetupStageCallback>
 8004392:	e242      	b.n	800481a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004394:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004398:	2b00      	cmp	r3, #0
 800439a:	f280 823e 	bge.w	800481a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043aa:	4013      	ands	r3, r2
 80043ac:	83bb      	strh	r3, [r7, #28]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	8bba      	ldrh	r2, [r7, #28]
 80043b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043b8:	b292      	uxth	r2, r2
 80043ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	3306      	adds	r3, #6
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d019      	beq.n	8004424 <PCD_EP_ISR_Handler+0x1ee>
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d015      	beq.n	8004424 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	6959      	ldr	r1, [r3, #20]
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004408:	b29b      	uxth	r3, r3
 800440a:	f004 faa2 	bl	8008952 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	441a      	add	r2, r3
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800441c:	2100      	movs	r1, #0
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f006 f846 	bl	800a4b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 81f2 	bne.w	800481a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004444:	b29b      	uxth	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	4413      	add	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d112      	bne.n	8004484 <PCD_EP_ISR_Handler+0x24e>
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004468:	b29a      	uxth	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	801a      	strh	r2, [r3, #0]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800447c:	b29a      	uxth	r2, r3
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	e02f      	b.n	80044e4 <PCD_EP_ISR_Handler+0x2ae>
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b3e      	cmp	r3, #62	; 0x3e
 800448a:	d813      	bhi.n	80044b4 <PCD_EP_ISR_Handler+0x27e>
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	633b      	str	r3, [r7, #48]	; 0x30
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <PCD_EP_ISR_Handler+0x270>
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	3301      	adds	r3, #1
 80044a4:	633b      	str	r3, [r7, #48]	; 0x30
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	029b      	lsls	r3, r3, #10
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	801a      	strh	r2, [r3, #0]
 80044b2:	e017      	b.n	80044e4 <PCD_EP_ISR_Handler+0x2ae>
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	633b      	str	r3, [r7, #48]	; 0x30
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d102      	bne.n	80044ce <PCD_EP_ISR_Handler+0x298>
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	3b01      	subs	r3, #1
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	029b      	lsls	r3, r3, #10
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044de:	b29a      	uxth	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f4:	827b      	strh	r3, [r7, #18]
 80044f6:	8a7b      	ldrh	r3, [r7, #18]
 80044f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044fc:	827b      	strh	r3, [r7, #18]
 80044fe:	8a7b      	ldrh	r3, [r7, #18]
 8004500:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004504:	827b      	strh	r3, [r7, #18]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	8a7b      	ldrh	r3, [r7, #18]
 800450c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451c:	b29b      	uxth	r3, r3
 800451e:	8013      	strh	r3, [r2, #0]
 8004520:	e17b      	b.n	800481a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004534:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004538:	2b00      	cmp	r3, #0
 800453a:	f280 80ea 	bge.w	8004712 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29a      	uxth	r2, r3
 8004550:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004554:	4013      	ands	r3, r2
 8004556:	853b      	strh	r3, [r7, #40]	; 0x28
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800456c:	b292      	uxth	r2, r2
 800456e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004570:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4413      	add	r3, r2
 8004584:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	7b1b      	ldrb	r3, [r3, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d122      	bne.n	80045d4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004596:	b29b      	uxth	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	3306      	adds	r3, #6
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80045b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 8087 	beq.w	80046ce <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	6959      	ldr	r1, [r3, #20]
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	88da      	ldrh	r2, [r3, #6]
 80045cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045ce:	f004 f9c0 	bl	8008952 <USB_ReadPMA>
 80045d2:	e07c      	b.n	80046ce <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	78db      	ldrb	r3, [r3, #3]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d108      	bne.n	80045ee <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80045dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045de:	461a      	mov	r2, r3
 80045e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f927 	bl	8004836 <HAL_PCD_EP_DB_Receive>
 80045e8:	4603      	mov	r3, r0
 80045ea:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045ec:	e06f      	b.n	80046ce <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004608:	847b      	strh	r3, [r7, #34]	; 0x22
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	441a      	add	r2, r3
 8004618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800461a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004626:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d021      	beq.n	800468c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004650:	b29b      	uxth	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4413      	add	r3, r2
 800465c:	3302      	adds	r3, #2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004670:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004674:	2b00      	cmp	r3, #0
 8004676:	d02a      	beq.n	80046ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	6959      	ldr	r1, [r3, #20]
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	891a      	ldrh	r2, [r3, #8]
 8004684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004686:	f004 f964 	bl	8008952 <USB_ReadPMA>
 800468a:	e020      	b.n	80046ce <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004694:	b29b      	uxth	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	3306      	adds	r3, #6
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80046b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	6959      	ldr	r1, [r3, #20]
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	895a      	ldrh	r2, [r3, #10]
 80046c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046ca:	f004 f942 	bl	8008952 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046d4:	441a      	add	r2, r3
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046e0:	441a      	add	r2, r3
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <PCD_EP_ISR_Handler+0x4c2>
 80046ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d206      	bcs.n	8004706 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f005 fed6 	bl	800a4b0 <HAL_PCD_DataOutStageCallback>
 8004704:	e005      	b.n	8004712 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800470c:	4618      	mov	r0, r3
 800470e:	f002 fcbb 	bl	8007088 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004712:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	d07e      	beq.n	800481a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800471c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	843b      	strh	r3, [r7, #32]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	8c3b      	ldrh	r3, [r7, #32]
 800475c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004764:	b29b      	uxth	r3, r3
 8004766:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	78db      	ldrb	r3, [r3, #3]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d00c      	beq.n	800478a <PCD_EP_ISR_Handler+0x554>
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	78db      	ldrb	r3, [r3, #3]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800477c:	2b02      	cmp	r3, #2
 800477e:	d146      	bne.n	800480e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004780:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d141      	bne.n	800480e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004792:	b29b      	uxth	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4413      	add	r3, r2
 800479e:	3302      	adds	r3, #2
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	8bfb      	ldrh	r3, [r7, #30]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d906      	bls.n	80047cc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	8bfb      	ldrh	r3, [r7, #30]
 80047c4:	1ad2      	subs	r2, r2, r3
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	619a      	str	r2, [r3, #24]
 80047ca:	e002      	b.n	80047d2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	2200      	movs	r2, #0
 80047d0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f005 fe80 	bl	800a4e6 <HAL_PCD_DataInStageCallback>
 80047e6:	e018      	b.n	800481a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	8bfb      	ldrh	r3, [r7, #30]
 80047ee:	441a      	add	r2, r3
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	8bfb      	ldrh	r3, [r7, #30]
 80047fa:	441a      	add	r2, r3
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004806:	4618      	mov	r0, r3
 8004808:	f002 fc3e 	bl	8007088 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800480c:	e005      	b.n	800481a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800480e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004810:	461a      	mov	r2, r3
 8004812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f91b 	bl	8004a50 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004822:	b29b      	uxth	r3, r3
 8004824:	b21b      	sxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	f6ff ad0a 	blt.w	8004240 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3738      	adds	r7, #56	; 0x38
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b088      	sub	sp, #32
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	4613      	mov	r3, r2
 8004842:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d07e      	beq.n	800494c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004856:	b29b      	uxth	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	3302      	adds	r3, #2
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004876:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	8b7b      	ldrh	r3, [r7, #26]
 800487e:	429a      	cmp	r2, r3
 8004880:	d306      	bcc.n	8004890 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	8b7b      	ldrh	r3, [r7, #26]
 8004888:	1ad2      	subs	r2, r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	619a      	str	r2, [r3, #24]
 800488e:	e002      	b.n	8004896 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2200      	movs	r2, #0
 8004894:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d123      	bne.n	80048e6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b8:	833b      	strh	r3, [r7, #24]
 80048ba:	8b3b      	ldrh	r3, [r7, #24]
 80048bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048c0:	833b      	strh	r3, [r7, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	8b3b      	ldrh	r3, [r7, #24]
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048e6:	88fb      	ldrh	r3, [r7, #6]
 80048e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01f      	beq.n	8004930 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	82fb      	strh	r3, [r7, #22]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	8afb      	ldrh	r3, [r7, #22]
 800491c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800492c:	b29b      	uxth	r3, r3
 800492e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004930:	8b7b      	ldrh	r3, [r7, #26]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8087 	beq.w	8004a46 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6959      	ldr	r1, [r3, #20]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	891a      	ldrh	r2, [r3, #8]
 8004944:	8b7b      	ldrh	r3, [r7, #26]
 8004946:	f004 f804 	bl	8008952 <USB_ReadPMA>
 800494a:	e07c      	b.n	8004a46 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004954:	b29b      	uxth	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	3306      	adds	r3, #6
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004974:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	8b7b      	ldrh	r3, [r7, #26]
 800497c:	429a      	cmp	r2, r3
 800497e:	d306      	bcc.n	800498e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	699a      	ldr	r2, [r3, #24]
 8004984:	8b7b      	ldrh	r3, [r7, #26]
 8004986:	1ad2      	subs	r2, r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	619a      	str	r2, [r3, #24]
 800498c:	e002      	b.n	8004994 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2200      	movs	r2, #0
 8004992:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d123      	bne.n	80049e4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	83fb      	strh	r3, [r7, #30]
 80049b8:	8bfb      	ldrh	r3, [r7, #30]
 80049ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049be:	83fb      	strh	r3, [r7, #30]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	8bfb      	ldrh	r3, [r7, #30]
 80049d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d11f      	bne.n	8004a2e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a08:	83bb      	strh	r3, [r7, #28]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	441a      	add	r2, r3
 8004a18:	8bbb      	ldrh	r3, [r7, #28]
 8004a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a2e:	8b7b      	ldrh	r3, [r7, #26]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6959      	ldr	r1, [r3, #20]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	895a      	ldrh	r2, [r3, #10]
 8004a40:	8b7b      	ldrh	r3, [r7, #26]
 8004a42:	f003 ff86 	bl	8008952 <USB_ReadPMA>
    }
  }

  return count;
 8004a46:	8b7b      	ldrh	r3, [r7, #26]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b0a2      	sub	sp, #136	; 0x88
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 81c7 	beq.w	8004df8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3302      	adds	r3, #2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d907      	bls.n	8004ab2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004aaa:	1ad2      	subs	r2, r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	619a      	str	r2, [r3, #24]
 8004ab0:	e002      	b.n	8004ab8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f040 80b9 	bne.w	8004c34 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d126      	bne.n	8004b18 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	4413      	add	r3, r2
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	011a      	lsls	r2, r3, #4
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	4413      	add	r3, r2
 8004aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	801a      	strh	r2, [r3, #0]
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	801a      	strh	r2, [r3, #0]
 8004b16:	e01a      	b.n	8004b4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d116      	bne.n	8004b4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	633b      	str	r3, [r7, #48]	; 0x30
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	4413      	add	r3, r2
 8004b36:	633b      	str	r3, [r7, #48]	; 0x30
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	011a      	lsls	r2, r3, #4
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	4413      	add	r3, r2
 8004b42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d126      	bne.n	8004baa <HAL_PCD_EP_DB_Transmit+0x15a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	4413      	add	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	011a      	lsls	r2, r3, #4
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	801a      	strh	r2, [r3, #0]
 8004ba8:	e017      	b.n	8004bda <HAL_PCD_EP_DB_Transmit+0x18a>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	785b      	ldrb	r3, [r3, #1]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d113      	bne.n	8004bda <HAL_PCD_EP_DB_Transmit+0x18a>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	623b      	str	r3, [r7, #32]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	011a      	lsls	r2, r3, #4
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bd2:	61fb      	str	r3, [r7, #28]
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f005 fc80 	bl	800a4e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 82d4 	beq.w	800519a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0c:	827b      	strh	r3, [r7, #18]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	8a7b      	ldrh	r3, [r7, #18]
 8004c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	8013      	strh	r3, [r2, #0]
 8004c32:	e2b2      	b.n	800519a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB_CDC Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d021      	beq.n	8004c82 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	f040 8286 	bne.w	800519a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c96:	441a      	add	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6a1a      	ldr	r2, [r3, #32]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d309      	bcc.n	8004cca <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6a1a      	ldr	r2, [r3, #32]
 8004cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc2:	1ad2      	subs	r2, r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	621a      	str	r2, [r3, #32]
 8004cc8:	e015      	b.n	8004cf6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d107      	bne.n	8004ce2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004cd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cd6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004ce0:	e009      	b.n	8004cf6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	785b      	ldrb	r3, [r3, #1]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d155      	bne.n	8004daa <HAL_PCD_EP_DB_Transmit+0x35a>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	4413      	add	r3, r2
 8004d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	011a      	lsls	r2, r3, #4
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	4413      	add	r3, r2
 8004d20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
 8004d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d112      	bne.n	8004d52 <HAL_PCD_EP_DB_Transmit+0x302>
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3a:	801a      	strh	r2, [r3, #0]
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	801a      	strh	r2, [r3, #0]
 8004d50:	e047      	b.n	8004de2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d54:	2b3e      	cmp	r3, #62	; 0x3e
 8004d56:	d811      	bhi.n	8004d7c <HAL_PCD_EP_DB_Transmit+0x32c>
 8004d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_PCD_EP_DB_Transmit+0x31e>
 8004d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	029b      	lsls	r3, r3, #10
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d78:	801a      	strh	r2, [r3, #0]
 8004d7a:	e032      	b.n	8004de2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <HAL_PCD_EP_DB_Transmit+0x342>
 8004d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	029b      	lsls	r3, r3, #10
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e01b      	b.n	8004de2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d117      	bne.n	8004de2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	643b      	str	r3, [r7, #64]	; 0x40
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc6:	4413      	add	r3, r2
 8004dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	011a      	lsls	r2, r3, #4
 8004dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB_CDC PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6959      	ldr	r1, [r3, #20]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	891a      	ldrh	r2, [r3, #8]
 8004dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f003 fd69 	bl	80088c8 <USB_WritePMA>
 8004df6:	e1d0      	b.n	800519a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	3306      	adds	r3, #6
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d307      	bcc.n	8004e40 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	699a      	ldr	r2, [r3, #24]
 8004e34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	619a      	str	r2, [r3, #24]
 8004e3e:	e002      	b.n	8004e46 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2200      	movs	r2, #0
 8004e44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f040 80c4 	bne.w	8004fd8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d126      	bne.n	8004ea6 <HAL_PCD_EP_DB_Transmit+0x456>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6c:	4413      	add	r3, r2
 8004e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	011a      	lsls	r2, r3, #4
 8004e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e78:	4413      	add	r3, r2
 8004e7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea2:	801a      	strh	r2, [r3, #0]
 8004ea4:	e01a      	b.n	8004edc <HAL_PCD_EP_DB_Transmit+0x48c>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d116      	bne.n	8004edc <HAL_PCD_EP_DB_Transmit+0x48c>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	677b      	str	r3, [r7, #116]	; 0x74
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec2:	4413      	add	r3, r2
 8004ec4:	677b      	str	r3, [r7, #116]	; 0x74
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	011a      	lsls	r2, r3, #4
 8004ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ece:	4413      	add	r3, r2
 8004ed0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ed4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ed8:	2200      	movs	r2, #0
 8004eda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d12f      	bne.n	8004f4a <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f02:	4413      	add	r3, r2
 8004f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	011a      	lsls	r2, r3, #4
 8004f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f12:	4413      	add	r3, r2
 8004f14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f46:	801a      	strh	r2, [r3, #0]
 8004f48:	e017      	b.n	8004f7a <HAL_PCD_EP_DB_Transmit+0x52a>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	785b      	ldrb	r3, [r3, #1]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d113      	bne.n	8004f7a <HAL_PCD_EP_DB_Transmit+0x52a>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f60:	4413      	add	r3, r2
 8004f62:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	011a      	lsls	r2, r3, #4
 8004f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f76:	2200      	movs	r2, #0
 8004f78:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f005 fab0 	bl	800a4e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB_CDC Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f040 8104 	bne.w	800519a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	441a      	add	r2, r3
 8004fbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	8013      	strh	r3, [r2, #0]
 8004fd6:	e0e0      	b.n	800519a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB_CDC Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d121      	bne.n	8005026 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	441a      	add	r2, r3
 800500e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800501e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005022:	b29b      	uxth	r3, r3
 8005024:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800502c:	2b01      	cmp	r3, #1
 800502e:	f040 80b4 	bne.w	800519a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800503a:	441a      	add	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005048:	441a      	add	r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6a1a      	ldr	r2, [r3, #32]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d309      	bcc.n	800506e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	6a1a      	ldr	r2, [r3, #32]
 8005064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005066:	1ad2      	subs	r2, r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	621a      	str	r2, [r3, #32]
 800506c:	e015      	b.n	800509a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d107      	bne.n	8005086 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005076:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800507a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005084:	e009      	b.n	800509a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2200      	movs	r2, #0
 8005090:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	667b      	str	r3, [r7, #100]	; 0x64
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d155      	bne.n	8005154 <HAL_PCD_EP_DB_Transmit+0x704>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050bc:	4413      	add	r3, r2
 80050be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	011a      	lsls	r2, r3, #4
 80050c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c8:	4413      	add	r3, r2
 80050ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80050d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d112      	bne.n	80050fc <HAL_PCD_EP_DB_Transmit+0x6ac>
 80050d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050f8:	801a      	strh	r2, [r3, #0]
 80050fa:	e044      	b.n	8005186 <HAL_PCD_EP_DB_Transmit+0x736>
 80050fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005100:	d811      	bhi.n	8005126 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	657b      	str	r3, [r7, #84]	; 0x54
 8005108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005114:	3301      	adds	r3, #1
 8005116:	657b      	str	r3, [r7, #84]	; 0x54
 8005118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800511a:	b29b      	uxth	r3, r3
 800511c:	029b      	lsls	r3, r3, #10
 800511e:	b29a      	uxth	r2, r3
 8005120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005122:	801a      	strh	r2, [r3, #0]
 8005124:	e02f      	b.n	8005186 <HAL_PCD_EP_DB_Transmit+0x736>
 8005126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	657b      	str	r3, [r7, #84]	; 0x54
 800512c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005138:	3b01      	subs	r3, #1
 800513a:	657b      	str	r3, [r7, #84]	; 0x54
 800513c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800513e:	b29b      	uxth	r3, r3
 8005140:	029b      	lsls	r3, r3, #10
 8005142:	b29b      	uxth	r3, r3
 8005144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514c:	b29a      	uxth	r2, r3
 800514e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	e018      	b.n	8005186 <HAL_PCD_EP_DB_Transmit+0x736>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d114      	bne.n	8005186 <HAL_PCD_EP_DB_Transmit+0x736>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005164:	b29b      	uxth	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800516a:	4413      	add	r3, r2
 800516c:	667b      	str	r3, [r7, #100]	; 0x64
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	011a      	lsls	r2, r3, #4
 8005174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005176:	4413      	add	r3, r2
 8005178:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800517c:	663b      	str	r3, [r7, #96]	; 0x60
 800517e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005180:	b29a      	uxth	r2, r3
 8005182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005184:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB_CDC PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6959      	ldr	r1, [r3, #20]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	895a      	ldrh	r2, [r3, #10]
 8005192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005194:	b29b      	uxth	r3, r3
 8005196:	f003 fb97 	bl	80088c8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b4:	823b      	strh	r3, [r7, #16]
 80051b6:	8a3b      	ldrh	r3, [r7, #16]
 80051b8:	f083 0310 	eor.w	r3, r3, #16
 80051bc:	823b      	strh	r3, [r7, #16]
 80051be:	8a3b      	ldrh	r3, [r7, #16]
 80051c0:	f083 0320 	eor.w	r3, r3, #32
 80051c4:	823b      	strh	r3, [r7, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	441a      	add	r2, r3
 80051d4:	8a3b      	ldrh	r3, [r7, #16]
 80051d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3788      	adds	r7, #136	; 0x88
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	817b      	strh	r3, [r7, #10]
 8005202:	4613      	mov	r3, r2
 8005204:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005212:	897b      	ldrh	r3, [r7, #10]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e009      	b.n	800523e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800522a:	897a      	ldrh	r2, [r7, #10]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800523e:	893b      	ldrh	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d107      	bne.n	8005254 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2200      	movs	r2, #0
 8005248:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	b29a      	uxth	r2, r3
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	80da      	strh	r2, [r3, #6]
 8005252:	e00b      	b.n	800526c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2201      	movs	r2, #1
 8005258:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	b29a      	uxth	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	0c1b      	lsrs	r3, r3, #16
 8005266:	b29a      	uxth	r2, r3
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr

08005278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e31d      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800528a:	4b94      	ldr	r3, [pc, #592]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 030c 	and.w	r3, r3, #12
 8005292:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005294:	4b91      	ldr	r3, [pc, #580]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d07b      	beq.n	80053a2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d006      	beq.n	80052be <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2b0c      	cmp	r3, #12
 80052b4:	d10f      	bne.n	80052d6 <HAL_RCC_OscConfig+0x5e>
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052bc:	d10b      	bne.n	80052d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052be:	4b87      	ldr	r3, [pc, #540]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d06a      	beq.n	80053a0 <HAL_RCC_OscConfig+0x128>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d166      	bne.n	80053a0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e2f7      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d106      	bne.n	80052ec <HAL_RCC_OscConfig+0x74>
 80052de:	4b7f      	ldr	r3, [pc, #508]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a7e      	ldr	r2, [pc, #504]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80052e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e02d      	b.n	8005348 <HAL_RCC_OscConfig+0xd0>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10c      	bne.n	800530e <HAL_RCC_OscConfig+0x96>
 80052f4:	4b79      	ldr	r3, [pc, #484]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a78      	ldr	r2, [pc, #480]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80052fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	4b76      	ldr	r3, [pc, #472]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a75      	ldr	r2, [pc, #468]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	e01c      	b.n	8005348 <HAL_RCC_OscConfig+0xd0>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b05      	cmp	r3, #5
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0xb8>
 8005316:	4b71      	ldr	r3, [pc, #452]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a70      	ldr	r2, [pc, #448]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 800531c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4b6e      	ldr	r3, [pc, #440]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a6d      	ldr	r2, [pc, #436]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e00b      	b.n	8005348 <HAL_RCC_OscConfig+0xd0>
 8005330:	4b6a      	ldr	r3, [pc, #424]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a69      	ldr	r2, [pc, #420]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	4b67      	ldr	r3, [pc, #412]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a66      	ldr	r2, [pc, #408]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d013      	beq.n	8005378 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fe f84c 	bl	80033ec <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005358:	f7fe f848 	bl	80033ec <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e2ad      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800536a:	4b5c      	ldr	r3, [pc, #368]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0xe0>
 8005376:	e014      	b.n	80053a2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005378:	f7fe f838 	bl	80033ec <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005380:	f7fe f834 	bl	80033ec <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	; 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e299      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005392:	4b52      	ldr	r3, [pc, #328]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x108>
 800539e:	e000      	b.n	80053a2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d05a      	beq.n	8005464 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2b0c      	cmp	r3, #12
 80053b8:	d119      	bne.n	80053ee <HAL_RCC_OscConfig+0x176>
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d116      	bne.n	80053ee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c0:	4b46      	ldr	r3, [pc, #280]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_RCC_OscConfig+0x160>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e276      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d8:	4b40      	ldr	r3, [pc, #256]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	493d      	ldr	r1, [pc, #244]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ec:	e03a      	b.n	8005464 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d020      	beq.n	8005438 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053f6:	4b3a      	ldr	r3, [pc, #232]	; (80054e0 <HAL_RCC_OscConfig+0x268>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7fd fff6 	bl	80033ec <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005404:	f7fd fff2 	bl	80033ec <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e257      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005416:	4b31      	ldr	r3, [pc, #196]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005422:	4b2e      	ldr	r3, [pc, #184]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	492a      	ldr	r1, [pc, #168]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005432:	4313      	orrs	r3, r2
 8005434:	604b      	str	r3, [r1, #4]
 8005436:	e015      	b.n	8005464 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005438:	4b29      	ldr	r3, [pc, #164]	; (80054e0 <HAL_RCC_OscConfig+0x268>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fd ffd5 	bl	80033ec <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005446:	f7fd ffd1 	bl	80033ec <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e236      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005458:	4b20      	ldr	r3, [pc, #128]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f0      	bne.n	8005446 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80b8 	beq.w	80055e2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d170      	bne.n	800555a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005478:	4b18      	ldr	r3, [pc, #96]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_OscConfig+0x218>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e21a      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	4b11      	ldr	r3, [pc, #68]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800549c:	429a      	cmp	r2, r3
 800549e:	d921      	bls.n	80054e4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fc17 	bl	8005cd8 <RCC_SetFlashLatencyFromMSIRange>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e208      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054b4:	4b09      	ldr	r3, [pc, #36]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	4906      	ldr	r1, [pc, #24]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	4901      	ldr	r1, [pc, #4]	; (80054dc <HAL_RCC_OscConfig+0x264>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	604b      	str	r3, [r1, #4]
 80054da:	e020      	b.n	800551e <HAL_RCC_OscConfig+0x2a6>
 80054dc:	40023800 	.word	0x40023800
 80054e0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054e4:	4ba4      	ldr	r3, [pc, #656]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	49a1      	ldr	r1, [pc, #644]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054f6:	4ba0      	ldr	r3, [pc, #640]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	061b      	lsls	r3, r3, #24
 8005504:	499c      	ldr	r1, [pc, #624]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005506:	4313      	orrs	r3, r2
 8005508:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fbe2 	bl	8005cd8 <RCC_SetFlashLatencyFromMSIRange>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e1d3      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	0b5b      	lsrs	r3, r3, #13
 8005524:	3301      	adds	r3, #1
 8005526:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800552e:	4a92      	ldr	r2, [pc, #584]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005530:	6892      	ldr	r2, [r2, #8]
 8005532:	0912      	lsrs	r2, r2, #4
 8005534:	f002 020f 	and.w	r2, r2, #15
 8005538:	4990      	ldr	r1, [pc, #576]	; (800577c <HAL_RCC_OscConfig+0x504>)
 800553a:	5c8a      	ldrb	r2, [r1, r2]
 800553c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800553e:	4a90      	ldr	r2, [pc, #576]	; (8005780 <HAL_RCC_OscConfig+0x508>)
 8005540:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005542:	4b90      	ldr	r3, [pc, #576]	; (8005784 <HAL_RCC_OscConfig+0x50c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f7fd ff04 	bl	8003354 <HAL_InitTick>
 800554c:	4603      	mov	r3, r0
 800554e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d045      	beq.n	80055e2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	e1b5      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d029      	beq.n	80055b6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005562:	4b89      	ldr	r3, [pc, #548]	; (8005788 <HAL_RCC_OscConfig+0x510>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005568:	f7fd ff40 	bl	80033ec <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005570:	f7fd ff3c 	bl	80033ec <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e1a1      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005582:	4b7d      	ldr	r3, [pc, #500]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800558e:	4b7a      	ldr	r3, [pc, #488]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	4977      	ldr	r1, [pc, #476]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 800559c:	4313      	orrs	r3, r2
 800559e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055a0:	4b75      	ldr	r3, [pc, #468]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	061b      	lsls	r3, r3, #24
 80055ae:	4972      	ldr	r1, [pc, #456]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	604b      	str	r3, [r1, #4]
 80055b4:	e015      	b.n	80055e2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055b6:	4b74      	ldr	r3, [pc, #464]	; (8005788 <HAL_RCC_OscConfig+0x510>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fd ff16 	bl	80033ec <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055c4:	f7fd ff12 	bl	80033ec <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e177      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80055d6:	4b68      	ldr	r3, [pc, #416]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d030      	beq.n	8005650 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f6:	4b65      	ldr	r3, [pc, #404]	; (800578c <HAL_RCC_OscConfig+0x514>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055fc:	f7fd fef6 	bl	80033ec <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005604:	f7fd fef2 	bl	80033ec <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e157      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005616:	4b58      	ldr	r3, [pc, #352]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0x38c>
 8005622:	e015      	b.n	8005650 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005624:	4b59      	ldr	r3, [pc, #356]	; (800578c <HAL_RCC_OscConfig+0x514>)
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562a:	f7fd fedf 	bl	80033ec <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005632:	f7fd fedb 	bl	80033ec <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e140      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005644:	4b4c      	ldr	r3, [pc, #304]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f0      	bne.n	8005632 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80b5 	beq.w	80057c8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800565e:	2300      	movs	r3, #0
 8005660:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005662:	4b45      	ldr	r3, [pc, #276]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10d      	bne.n	800568a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800566e:	4b42      	ldr	r3, [pc, #264]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	4a41      	ldr	r2, [pc, #260]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005678:	6253      	str	r3, [r2, #36]	; 0x24
 800567a:	4b3f      	ldr	r3, [pc, #252]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005682:	60bb      	str	r3, [r7, #8]
 8005684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005686:	2301      	movs	r3, #1
 8005688:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568a:	4b41      	ldr	r3, [pc, #260]	; (8005790 <HAL_RCC_OscConfig+0x518>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d118      	bne.n	80056c8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <HAL_RCC_OscConfig+0x518>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a3d      	ldr	r2, [pc, #244]	; (8005790 <HAL_RCC_OscConfig+0x518>)
 800569c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056a2:	f7fd fea3 	bl	80033ec <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056aa:	f7fd fe9f 	bl	80033ec <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b64      	cmp	r3, #100	; 0x64
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e104      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056bc:	4b34      	ldr	r3, [pc, #208]	; (8005790 <HAL_RCC_OscConfig+0x518>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f0      	beq.n	80056aa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d106      	bne.n	80056de <HAL_RCC_OscConfig+0x466>
 80056d0:	4b29      	ldr	r3, [pc, #164]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80056d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d4:	4a28      	ldr	r2, [pc, #160]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80056d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056da:	6353      	str	r3, [r2, #52]	; 0x34
 80056dc:	e02d      	b.n	800573a <HAL_RCC_OscConfig+0x4c2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10c      	bne.n	8005700 <HAL_RCC_OscConfig+0x488>
 80056e6:	4b24      	ldr	r3, [pc, #144]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	4a23      	ldr	r2, [pc, #140]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80056ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f0:	6353      	str	r3, [r2, #52]	; 0x34
 80056f2:	4b21      	ldr	r3, [pc, #132]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	4a20      	ldr	r2, [pc, #128]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 80056f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056fc:	6353      	str	r3, [r2, #52]	; 0x34
 80056fe:	e01c      	b.n	800573a <HAL_RCC_OscConfig+0x4c2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b05      	cmp	r3, #5
 8005706:	d10c      	bne.n	8005722 <HAL_RCC_OscConfig+0x4aa>
 8005708:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 800570a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570c:	4a1a      	ldr	r2, [pc, #104]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 800570e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005712:	6353      	str	r3, [r2, #52]	; 0x34
 8005714:	4b18      	ldr	r3, [pc, #96]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005718:	4a17      	ldr	r2, [pc, #92]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 800571a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800571e:	6353      	str	r3, [r2, #52]	; 0x34
 8005720:	e00b      	b.n	800573a <HAL_RCC_OscConfig+0x4c2>
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005726:	4a14      	ldr	r2, [pc, #80]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800572c:	6353      	str	r3, [r2, #52]	; 0x34
 800572e:	4b12      	ldr	r3, [pc, #72]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	4a11      	ldr	r2, [pc, #68]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005738:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d015      	beq.n	800576e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005742:	f7fd fe53 	bl	80033ec <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005748:	e00a      	b.n	8005760 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800574a:	f7fd fe4f 	bl	80033ec <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	4293      	cmp	r3, r2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e0b2      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_RCC_OscConfig+0x500>)
 8005762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ee      	beq.n	800574a <HAL_RCC_OscConfig+0x4d2>
 800576c:	e023      	b.n	80057b6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576e:	f7fd fe3d 	bl	80033ec <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005774:	e019      	b.n	80057aa <HAL_RCC_OscConfig+0x532>
 8005776:	bf00      	nop
 8005778:	40023800 	.word	0x40023800
 800577c:	0800bb94 	.word	0x0800bb94
 8005780:	2000002c 	.word	0x2000002c
 8005784:	20000030 	.word	0x20000030
 8005788:	42470020 	.word	0x42470020
 800578c:	42470680 	.word	0x42470680
 8005790:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005794:	f7fd fe2a 	bl	80033ec <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e08d      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057aa:	4b49      	ldr	r3, [pc, #292]	; (80058d0 <HAL_RCC_OscConfig+0x658>)
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1ee      	bne.n	8005794 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057b6:	7ffb      	ldrb	r3, [r7, #31]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d105      	bne.n	80057c8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057bc:	4b44      	ldr	r3, [pc, #272]	; (80058d0 <HAL_RCC_OscConfig+0x658>)
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	4a43      	ldr	r2, [pc, #268]	; (80058d0 <HAL_RCC_OscConfig+0x658>)
 80057c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d079      	beq.n	80058c4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b0c      	cmp	r3, #12
 80057d4:	d056      	beq.n	8005884 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d13b      	bne.n	8005856 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057de:	4b3d      	ldr	r3, [pc, #244]	; (80058d4 <HAL_RCC_OscConfig+0x65c>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e4:	f7fd fe02 	bl	80033ec <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ec:	f7fd fdfe 	bl	80033ec <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e063      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057fe:	4b34      	ldr	r3, [pc, #208]	; (80058d0 <HAL_RCC_OscConfig+0x658>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800580a:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <HAL_RCC_OscConfig+0x658>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	4319      	orrs	r1, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	430b      	orrs	r3, r1
 8005822:	492b      	ldr	r1, [pc, #172]	; (80058d0 <HAL_RCC_OscConfig+0x658>)
 8005824:	4313      	orrs	r3, r2
 8005826:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005828:	4b2a      	ldr	r3, [pc, #168]	; (80058d4 <HAL_RCC_OscConfig+0x65c>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582e:	f7fd fddd 	bl	80033ec <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005836:	f7fd fdd9 	bl	80033ec <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e03e      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005848:	4b21      	ldr	r3, [pc, #132]	; (80058d0 <HAL_RCC_OscConfig+0x658>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCC_OscConfig+0x5be>
 8005854:	e036      	b.n	80058c4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005856:	4b1f      	ldr	r3, [pc, #124]	; (80058d4 <HAL_RCC_OscConfig+0x65c>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585c:	f7fd fdc6 	bl	80033ec <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005864:	f7fd fdc2 	bl	80033ec <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e027      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005876:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <HAL_RCC_OscConfig+0x658>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x5ec>
 8005882:	e01f      	b.n	80058c4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e01a      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005890:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <HAL_RCC_OscConfig+0x658>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d10d      	bne.n	80058c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d106      	bne.n	80058c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40023800 	.word	0x40023800
 80058d4:	42470060 	.word	0x42470060

080058d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e11a      	b.n	8005b22 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058ec:	4b8f      	ldr	r3, [pc, #572]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d919      	bls.n	800592e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d105      	bne.n	800590c <HAL_RCC_ClockConfig+0x34>
 8005900:	4b8a      	ldr	r3, [pc, #552]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a89      	ldr	r2, [pc, #548]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 8005906:	f043 0304 	orr.w	r3, r3, #4
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	4b87      	ldr	r3, [pc, #540]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f023 0201 	bic.w	r2, r3, #1
 8005914:	4985      	ldr	r1, [pc, #532]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	4313      	orrs	r3, r2
 800591a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800591c:	4b83      	ldr	r3, [pc, #524]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d001      	beq.n	800592e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e0f9      	b.n	8005b22 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800593a:	4b7d      	ldr	r3, [pc, #500]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	497a      	ldr	r1, [pc, #488]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 8005948:	4313      	orrs	r3, r2
 800594a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 808e 	beq.w	8005a76 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d107      	bne.n	8005972 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005962:	4b73      	ldr	r3, [pc, #460]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d121      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e0d7      	b.n	8005b22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b03      	cmp	r3, #3
 8005978:	d107      	bne.n	800598a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800597a:	4b6d      	ldr	r3, [pc, #436]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d115      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e0cb      	b.n	8005b22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d107      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005992:	4b67      	ldr	r3, [pc, #412]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d109      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e0bf      	b.n	8005b22 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80059a2:	4b63      	ldr	r3, [pc, #396]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e0b7      	b.n	8005b22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059b2:	4b5f      	ldr	r3, [pc, #380]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f023 0203 	bic.w	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	495c      	ldr	r1, [pc, #368]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c4:	f7fd fd12 	bl	80033ec <HAL_GetTick>
 80059c8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d112      	bne.n	80059f8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80059d2:	e00a      	b.n	80059ea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d4:	f7fd fd0a 	bl	80033ec <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e09b      	b.n	8005b22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80059ea:	4b51      	ldr	r3, [pc, #324]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d1ee      	bne.n	80059d4 <HAL_RCC_ClockConfig+0xfc>
 80059f6:	e03e      	b.n	8005a76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d112      	bne.n	8005a26 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a00:	e00a      	b.n	8005a18 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a02:	f7fd fcf3 	bl	80033ec <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e084      	b.n	8005b22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a18:	4b45      	ldr	r3, [pc, #276]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 030c 	and.w	r3, r3, #12
 8005a20:	2b0c      	cmp	r3, #12
 8005a22:	d1ee      	bne.n	8005a02 <HAL_RCC_ClockConfig+0x12a>
 8005a24:	e027      	b.n	8005a76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d11d      	bne.n	8005a6a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a2e:	e00a      	b.n	8005a46 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a30:	f7fd fcdc 	bl	80033ec <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e06d      	b.n	8005b22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a46:	4b3a      	ldr	r3, [pc, #232]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d1ee      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x158>
 8005a52:	e010      	b.n	8005a76 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a54:	f7fd fcca 	bl	80033ec <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e05b      	b.n	8005b22 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a6a:	4b31      	ldr	r3, [pc, #196]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 030c 	and.w	r3, r3, #12
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1ee      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a76:	4b2d      	ldr	r3, [pc, #180]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d219      	bcs.n	8005ab8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d105      	bne.n	8005a96 <HAL_RCC_ClockConfig+0x1be>
 8005a8a:	4b28      	ldr	r3, [pc, #160]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a27      	ldr	r2, [pc, #156]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 8005a90:	f043 0304 	orr.w	r3, r3, #4
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f023 0201 	bic.w	r2, r3, #1
 8005a9e:	4923      	ldr	r1, [pc, #140]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa6:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <HAL_RCC_ClockConfig+0x254>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d001      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e034      	b.n	8005b22 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4917      	ldr	r1, [pc, #92]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ae2:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	490f      	ldr	r1, [pc, #60]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005af6:	f000 f823 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 8005afa:	4602      	mov	r2, r0
 8005afc:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <HAL_RCC_ClockConfig+0x258>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	091b      	lsrs	r3, r3, #4
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	490b      	ldr	r1, [pc, #44]	; (8005b34 <HAL_RCC_ClockConfig+0x25c>)
 8005b08:	5ccb      	ldrb	r3, [r1, r3]
 8005b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0e:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <HAL_RCC_ClockConfig+0x260>)
 8005b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b12:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fd fc1c 	bl	8003354 <HAL_InitTick>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b20:	7afb      	ldrb	r3, [r7, #11]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40023c00 	.word	0x40023c00
 8005b30:	40023800 	.word	0x40023800
 8005b34:	0800bb94 	.word	0x0800bb94
 8005b38:	2000002c 	.word	0x2000002c
 8005b3c:	20000030 	.word	0x20000030

08005b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b40:	b5b0      	push	{r4, r5, r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005b46:	4b61      	ldr	r3, [pc, #388]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x18c>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	2b0c      	cmp	r3, #12
 8005b54:	d00d      	beq.n	8005b72 <HAL_RCC_GetSysClockFreq+0x32>
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	f200 80a4 	bhi.w	8005ca4 <HAL_RCC_GetSysClockFreq+0x164>
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d002      	beq.n	8005b66 <HAL_RCC_GetSysClockFreq+0x26>
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d003      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0x2c>
 8005b64:	e09e      	b.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b66:	4b5a      	ldr	r3, [pc, #360]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x190>)
 8005b68:	613b      	str	r3, [r7, #16]
      break;
 8005b6a:	e0a9      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b6c:	4b58      	ldr	r3, [pc, #352]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x190>)
 8005b6e:	613b      	str	r3, [r7, #16]
      break;
 8005b70:	e0a6      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	0c9b      	lsrs	r3, r3, #18
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	4a56      	ldr	r2, [pc, #344]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0x194>)
 8005b7c:	5cd3      	ldrb	r3, [r2, r3]
 8005b7e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	0d9b      	lsrs	r3, r3, #22
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	3301      	adds	r3, #1
 8005b8a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b8c:	4b4f      	ldr	r3, [pc, #316]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x18c>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d041      	beq.n	8005c1c <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	461c      	mov	r4, r3
 8005b9c:	f04f 0500 	mov.w	r5, #0
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	014b      	lsls	r3, r1, #5
 8005bae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bb2:	0142      	lsls	r2, r0, #5
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	1b00      	subs	r0, r0, r4
 8005bba:	eb61 0105 	sbc.w	r1, r1, r5
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	018b      	lsls	r3, r1, #6
 8005bc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bcc:	0182      	lsls	r2, r0, #6
 8005bce:	1a12      	subs	r2, r2, r0
 8005bd0:	eb63 0301 	sbc.w	r3, r3, r1
 8005bd4:	f04f 0000 	mov.w	r0, #0
 8005bd8:	f04f 0100 	mov.w	r1, #0
 8005bdc:	00d9      	lsls	r1, r3, #3
 8005bde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005be2:	00d0      	lsls	r0, r2, #3
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	1912      	adds	r2, r2, r4
 8005bea:	eb45 0303 	adc.w	r3, r5, r3
 8005bee:	f04f 0000 	mov.w	r0, #0
 8005bf2:	f04f 0100 	mov.w	r1, #0
 8005bf6:	0299      	lsls	r1, r3, #10
 8005bf8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005bfc:	0290      	lsls	r0, r2, #10
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4610      	mov	r0, r2
 8005c04:	4619      	mov	r1, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	f7fa ff43 	bl	8000a98 <__aeabi_uldivmod>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4613      	mov	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e040      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	461c      	mov	r4, r3
 8005c20:	f04f 0500 	mov.w	r5, #0
 8005c24:	4620      	mov	r0, r4
 8005c26:	4629      	mov	r1, r5
 8005c28:	f04f 0200 	mov.w	r2, #0
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	014b      	lsls	r3, r1, #5
 8005c32:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c36:	0142      	lsls	r2, r0, #5
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	1b00      	subs	r0, r0, r4
 8005c3e:	eb61 0105 	sbc.w	r1, r1, r5
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	018b      	lsls	r3, r1, #6
 8005c4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c50:	0182      	lsls	r2, r0, #6
 8005c52:	1a12      	subs	r2, r2, r0
 8005c54:	eb63 0301 	sbc.w	r3, r3, r1
 8005c58:	f04f 0000 	mov.w	r0, #0
 8005c5c:	f04f 0100 	mov.w	r1, #0
 8005c60:	00d9      	lsls	r1, r3, #3
 8005c62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c66:	00d0      	lsls	r0, r2, #3
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	1912      	adds	r2, r2, r4
 8005c6e:	eb45 0303 	adc.w	r3, r5, r3
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f04f 0100 	mov.w	r1, #0
 8005c7a:	0299      	lsls	r1, r3, #10
 8005c7c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c80:	0290      	lsls	r0, r2, #10
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4610      	mov	r0, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	f7fa ff01 	bl	8000a98 <__aeabi_uldivmod>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	613b      	str	r3, [r7, #16]
      break;
 8005ca2:	e00d      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005ca4:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x18c>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	0b5b      	lsrs	r3, r3, #13
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	613b      	str	r3, [r7, #16]
      break;
 8005cbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cc0:	693b      	ldr	r3, [r7, #16]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	00f42400 	.word	0x00f42400
 8005cd4:	0800bb88 	.word	0x0800bb88

08005cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005ce4:	4b29      	ldr	r3, [pc, #164]	; (8005d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d12c      	bne.n	8005d4a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005cf0:	4b26      	ldr	r3, [pc, #152]	; (8005d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005cfc:	4b24      	ldr	r3, [pc, #144]	; (8005d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	e016      	b.n	8005d36 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d08:	4b20      	ldr	r3, [pc, #128]	; (8005d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d12:	6253      	str	r3, [r2, #36]	; 0x24
 8005d14:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005d20:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005d28:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d2a:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d34:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005d3c:	d105      	bne.n	8005d4a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d44:	d101      	bne.n	8005d4a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005d46:	2301      	movs	r3, #1
 8005d48:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d105      	bne.n	8005d5c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005d50:	4b10      	ldr	r3, [pc, #64]	; (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a0f      	ldr	r2, [pc, #60]	; (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d56:	f043 0304 	orr.w	r3, r3, #4
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f023 0201 	bic.w	r2, r3, #1
 8005d64:	490b      	ldr	r1, [pc, #44]	; (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d001      	beq.n	8005d7e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	40007000 	.word	0x40007000
 8005d94:	40023c00 	.word	0x40023c00

08005d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e031      	b.n	8005e0e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fd f9a2 	bl	8003108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f000 fa5a 	bl	8006290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d001      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e03a      	b.n	8005ea6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e50:	d00e      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x58>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a16      	ldr	r2, [pc, #88]	; (8005eb0 <HAL_TIM_Base_Start_IT+0x98>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x58>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x58>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d111      	bne.n	8005e94 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b06      	cmp	r3, #6
 8005e80:	d010      	beq.n	8005ea4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e92:	e007      	b.n	8005ea4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40010800 	.word	0x40010800

08005ebc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0201 	bic.w	r2, r2, #1
 8005ed2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6a1a      	ldr	r2, [r3, #32]
 8005eda:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ede:	4013      	ands	r3, r2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d107      	bne.n	8005ef4 <HAL_TIM_Base_Stop_IT+0x38>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0201 	bic.w	r2, r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d122      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d11b      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0202 	mvn.w	r2, #2
 8005f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f985 	bl	800625a <HAL_TIM_IC_CaptureCallback>
 8005f50:	e005      	b.n	8005f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f978 	bl	8006248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f987 	bl	800626c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d122      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d11b      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0204 	mvn.w	r2, #4
 8005f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f95b 	bl	800625a <HAL_TIM_IC_CaptureCallback>
 8005fa4:	e005      	b.n	8005fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f94e 	bl	8006248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f95d 	bl	800626c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d122      	bne.n	800600c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f003 0308 	and.w	r3, r3, #8
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d11b      	bne.n	800600c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0208 	mvn.w	r2, #8
 8005fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f931 	bl	800625a <HAL_TIM_IC_CaptureCallback>
 8005ff8:	e005      	b.n	8006006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f924 	bl	8006248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f933 	bl	800626c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0310 	and.w	r3, r3, #16
 8006016:	2b10      	cmp	r3, #16
 8006018:	d122      	bne.n	8006060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f003 0310 	and.w	r3, r3, #16
 8006024:	2b10      	cmp	r3, #16
 8006026:	d11b      	bne.n	8006060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0210 	mvn.w	r2, #16
 8006030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2208      	movs	r2, #8
 8006036:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f907 	bl	800625a <HAL_TIM_IC_CaptureCallback>
 800604c:	e005      	b.n	800605a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f8fa 	bl	8006248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f909 	bl	800626c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b01      	cmp	r3, #1
 800606c:	d10e      	bne.n	800608c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d107      	bne.n	800608c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0201 	mvn.w	r2, #1
 8006084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fc fad8 	bl	800263c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d10e      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d107      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f8e3 	bl	800627e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_TIM_ConfigClockSource+0x18>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e0b3      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x180>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006110:	d03e      	beq.n	8006190 <HAL_TIM_ConfigClockSource+0xd0>
 8006112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006116:	f200 8087 	bhi.w	8006228 <HAL_TIM_ConfigClockSource+0x168>
 800611a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611e:	f000 8085 	beq.w	800622c <HAL_TIM_ConfigClockSource+0x16c>
 8006122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006126:	d87f      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x168>
 8006128:	2b70      	cmp	r3, #112	; 0x70
 800612a:	d01a      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0xa2>
 800612c:	2b70      	cmp	r3, #112	; 0x70
 800612e:	d87b      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x168>
 8006130:	2b60      	cmp	r3, #96	; 0x60
 8006132:	d050      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x116>
 8006134:	2b60      	cmp	r3, #96	; 0x60
 8006136:	d877      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x168>
 8006138:	2b50      	cmp	r3, #80	; 0x50
 800613a:	d03c      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0xf6>
 800613c:	2b50      	cmp	r3, #80	; 0x50
 800613e:	d873      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x168>
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d058      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x136>
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d86f      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x168>
 8006148:	2b30      	cmp	r3, #48	; 0x30
 800614a:	d064      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x156>
 800614c:	2b30      	cmp	r3, #48	; 0x30
 800614e:	d86b      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x168>
 8006150:	2b20      	cmp	r3, #32
 8006152:	d060      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x156>
 8006154:	2b20      	cmp	r3, #32
 8006156:	d867      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x168>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d05c      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x156>
 800615c:	2b10      	cmp	r3, #16
 800615e:	d05a      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006160:	e062      	b.n	8006228 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6899      	ldr	r1, [r3, #8]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f000 f966 	bl	8006442 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006184:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	609a      	str	r2, [r3, #8]
      break;
 800618e:	e04e      	b.n	800622e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	6899      	ldr	r1, [r3, #8]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f000 f94f 	bl	8006442 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061b2:	609a      	str	r2, [r3, #8]
      break;
 80061b4:	e03b      	b.n	800622e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6859      	ldr	r1, [r3, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f000 f8c6 	bl	8006354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2150      	movs	r1, #80	; 0x50
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 f91d 	bl	800640e <TIM_ITRx_SetConfig>
      break;
 80061d4:	e02b      	b.n	800622e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6859      	ldr	r1, [r3, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f000 f8e4 	bl	80063b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2160      	movs	r1, #96	; 0x60
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 f90d 	bl	800640e <TIM_ITRx_SetConfig>
      break;
 80061f4:	e01b      	b.n	800622e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	461a      	mov	r2, r3
 8006204:	f000 f8a6 	bl	8006354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2140      	movs	r1, #64	; 0x40
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f8fd 	bl	800640e <TIM_ITRx_SetConfig>
      break;
 8006214:	e00b      	b.n	800622e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f000 f8f4 	bl	800640e <TIM_ITRx_SetConfig>
        break;
 8006226:	e002      	b.n	800622e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006228:	bf00      	nop
 800622a:	e000      	b.n	800622e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800622c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr

0800625a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr

0800627e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr

08006290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d007      	beq.n	80062b8 <TIM_Base_SetConfig+0x28>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a25      	ldr	r2, [pc, #148]	; (8006340 <TIM_Base_SetConfig+0xb0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_Base_SetConfig+0x28>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a24      	ldr	r2, [pc, #144]	; (8006344 <TIM_Base_SetConfig+0xb4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d108      	bne.n	80062ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d0:	d013      	beq.n	80062fa <TIM_Base_SetConfig+0x6a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a1a      	ldr	r2, [pc, #104]	; (8006340 <TIM_Base_SetConfig+0xb0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00f      	beq.n	80062fa <TIM_Base_SetConfig+0x6a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a19      	ldr	r2, [pc, #100]	; (8006344 <TIM_Base_SetConfig+0xb4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00b      	beq.n	80062fa <TIM_Base_SetConfig+0x6a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a18      	ldr	r2, [pc, #96]	; (8006348 <TIM_Base_SetConfig+0xb8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d007      	beq.n	80062fa <TIM_Base_SetConfig+0x6a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a17      	ldr	r2, [pc, #92]	; (800634c <TIM_Base_SetConfig+0xbc>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d003      	beq.n	80062fa <TIM_Base_SetConfig+0x6a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a16      	ldr	r2, [pc, #88]	; (8006350 <TIM_Base_SetConfig+0xc0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d108      	bne.n	800630c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	615a      	str	r2, [r3, #20]
}
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr
 8006340:	40000400 	.word	0x40000400
 8006344:	40000800 	.word	0x40000800
 8006348:	40010800 	.word	0x40010800
 800634c:	40010c00 	.word	0x40010c00
 8006350:	40011000 	.word	0x40011000

08006354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f023 0201 	bic.w	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800637e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f023 030a 	bic.w	r3, r3, #10
 8006390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	621a      	str	r2, [r3, #32]
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr

080063b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f023 0210 	bic.w	r2, r3, #16
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	031b      	lsls	r3, r3, #12
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	621a      	str	r2, [r3, #32]
}
 8006404:	bf00      	nop
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr

0800640e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	f043 0307 	orr.w	r3, r3, #7
 8006430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	609a      	str	r2, [r3, #8]
}
 8006438:	bf00      	nop
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr

08006442 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006442:	b480      	push	{r7}
 8006444:	b087      	sub	sp, #28
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	607a      	str	r2, [r7, #4]
 800644e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800645c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	021a      	lsls	r2, r3, #8
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	431a      	orrs	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4313      	orrs	r3, r2
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	609a      	str	r2, [r3, #8]
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr

08006480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006494:	2302      	movs	r3, #2
 8006496:	e046      	b.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064da:	d00e      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a13      	ldr	r2, [pc, #76]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a12      	ldr	r2, [pc, #72]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a10      	ldr	r2, [pc, #64]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d10c      	bne.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	4313      	orrs	r3, r2
 800650a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	40010800 	.word	0x40010800

0800653c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800654c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006550:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	b29a      	uxth	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006570:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006574:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	b29b      	uxth	r3, r3
 8006582:	43db      	mvns	r3, r3
 8006584:	b29b      	uxth	r3, r3
 8006586:	4013      	ands	r3, r2
 8006588:	b29a      	uxth	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800659c:	b084      	sub	sp, #16
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	f107 0014 	add.w	r0, r7, #20
 80065aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	b004      	add	sp, #16
 80065da:	4770      	bx	lr

080065dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065dc:	b480      	push	{r7}
 80065de:	b09b      	sub	sp, #108	; 0x6c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	78db      	ldrb	r3, [r3, #3]
 800660a:	2b03      	cmp	r3, #3
 800660c:	d81f      	bhi.n	800664e <USB_ActivateEndpoint+0x72>
 800660e:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <USB_ActivateEndpoint+0x38>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006625 	.word	0x08006625
 8006618:	08006641 	.word	0x08006641
 800661c:	08006657 	.word	0x08006657
 8006620:	08006633 	.word	0x08006633
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006624:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800662c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006630:	e012      	b.n	8006658 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006632:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006636:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800663a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800663e:	e00b      	b.n	8006658 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006640:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006648:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800664c:	e004      	b.n	8006658 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006654:	e000      	b.n	8006658 <USB_ActivateEndpoint+0x7c>
      break;
 8006656:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800666e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006676:	b29b      	uxth	r3, r3
 8006678:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006690:	b29a      	uxth	r2, r3
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	4313      	orrs	r3, r2
 800669a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	441a      	add	r2, r3
 80066a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80066ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066bc:	b29b      	uxth	r3, r3
 80066be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	7b1b      	ldrb	r3, [r3, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f040 8149 	bne.w	800695c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8084 	beq.w	80067dc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066de:	b29b      	uxth	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4413      	add	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	011a      	lsls	r2, r3, #4
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	88db      	ldrh	r3, [r3, #6]
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	b29b      	uxth	r3, r3
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	81fb      	strh	r3, [r7, #14]
 8006716:	89fb      	ldrh	r3, [r7, #14]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <USB_ActivateEndpoint+0x17c>
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b29b      	uxth	r3, r3
 800672e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006736:	81bb      	strh	r3, [r7, #12]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	441a      	add	r2, r3
 8006742:	89bb      	ldrh	r3, [r7, #12]
 8006744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006750:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006754:	b29b      	uxth	r3, r3
 8006756:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	78db      	ldrb	r3, [r3, #3]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d020      	beq.n	80067a2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006776:	813b      	strh	r3, [r7, #8]
 8006778:	893b      	ldrh	r3, [r7, #8]
 800677a:	f083 0320 	eor.w	r3, r3, #32
 800677e:	813b      	strh	r3, [r7, #8]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	441a      	add	r2, r3
 800678a:	893b      	ldrh	r3, [r7, #8]
 800678c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679c:	b29b      	uxth	r3, r3
 800679e:	8013      	strh	r3, [r2, #0]
 80067a0:	e27f      	b.n	8006ca2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b8:	817b      	strh	r3, [r7, #10]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	897b      	ldrh	r3, [r7, #10]
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]
 80067da:	e262      	b.n	8006ca2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	4413      	add	r3, r2
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	011a      	lsls	r2, r3, #4
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	88db      	ldrh	r3, [r3, #6]
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	b29b      	uxth	r3, r3
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681a:	b29b      	uxth	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	4413      	add	r3, r2
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	011a      	lsls	r2, r3, #4
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	4413      	add	r3, r2
 800682e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006832:	623b      	str	r3, [r7, #32]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d112      	bne.n	8006862 <USB_ActivateEndpoint+0x286>
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006846:	b29a      	uxth	r2, r3
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685a:	b29a      	uxth	r2, r3
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	e02f      	b.n	80068c2 <USB_ActivateEndpoint+0x2e6>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b3e      	cmp	r3, #62	; 0x3e
 8006868:	d813      	bhi.n	8006892 <USB_ActivateEndpoint+0x2b6>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	085b      	lsrs	r3, r3, #1
 8006870:	663b      	str	r3, [r7, #96]	; 0x60
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <USB_ActivateEndpoint+0x2a8>
 800687e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006880:	3301      	adds	r3, #1
 8006882:	663b      	str	r3, [r7, #96]	; 0x60
 8006884:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006886:	b29b      	uxth	r3, r3
 8006888:	029b      	lsls	r3, r3, #10
 800688a:	b29a      	uxth	r2, r3
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	801a      	strh	r2, [r3, #0]
 8006890:	e017      	b.n	80068c2 <USB_ActivateEndpoint+0x2e6>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	095b      	lsrs	r3, r3, #5
 8006898:	663b      	str	r3, [r7, #96]	; 0x60
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <USB_ActivateEndpoint+0x2d0>
 80068a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068a8:	3b01      	subs	r3, #1
 80068aa:	663b      	str	r3, [r7, #96]	; 0x60
 80068ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	029b      	lsls	r3, r3, #10
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068bc:	b29a      	uxth	r2, r3
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	83fb      	strh	r3, [r7, #30]
 80068d0:	8bfb      	ldrh	r3, [r7, #30]
 80068d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01b      	beq.n	8006912 <USB_ActivateEndpoint+0x336>
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f0:	83bb      	strh	r3, [r7, #28]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	441a      	add	r2, r3
 80068fc:	8bbb      	ldrh	r3, [r7, #28]
 80068fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800690a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690e:	b29b      	uxth	r3, r3
 8006910:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006928:	837b      	strh	r3, [r7, #26]
 800692a:	8b7b      	ldrh	r3, [r7, #26]
 800692c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006930:	837b      	strh	r3, [r7, #26]
 8006932:	8b7b      	ldrh	r3, [r7, #26]
 8006934:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006938:	837b      	strh	r3, [r7, #26]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	8b7b      	ldrh	r3, [r7, #26]
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]
 800695a:	e1a2      	b.n	8006ca2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006994:	b29b      	uxth	r3, r3
 8006996:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	65bb      	str	r3, [r7, #88]	; 0x58
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069a8:	4413      	add	r3, r2
 80069aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	011a      	lsls	r2, r3, #4
 80069b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ba:	657b      	str	r3, [r7, #84]	; 0x54
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	891b      	ldrh	r3, [r3, #8]
 80069c0:	085b      	lsrs	r3, r3, #1
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	653b      	str	r3, [r7, #80]	; 0x50
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	461a      	mov	r2, r3
 80069da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069dc:	4413      	add	r3, r2
 80069de:	653b      	str	r3, [r7, #80]	; 0x50
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	011a      	lsls	r2, r3, #4
 80069e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80069ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	895b      	ldrh	r3, [r3, #10]
 80069f4:	085b      	lsrs	r3, r3, #1
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 8091 	bne.w	8006b2c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006a18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d01b      	beq.n	8006a5a <USB_ActivateEndpoint+0x47e>
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a38:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	441a      	add	r2, r3
 8006a44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	873b      	strh	r3, [r7, #56]	; 0x38
 8006a68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01b      	beq.n	8006aaa <USB_ActivateEndpoint+0x4ce>
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a88:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ac2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ac4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ac8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006aca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006acc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ad0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b08:	867b      	strh	r3, [r7, #50]	; 0x32
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]
 8006b2a:	e0ba      	b.n	8006ca2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006b3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01d      	beq.n	8006b84 <USB_ActivateEndpoint+0x5a8>
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	441a      	add	r2, r3
 8006b6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006b94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01d      	beq.n	8006bdc <USB_ActivateEndpoint+0x600>
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	441a      	add	r2, r3
 8006bc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	78db      	ldrb	r3, [r3, #3]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d024      	beq.n	8006c2e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006bfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c02:	f083 0320 	eor.w	r3, r3, #32
 8006c06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	441a      	add	r2, r3
 8006c14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]
 8006c2c:	e01d      	b.n	8006c6a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	441a      	add	r2, r3
 8006c52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c80:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	441a      	add	r2, r3
 8006c8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006ca2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	376c      	adds	r7, #108	; 0x6c
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b08d      	sub	sp, #52	; 0x34
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	7b1b      	ldrb	r3, [r3, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 808e 	bne.w	8006de0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	785b      	ldrb	r3, [r3, #1]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d044      	beq.n	8006d56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	81bb      	strh	r3, [r7, #12]
 8006cda:	89bb      	ldrh	r3, [r7, #12]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01b      	beq.n	8006d1c <USB_DeactivateEndpoint+0x6c>
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	817b      	strh	r3, [r7, #10]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	441a      	add	r2, r3
 8006d06:	897b      	ldrh	r3, [r7, #10]
 8006d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d32:	813b      	strh	r3, [r7, #8]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	893b      	ldrh	r3, [r7, #8]
 8006d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8013      	strh	r3, [r2, #0]
 8006d54:	e192      	b.n	800707c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	827b      	strh	r3, [r7, #18]
 8006d64:	8a7b      	ldrh	r3, [r7, #18]
 8006d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01b      	beq.n	8006da6 <USB_DeactivateEndpoint+0xf6>
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d84:	823b      	strh	r3, [r7, #16]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	8a3b      	ldrh	r3, [r7, #16]
 8006d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbc:	81fb      	strh	r3, [r7, #14]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	441a      	add	r2, r3
 8006dc8:	89fb      	ldrh	r3, [r7, #14]
 8006dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	8013      	strh	r3, [r2, #0]
 8006dde:	e14d      	b.n	800707c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f040 80a5 	bne.w	8006f34 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	843b      	strh	r3, [r7, #32]
 8006df8:	8c3b      	ldrh	r3, [r7, #32]
 8006dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01b      	beq.n	8006e3a <USB_DeactivateEndpoint+0x18a>
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e18:	83fb      	strh	r3, [r7, #30]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	8bfb      	ldrh	r3, [r7, #30]
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	83bb      	strh	r3, [r7, #28]
 8006e48:	8bbb      	ldrh	r3, [r7, #28]
 8006e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01b      	beq.n	8006e8a <USB_DeactivateEndpoint+0x1da>
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e68:	837b      	strh	r3, [r7, #26]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	441a      	add	r2, r3
 8006e74:	8b7b      	ldrh	r3, [r7, #26]
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea0:	833b      	strh	r3, [r7, #24]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	441a      	add	r2, r3
 8006eac:	8b3b      	ldrh	r3, [r7, #24]
 8006eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed8:	82fb      	strh	r3, [r7, #22]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	8afb      	ldrh	r3, [r7, #22]
 8006ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f10:	82bb      	strh	r3, [r7, #20]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	441a      	add	r2, r3
 8006f1c:	8abb      	ldrh	r3, [r7, #20]
 8006f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	8013      	strh	r3, [r2, #0]
 8006f32:	e0a3      	b.n	800707c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006f42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01b      	beq.n	8006f84 <USB_DeactivateEndpoint+0x2d4>
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006f92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d01b      	beq.n	8006fd4 <USB_DeactivateEndpoint+0x324>
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007008:	b29b      	uxth	r3, r3
 800700a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007022:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	441a      	add	r2, r3
 800702e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800703c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007040:	b29b      	uxth	r3, r3
 8007042:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705a:	847b      	strh	r3, [r7, #34]	; 0x22
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007078:	b29b      	uxth	r3, r3
 800707a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3734      	adds	r7, #52	; 0x34
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b0cc      	sub	sp, #304	; 0x130
 800708c:	af00      	add	r7, sp, #0
 800708e:	1d3b      	adds	r3, r7, #4
 8007090:	6018      	str	r0, [r3, #0]
 8007092:	463b      	mov	r3, r7
 8007094:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007096:	463b      	mov	r3, r7
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b01      	cmp	r3, #1
 800709e:	f040 872e 	bne.w	8007efe <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699a      	ldr	r2, [r3, #24]
 80070a8:	463b      	mov	r3, r7
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d905      	bls.n	80070be <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80070b2:	463b      	mov	r3, r7
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80070bc:	e004      	b.n	80070c8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80070be:	463b      	mov	r3, r7
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80070c8:	463b      	mov	r3, r7
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	7b1b      	ldrb	r3, [r3, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d134      	bne.n	800713c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80070d2:	463b      	mov	r3, r7
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6959      	ldr	r1, [r3, #20]
 80070d8:	463b      	mov	r3, r7
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	88da      	ldrh	r2, [r3, #6]
 80070de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	1d38      	adds	r0, r7, #4
 80070e6:	6800      	ldr	r0, [r0, #0]
 80070e8:	f001 fbee 	bl	80088c8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070ec:	f107 0310 	add.w	r3, r7, #16
 80070f0:	1d3a      	adds	r2, r7, #4
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	1d3b      	adds	r3, r7, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fe:	b29b      	uxth	r3, r3
 8007100:	4619      	mov	r1, r3
 8007102:	f107 0310 	add.w	r3, r7, #16
 8007106:	f107 0210 	add.w	r2, r7, #16
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	440a      	add	r2, r1
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	463b      	mov	r3, r7
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	011a      	lsls	r2, r3, #4
 8007118:	f107 0310 	add.w	r3, r7, #16
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4413      	add	r3, r2
 8007120:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007124:	f107 030c 	add.w	r3, r7, #12
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800712e:	b29a      	uxth	r2, r3
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	801a      	strh	r2, [r3, #0]
 8007138:	f000 beac 	b.w	8007e94 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800713c:	463b      	mov	r3, r7
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	78db      	ldrb	r3, [r3, #3]
 8007142:	2b02      	cmp	r3, #2
 8007144:	f040 838c 	bne.w	8007860 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007148:	463b      	mov	r3, r7
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6a1a      	ldr	r2, [r3, #32]
 800714e:	463b      	mov	r3, r7
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	429a      	cmp	r2, r3
 8007156:	f240 8330 	bls.w	80077ba <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800715a:	1d3b      	adds	r3, r7, #4
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	463b      	mov	r3, r7
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007174:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007178:	1d3b      	adds	r3, r7, #4
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	463b      	mov	r3, r7
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800718a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007192:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719a:	b29b      	uxth	r3, r3
 800719c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800719e:	463b      	mov	r3, r7
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6a1a      	ldr	r2, [r3, #32]
 80071a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a8:	1ad2      	subs	r2, r2, r3
 80071aa:	463b      	mov	r3, r7
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071b0:	1d3b      	adds	r3, r7, #4
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	463b      	mov	r3, r7
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 819e 	beq.w	8007508 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071d0:	1d3a      	adds	r2, r7, #4
 80071d2:	6812      	ldr	r2, [r2, #0]
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	463b      	mov	r3, r7
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d17a      	bne.n	80072d6 <USB_EPStartXfer+0x24e>
 80071e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071e4:	1d3a      	adds	r2, r7, #4
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	1d3b      	adds	r3, r7, #4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	4619      	mov	r1, r3
 80071f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80071fe:	6812      	ldr	r2, [r2, #0]
 8007200:	440a      	add	r2, r1
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	463b      	mov	r3, r7
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	011a      	lsls	r2, r3, #4
 800720c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4413      	add	r3, r2
 8007214:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d11a      	bne.n	800725c <USB_EPStartXfer+0x1d4>
 8007226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007234:	b29a      	uxth	r2, r3
 8007236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	801a      	strh	r2, [r3, #0]
 800723e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007250:	b29a      	uxth	r2, r3
 8007252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	e062      	b.n	8007322 <USB_EPStartXfer+0x29a>
 800725c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007260:	2b3e      	cmp	r3, #62	; 0x3e
 8007262:	d819      	bhi.n	8007298 <USB_EPStartXfer+0x210>
 8007264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007268:	085b      	lsrs	r3, r3, #1
 800726a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800726e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d004      	beq.n	8007284 <USB_EPStartXfer+0x1fc>
 800727a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800727e:	3301      	adds	r3, #1
 8007280:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007288:	b29b      	uxth	r3, r3
 800728a:	029b      	lsls	r3, r3, #10
 800728c:	b29a      	uxth	r2, r3
 800728e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	801a      	strh	r2, [r3, #0]
 8007296:	e044      	b.n	8007322 <USB_EPStartXfer+0x29a>
 8007298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d104      	bne.n	80072b8 <USB_EPStartXfer+0x230>
 80072ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072b2:	3b01      	subs	r3, #1
 80072b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072bc:	b29b      	uxth	r3, r3
 80072be:	029b      	lsls	r3, r3, #10
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	e025      	b.n	8007322 <USB_EPStartXfer+0x29a>
 80072d6:	463b      	mov	r3, r7
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d120      	bne.n	8007322 <USB_EPStartXfer+0x29a>
 80072e0:	1d3b      	adds	r3, r7, #4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	4619      	mov	r1, r3
 80072ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80072f4:	6812      	ldr	r2, [r2, #0]
 80072f6:	440a      	add	r2, r1
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	463b      	mov	r3, r7
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	011a      	lsls	r2, r3, #4
 8007302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4413      	add	r3, r2
 800730a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800730e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007318:	b29a      	uxth	r2, r3
 800731a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007322:	463b      	mov	r3, r7
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	895b      	ldrh	r3, [r3, #10]
 8007328:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB_CDC PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800732c:	463b      	mov	r3, r7
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6959      	ldr	r1, [r3, #20]
 8007332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007336:	b29b      	uxth	r3, r3
 8007338:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800733c:	1d38      	adds	r0, r7, #4
 800733e:	6800      	ldr	r0, [r0, #0]
 8007340:	f001 fac2 	bl	80088c8 <USB_WritePMA>
            ep->xfer_buff += len;
 8007344:	463b      	mov	r3, r7
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	695a      	ldr	r2, [r3, #20]
 800734a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734e:	441a      	add	r2, r3
 8007350:	463b      	mov	r3, r7
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007356:	463b      	mov	r3, r7
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6a1a      	ldr	r2, [r3, #32]
 800735c:	463b      	mov	r3, r7
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	429a      	cmp	r2, r3
 8007364:	d909      	bls.n	800737a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8007366:	463b      	mov	r3, r7
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007370:	1ad2      	subs	r2, r2, r3
 8007372:	463b      	mov	r3, r7
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	621a      	str	r2, [r3, #32]
 8007378:	e008      	b.n	800738c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800737a:	463b      	mov	r3, r7
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007384:	463b      	mov	r3, r7
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2200      	movs	r2, #0
 800738a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800738c:	463b      	mov	r3, r7
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d17a      	bne.n	800748c <USB_EPStartXfer+0x404>
 8007396:	f107 0318 	add.w	r3, r7, #24
 800739a:	1d3a      	adds	r2, r7, #4
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	1d3b      	adds	r3, r7, #4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	4619      	mov	r1, r3
 80073ac:	f107 0318 	add.w	r3, r7, #24
 80073b0:	f107 0218 	add.w	r2, r7, #24
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	440a      	add	r2, r1
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	463b      	mov	r3, r7
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	011a      	lsls	r2, r3, #4
 80073c2:	f107 0318 	add.w	r3, r7, #24
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4413      	add	r3, r2
 80073ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80073ce:	f107 0314 	add.w	r3, r7, #20
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d11a      	bne.n	8007412 <USB_EPStartXfer+0x38a>
 80073dc:	f107 0314 	add.w	r3, r7, #20
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	f107 0314 	add.w	r3, r7, #20
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	801a      	strh	r2, [r3, #0]
 80073f4:	f107 0314 	add.w	r3, r7, #20
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007406:	b29a      	uxth	r2, r3
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e067      	b.n	80074e2 <USB_EPStartXfer+0x45a>
 8007412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007416:	2b3e      	cmp	r3, #62	; 0x3e
 8007418:	d819      	bhi.n	800744e <USB_EPStartXfer+0x3c6>
 800741a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <USB_EPStartXfer+0x3b2>
 8007430:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007434:	3301      	adds	r3, #1
 8007436:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800743a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800743e:	b29b      	uxth	r3, r3
 8007440:	029b      	lsls	r3, r3, #10
 8007442:	b29a      	uxth	r2, r3
 8007444:	f107 0314 	add.w	r3, r7, #20
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	801a      	strh	r2, [r3, #0]
 800744c:	e049      	b.n	80074e2 <USB_EPStartXfer+0x45a>
 800744e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007452:	095b      	lsrs	r3, r3, #5
 8007454:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <USB_EPStartXfer+0x3e6>
 8007464:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007468:	3b01      	subs	r3, #1
 800746a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800746e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007472:	b29b      	uxth	r3, r3
 8007474:	029b      	lsls	r3, r3, #10
 8007476:	b29b      	uxth	r3, r3
 8007478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007480:	b29a      	uxth	r2, r3
 8007482:	f107 0314 	add.w	r3, r7, #20
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	801a      	strh	r2, [r3, #0]
 800748a:	e02a      	b.n	80074e2 <USB_EPStartXfer+0x45a>
 800748c:	463b      	mov	r3, r7
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d125      	bne.n	80074e2 <USB_EPStartXfer+0x45a>
 8007496:	f107 0320 	add.w	r3, r7, #32
 800749a:	1d3a      	adds	r2, r7, #4
 800749c:	6812      	ldr	r2, [r2, #0]
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	1d3b      	adds	r3, r7, #4
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	4619      	mov	r1, r3
 80074ac:	f107 0320 	add.w	r3, r7, #32
 80074b0:	f107 0220 	add.w	r2, r7, #32
 80074b4:	6812      	ldr	r2, [r2, #0]
 80074b6:	440a      	add	r2, r1
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	463b      	mov	r3, r7
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	011a      	lsls	r2, r3, #4
 80074c2:	f107 0320 	add.w	r3, r7, #32
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4413      	add	r3, r2
 80074ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80074ce:	f107 031c 	add.w	r3, r7, #28
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d8:	b29a      	uxth	r2, r3
 80074da:	f107 031c 	add.w	r3, r7, #28
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074e2:	463b      	mov	r3, r7
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	891b      	ldrh	r3, [r3, #8]
 80074e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB_CDC PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ec:	463b      	mov	r3, r7
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6959      	ldr	r1, [r3, #20]
 80074f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074fc:	1d38      	adds	r0, r7, #4
 80074fe:	6800      	ldr	r0, [r0, #0]
 8007500:	f001 f9e2 	bl	80088c8 <USB_WritePMA>
 8007504:	f000 bcc6 	b.w	8007e94 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007508:	463b      	mov	r3, r7
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d164      	bne.n	80075dc <USB_EPStartXfer+0x554>
 8007512:	1d3b      	adds	r3, r7, #4
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	64bb      	str	r3, [r7, #72]	; 0x48
 8007518:	1d3b      	adds	r3, r7, #4
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007520:	b29b      	uxth	r3, r3
 8007522:	461a      	mov	r2, r3
 8007524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007526:	4413      	add	r3, r2
 8007528:	64bb      	str	r3, [r7, #72]	; 0x48
 800752a:	463b      	mov	r3, r7
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	011a      	lsls	r2, r3, #4
 8007532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007534:	4413      	add	r3, r2
 8007536:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800753a:	647b      	str	r3, [r7, #68]	; 0x44
 800753c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d112      	bne.n	800756a <USB_EPStartXfer+0x4e2>
 8007544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800754e:	b29a      	uxth	r2, r3
 8007550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007562:	b29a      	uxth	r2, r3
 8007564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	e057      	b.n	800761a <USB_EPStartXfer+0x592>
 800756a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800756e:	2b3e      	cmp	r3, #62	; 0x3e
 8007570:	d817      	bhi.n	80075a2 <USB_EPStartXfer+0x51a>
 8007572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007576:	085b      	lsrs	r3, r3, #1
 8007578:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800757c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d004      	beq.n	8007592 <USB_EPStartXfer+0x50a>
 8007588:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800758c:	3301      	adds	r3, #1
 800758e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007592:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007596:	b29b      	uxth	r3, r3
 8007598:	029b      	lsls	r3, r3, #10
 800759a:	b29a      	uxth	r2, r3
 800759c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	e03b      	b.n	800761a <USB_EPStartXfer+0x592>
 80075a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b0:	f003 031f 	and.w	r3, r3, #31
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <USB_EPStartXfer+0x53a>
 80075b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075bc:	3b01      	subs	r3, #1
 80075be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	029b      	lsls	r3, r3, #10
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d8:	801a      	strh	r2, [r3, #0]
 80075da:	e01e      	b.n	800761a <USB_EPStartXfer+0x592>
 80075dc:	463b      	mov	r3, r7
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d119      	bne.n	800761a <USB_EPStartXfer+0x592>
 80075e6:	1d3b      	adds	r3, r7, #4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	653b      	str	r3, [r7, #80]	; 0x50
 80075ec:	1d3b      	adds	r3, r7, #4
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075fa:	4413      	add	r3, r2
 80075fc:	653b      	str	r3, [r7, #80]	; 0x50
 80075fe:	463b      	mov	r3, r7
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	011a      	lsls	r2, r3, #4
 8007606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007608:	4413      	add	r3, r2
 800760a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800760e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007614:	b29a      	uxth	r2, r3
 8007616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007618:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800761a:	463b      	mov	r3, r7
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	891b      	ldrh	r3, [r3, #8]
 8007620:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB_CDC PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007624:	463b      	mov	r3, r7
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6959      	ldr	r1, [r3, #20]
 800762a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800762e:	b29b      	uxth	r3, r3
 8007630:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007634:	1d38      	adds	r0, r7, #4
 8007636:	6800      	ldr	r0, [r0, #0]
 8007638:	f001 f946 	bl	80088c8 <USB_WritePMA>
            ep->xfer_buff += len;
 800763c:	463b      	mov	r3, r7
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695a      	ldr	r2, [r3, #20]
 8007642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007646:	441a      	add	r2, r3
 8007648:	463b      	mov	r3, r7
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800764e:	463b      	mov	r3, r7
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6a1a      	ldr	r2, [r3, #32]
 8007654:	463b      	mov	r3, r7
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	429a      	cmp	r2, r3
 800765c:	d909      	bls.n	8007672 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800765e:	463b      	mov	r3, r7
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6a1a      	ldr	r2, [r3, #32]
 8007664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007668:	1ad2      	subs	r2, r2, r3
 800766a:	463b      	mov	r3, r7
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	621a      	str	r2, [r3, #32]
 8007670:	e008      	b.n	8007684 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007672:	463b      	mov	r3, r7
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800767c:	463b      	mov	r3, r7
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2200      	movs	r2, #0
 8007682:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007684:	1d3b      	adds	r3, r7, #4
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	643b      	str	r3, [r7, #64]	; 0x40
 800768a:	463b      	mov	r3, r7
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d164      	bne.n	800775e <USB_EPStartXfer+0x6d6>
 8007694:	1d3b      	adds	r3, r7, #4
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	63bb      	str	r3, [r7, #56]	; 0x38
 800769a:	1d3b      	adds	r3, r7, #4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	461a      	mov	r2, r3
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	4413      	add	r3, r2
 80076aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ac:	463b      	mov	r3, r7
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	011a      	lsls	r2, r3, #4
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	4413      	add	r3, r2
 80076b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
 80076be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d112      	bne.n	80076ec <USB_EPStartXfer+0x664>
 80076c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d4:	801a      	strh	r2, [r3, #0]
 80076d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e8:	801a      	strh	r2, [r3, #0]
 80076ea:	e054      	b.n	8007796 <USB_EPStartXfer+0x70e>
 80076ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f0:	2b3e      	cmp	r3, #62	; 0x3e
 80076f2:	d817      	bhi.n	8007724 <USB_EPStartXfer+0x69c>
 80076f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80076fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <USB_EPStartXfer+0x68c>
 800770a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800770e:	3301      	adds	r3, #1
 8007710:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007714:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007718:	b29b      	uxth	r3, r3
 800771a:	029b      	lsls	r3, r3, #10
 800771c:	b29a      	uxth	r2, r3
 800771e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007720:	801a      	strh	r2, [r3, #0]
 8007722:	e038      	b.n	8007796 <USB_EPStartXfer+0x70e>
 8007724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007728:	095b      	lsrs	r3, r3, #5
 800772a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800772e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007732:	f003 031f 	and.w	r3, r3, #31
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <USB_EPStartXfer+0x6bc>
 800773a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800773e:	3b01      	subs	r3, #1
 8007740:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007744:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007748:	b29b      	uxth	r3, r3
 800774a:	029b      	lsls	r3, r3, #10
 800774c:	b29b      	uxth	r3, r3
 800774e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007756:	b29a      	uxth	r2, r3
 8007758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775a:	801a      	strh	r2, [r3, #0]
 800775c:	e01b      	b.n	8007796 <USB_EPStartXfer+0x70e>
 800775e:	463b      	mov	r3, r7
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d116      	bne.n	8007796 <USB_EPStartXfer+0x70e>
 8007768:	1d3b      	adds	r3, r7, #4
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007770:	b29b      	uxth	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007776:	4413      	add	r3, r2
 8007778:	643b      	str	r3, [r7, #64]	; 0x40
 800777a:	463b      	mov	r3, r7
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	011a      	lsls	r2, r3, #4
 8007782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007784:	4413      	add	r3, r2
 8007786:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800778c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007790:	b29a      	uxth	r2, r3
 8007792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007794:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007796:	463b      	mov	r3, r7
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	895b      	ldrh	r3, [r3, #10]
 800779c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB_CDC PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077a0:	463b      	mov	r3, r7
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6959      	ldr	r1, [r3, #20]
 80077a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077b0:	1d38      	adds	r0, r7, #4
 80077b2:	6800      	ldr	r0, [r0, #0]
 80077b4:	f001 f888 	bl	80088c8 <USB_WritePMA>
 80077b8:	e36c      	b.n	8007e94 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80077ba:	463b      	mov	r3, r7
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80077c4:	1d3b      	adds	r3, r7, #4
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	463b      	mov	r3, r7
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80077da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077de:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80077e2:	1d3b      	adds	r3, r7, #4
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	463b      	mov	r3, r7
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	441a      	add	r2, r3
 80077f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80077f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007804:	b29b      	uxth	r3, r3
 8007806:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007808:	1d3b      	adds	r3, r7, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800780e:	1d3b      	adds	r3, r7, #4
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007816:	b29b      	uxth	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800781c:	4413      	add	r3, r2
 800781e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007820:	463b      	mov	r3, r7
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	011a      	lsls	r2, r3, #4
 8007828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800782a:	4413      	add	r3, r2
 800782c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007830:	65bb      	str	r3, [r7, #88]	; 0x58
 8007832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007836:	b29a      	uxth	r2, r3
 8007838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800783a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800783c:	463b      	mov	r3, r7
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	891b      	ldrh	r3, [r3, #8]
 8007842:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB_CDC PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007846:	463b      	mov	r3, r7
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6959      	ldr	r1, [r3, #20]
 800784c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007850:	b29b      	uxth	r3, r3
 8007852:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007856:	1d38      	adds	r0, r7, #4
 8007858:	6800      	ldr	r0, [r0, #0]
 800785a:	f001 f835 	bl	80088c8 <USB_WritePMA>
 800785e:	e319      	b.n	8007e94 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007860:	1d3b      	adds	r3, r7, #4
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	463b      	mov	r3, r7
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29b      	uxth	r3, r3
 8007872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800787e:	1d3b      	adds	r3, r7, #4
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	463b      	mov	r3, r7
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	441a      	add	r2, r3
 800788c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007898:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800789c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80078a4:	463b      	mov	r3, r7
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6a1a      	ldr	r2, [r3, #32]
 80078aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	463b      	mov	r3, r7
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078b6:	1d3b      	adds	r3, r7, #4
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	463b      	mov	r3, r7
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 8162 	beq.w	8007b96 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078d2:	1d3b      	adds	r3, r7, #4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078da:	463b      	mov	r3, r7
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	785b      	ldrb	r3, [r3, #1]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d164      	bne.n	80079ae <USB_EPStartXfer+0x926>
 80078e4:	1d3b      	adds	r3, r7, #4
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80078ea:	1d3b      	adds	r3, r7, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078f8:	4413      	add	r3, r2
 80078fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80078fc:	463b      	mov	r3, r7
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	011a      	lsls	r2, r3, #4
 8007904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007906:	4413      	add	r3, r2
 8007908:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800790c:	677b      	str	r3, [r7, #116]	; 0x74
 800790e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d112      	bne.n	800793c <USB_EPStartXfer+0x8b4>
 8007916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007920:	b29a      	uxth	r2, r3
 8007922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007924:	801a      	strh	r2, [r3, #0]
 8007926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007934:	b29a      	uxth	r2, r3
 8007936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007938:	801a      	strh	r2, [r3, #0]
 800793a:	e057      	b.n	80079ec <USB_EPStartXfer+0x964>
 800793c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007940:	2b3e      	cmp	r3, #62	; 0x3e
 8007942:	d817      	bhi.n	8007974 <USB_EPStartXfer+0x8ec>
 8007944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007948:	085b      	lsrs	r3, r3, #1
 800794a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800794e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <USB_EPStartXfer+0x8dc>
 800795a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800795e:	3301      	adds	r3, #1
 8007960:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007964:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007968:	b29b      	uxth	r3, r3
 800796a:	029b      	lsls	r3, r3, #10
 800796c:	b29a      	uxth	r2, r3
 800796e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	e03b      	b.n	80079ec <USB_EPStartXfer+0x964>
 8007974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007978:	095b      	lsrs	r3, r3, #5
 800797a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800797e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007982:	f003 031f 	and.w	r3, r3, #31
 8007986:	2b00      	cmp	r3, #0
 8007988:	d104      	bne.n	8007994 <USB_EPStartXfer+0x90c>
 800798a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800798e:	3b01      	subs	r3, #1
 8007990:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007994:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007998:	b29b      	uxth	r3, r3
 800799a:	029b      	lsls	r3, r3, #10
 800799c:	b29b      	uxth	r3, r3
 800799e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	e01e      	b.n	80079ec <USB_EPStartXfer+0x964>
 80079ae:	463b      	mov	r3, r7
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	785b      	ldrb	r3, [r3, #1]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d119      	bne.n	80079ec <USB_EPStartXfer+0x964>
 80079b8:	1d3b      	adds	r3, r7, #4
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	461a      	mov	r2, r3
 80079c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079c8:	4413      	add	r3, r2
 80079ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079ce:	463b      	mov	r3, r7
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	011a      	lsls	r2, r3, #4
 80079d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079da:	4413      	add	r3, r2
 80079dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80079ec:	463b      	mov	r3, r7
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	895b      	ldrh	r3, [r3, #10]
 80079f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB_CDC PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079f6:	463b      	mov	r3, r7
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6959      	ldr	r1, [r3, #20]
 80079fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a06:	1d38      	adds	r0, r7, #4
 8007a08:	6800      	ldr	r0, [r0, #0]
 8007a0a:	f000 ff5d 	bl	80088c8 <USB_WritePMA>
          ep->xfer_buff += len;
 8007a0e:	463b      	mov	r3, r7
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	695a      	ldr	r2, [r3, #20]
 8007a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a18:	441a      	add	r2, r3
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007a20:	463b      	mov	r3, r7
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	463b      	mov	r3, r7
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d909      	bls.n	8007a44 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007a30:	463b      	mov	r3, r7
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6a1a      	ldr	r2, [r3, #32]
 8007a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a3a:	1ad2      	subs	r2, r2, r3
 8007a3c:	463b      	mov	r3, r7
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	621a      	str	r2, [r3, #32]
 8007a42:	e008      	b.n	8007a56 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007a44:	463b      	mov	r3, r7
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007a4e:	463b      	mov	r3, r7
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2200      	movs	r2, #0
 8007a54:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 821a 	beq.w	8007e94 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a60:	463b      	mov	r3, r7
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d164      	bne.n	8007b34 <USB_EPStartXfer+0xaac>
 8007a6a:	1d3b      	adds	r3, r7, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a70:	1d3b      	adds	r3, r7, #4
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a7e:	4413      	add	r3, r2
 8007a80:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a82:	463b      	mov	r3, r7
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	011a      	lsls	r2, r3, #4
 8007a8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a92:	667b      	str	r3, [r7, #100]	; 0x64
 8007a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d112      	bne.n	8007ac2 <USB_EPStartXfer+0xa3a>
 8007a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	e057      	b.n	8007b72 <USB_EPStartXfer+0xaea>
 8007ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ac8:	d817      	bhi.n	8007afa <USB_EPStartXfer+0xa72>
 8007aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ace:	085b      	lsrs	r3, r3, #1
 8007ad0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d004      	beq.n	8007aea <USB_EPStartXfer+0xa62>
 8007ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	029b      	lsls	r3, r3, #10
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007af6:	801a      	strh	r2, [r3, #0]
 8007af8:	e03b      	b.n	8007b72 <USB_EPStartXfer+0xaea>
 8007afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b08:	f003 031f 	and.w	r3, r3, #31
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d104      	bne.n	8007b1a <USB_EPStartXfer+0xa92>
 8007b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b14:	3b01      	subs	r3, #1
 8007b16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	029b      	lsls	r3, r3, #10
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b30:	801a      	strh	r2, [r3, #0]
 8007b32:	e01e      	b.n	8007b72 <USB_EPStartXfer+0xaea>
 8007b34:	463b      	mov	r3, r7
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d119      	bne.n	8007b72 <USB_EPStartXfer+0xaea>
 8007b3e:	1d3b      	adds	r3, r7, #4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	673b      	str	r3, [r7, #112]	; 0x70
 8007b44:	1d3b      	adds	r3, r7, #4
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b52:	4413      	add	r3, r2
 8007b54:	673b      	str	r3, [r7, #112]	; 0x70
 8007b56:	463b      	mov	r3, r7
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	011a      	lsls	r2, r3, #4
 8007b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b60:	4413      	add	r3, r2
 8007b62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b72:	463b      	mov	r3, r7
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	891b      	ldrh	r3, [r3, #8]
 8007b78:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB_CDC PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b7c:	463b      	mov	r3, r7
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6959      	ldr	r1, [r3, #20]
 8007b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b8c:	1d38      	adds	r0, r7, #4
 8007b8e:	6800      	ldr	r0, [r0, #0]
 8007b90:	f000 fe9a 	bl	80088c8 <USB_WritePMA>
 8007b94:	e17e      	b.n	8007e94 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b96:	463b      	mov	r3, r7
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d16f      	bne.n	8007c80 <USB_EPStartXfer+0xbf8>
 8007ba0:	1d3b      	adds	r3, r7, #4
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ba8:	1d3b      	adds	r3, r7, #4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bb8:	4413      	add	r3, r2
 8007bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bbe:	463b      	mov	r3, r7
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	011a      	lsls	r2, r3, #4
 8007bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bca:	4413      	add	r3, r2
 8007bcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d116      	bne.n	8007c0a <USB_EPStartXfer+0xb82>
 8007bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bee:	801a      	strh	r2, [r3, #0]
 8007bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c06:	801a      	strh	r2, [r3, #0]
 8007c08:	e05f      	b.n	8007cca <USB_EPStartXfer+0xc42>
 8007c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c10:	d818      	bhi.n	8007c44 <USB_EPStartXfer+0xbbc>
 8007c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <USB_EPStartXfer+0xbaa>
 8007c28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	029b      	lsls	r3, r3, #10
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c40:	801a      	strh	r2, [r3, #0]
 8007c42:	e042      	b.n	8007cca <USB_EPStartXfer+0xc42>
 8007c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c48:	095b      	lsrs	r3, r3, #5
 8007c4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c52:	f003 031f 	and.w	r3, r3, #31
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d104      	bne.n	8007c64 <USB_EPStartXfer+0xbdc>
 8007c5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	029b      	lsls	r3, r3, #10
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c7c:	801a      	strh	r2, [r3, #0]
 8007c7e:	e024      	b.n	8007cca <USB_EPStartXfer+0xc42>
 8007c80:	463b      	mov	r3, r7
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d11f      	bne.n	8007cca <USB_EPStartXfer+0xc42>
 8007c8a:	1d3b      	adds	r3, r7, #4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c92:	1d3b      	adds	r3, r7, #4
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ca8:	463b      	mov	r3, r7
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	011a      	lsls	r2, r3, #4
 8007cb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cc8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007cca:	463b      	mov	r3, r7
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	891b      	ldrh	r3, [r3, #8]
 8007cd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB_CDC PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cd4:	463b      	mov	r3, r7
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6959      	ldr	r1, [r3, #20]
 8007cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ce4:	1d38      	adds	r0, r7, #4
 8007ce6:	6800      	ldr	r0, [r0, #0]
 8007ce8:	f000 fdee 	bl	80088c8 <USB_WritePMA>
          ep->xfer_buff += len;
 8007cec:	463b      	mov	r3, r7
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	695a      	ldr	r2, [r3, #20]
 8007cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf6:	441a      	add	r2, r3
 8007cf8:	463b      	mov	r3, r7
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007cfe:	463b      	mov	r3, r7
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6a1a      	ldr	r2, [r3, #32]
 8007d04:	463b      	mov	r3, r7
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d909      	bls.n	8007d22 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8007d0e:	463b      	mov	r3, r7
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6a1a      	ldr	r2, [r3, #32]
 8007d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d18:	1ad2      	subs	r2, r2, r3
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	621a      	str	r2, [r3, #32]
 8007d20:	e008      	b.n	8007d34 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007d22:	463b      	mov	r3, r7
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007d2c:	463b      	mov	r3, r7
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2200      	movs	r2, #0
 8007d32:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 80ab 	beq.w	8007e94 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d3e:	1d3b      	adds	r3, r7, #4
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d46:	463b      	mov	r3, r7
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	785b      	ldrb	r3, [r3, #1]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d16f      	bne.n	8007e30 <USB_EPStartXfer+0xda8>
 8007d50:	1d3b      	adds	r3, r7, #4
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d58:	1d3b      	adds	r3, r7, #4
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d68:	4413      	add	r3, r2
 8007d6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d6e:	463b      	mov	r3, r7
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	011a      	lsls	r2, r3, #4
 8007d76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d116      	bne.n	8007dba <USB_EPStartXfer+0xd32>
 8007d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007db6:	801a      	strh	r2, [r3, #0]
 8007db8:	e05b      	b.n	8007e72 <USB_EPStartXfer+0xdea>
 8007dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8007dc0:	d818      	bhi.n	8007df4 <USB_EPStartXfer+0xd6c>
 8007dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc6:	085b      	lsrs	r3, r3, #1
 8007dc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d004      	beq.n	8007de2 <USB_EPStartXfer+0xd5a>
 8007dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ddc:	3301      	adds	r3, #1
 8007dde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	029b      	lsls	r3, r3, #10
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007df0:	801a      	strh	r2, [r3, #0]
 8007df2:	e03e      	b.n	8007e72 <USB_EPStartXfer+0xdea>
 8007df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e02:	f003 031f 	and.w	r3, r3, #31
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d104      	bne.n	8007e14 <USB_EPStartXfer+0xd8c>
 8007e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	029b      	lsls	r3, r3, #10
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e2c:	801a      	strh	r2, [r3, #0]
 8007e2e:	e020      	b.n	8007e72 <USB_EPStartXfer+0xdea>
 8007e30:	463b      	mov	r3, r7
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	785b      	ldrb	r3, [r3, #1]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d11b      	bne.n	8007e72 <USB_EPStartXfer+0xdea>
 8007e3a:	1d3b      	adds	r3, r7, #4
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	461a      	mov	r2, r3
 8007e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e50:	463b      	mov	r3, r7
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	011a      	lsls	r2, r3, #4
 8007e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e72:	463b      	mov	r3, r7
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	895b      	ldrh	r3, [r3, #10]
 8007e78:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB_CDC PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6959      	ldr	r1, [r3, #20]
 8007e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e8c:	1d38      	adds	r0, r7, #4
 8007e8e:	6800      	ldr	r0, [r0, #0]
 8007e90:	f000 fd1a 	bl	80088c8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007e94:	1d3b      	adds	r3, r7, #4
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	463b      	mov	r3, r7
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f107 020a 	add.w	r2, r7, #10
 8007eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb2:	8013      	strh	r3, [r2, #0]
 8007eb4:	f107 030a 	add.w	r3, r7, #10
 8007eb8:	f107 020a 	add.w	r2, r7, #10
 8007ebc:	8812      	ldrh	r2, [r2, #0]
 8007ebe:	f082 0210 	eor.w	r2, r2, #16
 8007ec2:	801a      	strh	r2, [r3, #0]
 8007ec4:	f107 030a 	add.w	r3, r7, #10
 8007ec8:	f107 020a 	add.w	r2, r7, #10
 8007ecc:	8812      	ldrh	r2, [r2, #0]
 8007ece:	f082 0220 	eor.w	r2, r2, #32
 8007ed2:	801a      	strh	r2, [r3, #0]
 8007ed4:	1d3b      	adds	r3, r7, #4
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	463b      	mov	r3, r7
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	441a      	add	r2, r3
 8007ee2:	f107 030a 	add.w	r3, r7, #10
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	8013      	strh	r3, [r2, #0]
 8007efc:	e3b5      	b.n	800866a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007efe:	463b      	mov	r3, r7
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	7b1b      	ldrb	r3, [r3, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f040 8090 	bne.w	800802a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007f0a:	463b      	mov	r3, r7
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	699a      	ldr	r2, [r3, #24]
 8007f10:	463b      	mov	r3, r7
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d90e      	bls.n	8007f38 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007f24:	463b      	mov	r3, r7
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f2e:	1ad2      	subs	r2, r2, r3
 8007f30:	463b      	mov	r3, r7
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	619a      	str	r2, [r3, #24]
 8007f36:	e008      	b.n	8007f4a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8007f38:	463b      	mov	r3, r7
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007f42:	463b      	mov	r3, r7
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2200      	movs	r2, #0
 8007f48:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007f4a:	1d3b      	adds	r3, r7, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f52:	1d3b      	adds	r3, r7, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f62:	4413      	add	r3, r2
 8007f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f68:	463b      	mov	r3, r7
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	011a      	lsls	r2, r3, #4
 8007f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f74:	4413      	add	r3, r2
 8007f76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d116      	bne.n	8007fb4 <USB_EPStartXfer+0xf2c>
 8007f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f98:	801a      	strh	r2, [r3, #0]
 8007f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fb0:	801a      	strh	r2, [r3, #0]
 8007fb2:	e32c      	b.n	800860e <USB_EPStartXfer+0x1586>
 8007fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8007fba:	d818      	bhi.n	8007fee <USB_EPStartXfer+0xf66>
 8007fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc0:	085b      	lsrs	r3, r3, #1
 8007fc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d004      	beq.n	8007fdc <USB_EPStartXfer+0xf54>
 8007fd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007fdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	029b      	lsls	r3, r3, #10
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fea:	801a      	strh	r2, [r3, #0]
 8007fec:	e30f      	b.n	800860e <USB_EPStartXfer+0x1586>
 8007fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff2:	095b      	lsrs	r3, r3, #5
 8007ff4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffc:	f003 031f 	and.w	r3, r3, #31
 8008000:	2b00      	cmp	r3, #0
 8008002:	d104      	bne.n	800800e <USB_EPStartXfer+0xf86>
 8008004:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008008:	3b01      	subs	r3, #1
 800800a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800800e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008012:	b29b      	uxth	r3, r3
 8008014:	029b      	lsls	r3, r3, #10
 8008016:	b29b      	uxth	r3, r3
 8008018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800801c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008020:	b29a      	uxth	r2, r3
 8008022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008026:	801a      	strh	r2, [r3, #0]
 8008028:	e2f1      	b.n	800860e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800802a:	463b      	mov	r3, r7
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	78db      	ldrb	r3, [r3, #3]
 8008030:	2b02      	cmp	r3, #2
 8008032:	f040 818f 	bne.w	8008354 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008036:	463b      	mov	r3, r7
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d175      	bne.n	800812c <USB_EPStartXfer+0x10a4>
 8008040:	1d3b      	adds	r3, r7, #4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008048:	1d3b      	adds	r3, r7, #4
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008050:	b29b      	uxth	r3, r3
 8008052:	461a      	mov	r2, r3
 8008054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008058:	4413      	add	r3, r2
 800805a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800805e:	463b      	mov	r3, r7
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	011a      	lsls	r2, r3, #4
 8008066:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800806a:	4413      	add	r3, r2
 800806c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008074:	463b      	mov	r3, r7
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d116      	bne.n	80080ac <USB_EPStartXfer+0x1024>
 800807e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800808a:	b29a      	uxth	r2, r3
 800808c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008090:	801a      	strh	r2, [r3, #0]
 8008092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800809e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080a8:	801a      	strh	r2, [r3, #0]
 80080aa:	e065      	b.n	8008178 <USB_EPStartXfer+0x10f0>
 80080ac:	463b      	mov	r3, r7
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b3e      	cmp	r3, #62	; 0x3e
 80080b4:	d81a      	bhi.n	80080ec <USB_EPStartXfer+0x1064>
 80080b6:	463b      	mov	r3, r7
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	085b      	lsrs	r3, r3, #1
 80080be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080c2:	463b      	mov	r3, r7
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d004      	beq.n	80080da <USB_EPStartXfer+0x1052>
 80080d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d4:	3301      	adds	r3, #1
 80080d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080de:	b29b      	uxth	r3, r3
 80080e0:	029b      	lsls	r3, r3, #10
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080e8:	801a      	strh	r2, [r3, #0]
 80080ea:	e045      	b.n	8008178 <USB_EPStartXfer+0x10f0>
 80080ec:	463b      	mov	r3, r7
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080f8:	463b      	mov	r3, r7
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	2b00      	cmp	r3, #0
 8008104:	d104      	bne.n	8008110 <USB_EPStartXfer+0x1088>
 8008106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800810a:	3b01      	subs	r3, #1
 800810c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008114:	b29b      	uxth	r3, r3
 8008116:	029b      	lsls	r3, r3, #10
 8008118:	b29b      	uxth	r3, r3
 800811a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800811e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008122:	b29a      	uxth	r2, r3
 8008124:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008128:	801a      	strh	r2, [r3, #0]
 800812a:	e025      	b.n	8008178 <USB_EPStartXfer+0x10f0>
 800812c:	463b      	mov	r3, r7
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	785b      	ldrb	r3, [r3, #1]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d120      	bne.n	8008178 <USB_EPStartXfer+0x10f0>
 8008136:	1d3b      	adds	r3, r7, #4
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800813e:	1d3b      	adds	r3, r7, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008146:	b29b      	uxth	r3, r3
 8008148:	461a      	mov	r2, r3
 800814a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800814e:	4413      	add	r3, r2
 8008150:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008154:	463b      	mov	r3, r7
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	011a      	lsls	r2, r3, #4
 800815c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008160:	4413      	add	r3, r2
 8008162:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008166:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800816a:	463b      	mov	r3, r7
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	b29a      	uxth	r2, r3
 8008172:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008176:	801a      	strh	r2, [r3, #0]
 8008178:	1d3b      	adds	r3, r7, #4
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008180:	463b      	mov	r3, r7
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d175      	bne.n	8008276 <USB_EPStartXfer+0x11ee>
 800818a:	1d3b      	adds	r3, r7, #4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008192:	1d3b      	adds	r3, r7, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800819a:	b29b      	uxth	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081a2:	4413      	add	r3, r2
 80081a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081a8:	463b      	mov	r3, r7
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	011a      	lsls	r2, r3, #4
 80081b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081b4:	4413      	add	r3, r2
 80081b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081be:	463b      	mov	r3, r7
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d116      	bne.n	80081f6 <USB_EPStartXfer+0x116e>
 80081c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081cc:	881b      	ldrh	r3, [r3, #0]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081da:	801a      	strh	r2, [r3, #0]
 80081dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081f2:	801a      	strh	r2, [r3, #0]
 80081f4:	e061      	b.n	80082ba <USB_EPStartXfer+0x1232>
 80081f6:	463b      	mov	r3, r7
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b3e      	cmp	r3, #62	; 0x3e
 80081fe:	d81a      	bhi.n	8008236 <USB_EPStartXfer+0x11ae>
 8008200:	463b      	mov	r3, r7
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800820c:	463b      	mov	r3, r7
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <USB_EPStartXfer+0x119c>
 800821a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800821e:	3301      	adds	r3, #1
 8008220:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008224:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008228:	b29b      	uxth	r3, r3
 800822a:	029b      	lsls	r3, r3, #10
 800822c:	b29a      	uxth	r2, r3
 800822e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008232:	801a      	strh	r2, [r3, #0]
 8008234:	e041      	b.n	80082ba <USB_EPStartXfer+0x1232>
 8008236:	463b      	mov	r3, r7
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008242:	463b      	mov	r3, r7
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f003 031f 	and.w	r3, r3, #31
 800824c:	2b00      	cmp	r3, #0
 800824e:	d104      	bne.n	800825a <USB_EPStartXfer+0x11d2>
 8008250:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008254:	3b01      	subs	r3, #1
 8008256:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800825a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800825e:	b29b      	uxth	r3, r3
 8008260:	029b      	lsls	r3, r3, #10
 8008262:	b29b      	uxth	r3, r3
 8008264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826c:	b29a      	uxth	r2, r3
 800826e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	e021      	b.n	80082ba <USB_EPStartXfer+0x1232>
 8008276:	463b      	mov	r3, r7
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	785b      	ldrb	r3, [r3, #1]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d11c      	bne.n	80082ba <USB_EPStartXfer+0x1232>
 8008280:	1d3b      	adds	r3, r7, #4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008288:	b29b      	uxth	r3, r3
 800828a:	461a      	mov	r2, r3
 800828c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008290:	4413      	add	r3, r2
 8008292:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008296:	463b      	mov	r3, r7
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	011a      	lsls	r2, r3, #4
 800829e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082a2:	4413      	add	r3, r2
 80082a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082ac:	463b      	mov	r3, r7
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082b8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80082ba:	463b      	mov	r3, r7
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 81a4 	beq.w	800860e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80082c6:	1d3b      	adds	r3, r7, #4
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	463b      	mov	r3, r7
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082da:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <USB_EPStartXfer+0x126a>
 80082e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10d      	bne.n	800830e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082f2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f040 8187 	bne.w	800860e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008300:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	f040 8180 	bne.w	800860e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800830e:	1d3b      	adds	r3, r7, #4
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	463b      	mov	r3, r7
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	b29b      	uxth	r3, r3
 8008320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008328:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800832c:	1d3b      	adds	r3, r7, #4
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	463b      	mov	r3, r7
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	441a      	add	r2, r3
 800833a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800833e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800834a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800834e:	b29b      	uxth	r3, r3
 8008350:	8013      	strh	r3, [r2, #0]
 8008352:	e15c      	b.n	800860e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008354:	463b      	mov	r3, r7
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	78db      	ldrb	r3, [r3, #3]
 800835a:	2b01      	cmp	r3, #1
 800835c:	f040 8155 	bne.w	800860a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008360:	463b      	mov	r3, r7
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	463b      	mov	r3, r7
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	429a      	cmp	r2, r3
 800836e:	d90e      	bls.n	800838e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008370:	463b      	mov	r3, r7
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800837a:	463b      	mov	r3, r7
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	699a      	ldr	r2, [r3, #24]
 8008380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008384:	1ad2      	subs	r2, r2, r3
 8008386:	463b      	mov	r3, r7
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	619a      	str	r2, [r3, #24]
 800838c:	e008      	b.n	80083a0 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800838e:	463b      	mov	r3, r7
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008398:	463b      	mov	r3, r7
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2200      	movs	r2, #0
 800839e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80083a0:	463b      	mov	r3, r7
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d16f      	bne.n	800848a <USB_EPStartXfer+0x1402>
 80083aa:	1d3b      	adds	r3, r7, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083b2:	1d3b      	adds	r3, r7, #4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	461a      	mov	r2, r3
 80083be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083c2:	4413      	add	r3, r2
 80083c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083c8:	463b      	mov	r3, r7
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	011a      	lsls	r2, r3, #4
 80083d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083d4:	4413      	add	r3, r2
 80083d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d116      	bne.n	8008414 <USB_EPStartXfer+0x138c>
 80083e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083f8:	801a      	strh	r2, [r3, #0]
 80083fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800840a:	b29a      	uxth	r2, r3
 800840c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008410:	801a      	strh	r2, [r3, #0]
 8008412:	e05f      	b.n	80084d4 <USB_EPStartXfer+0x144c>
 8008414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008418:	2b3e      	cmp	r3, #62	; 0x3e
 800841a:	d818      	bhi.n	800844e <USB_EPStartXfer+0x13c6>
 800841c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008420:	085b      	lsrs	r3, r3, #1
 8008422:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d004      	beq.n	800843c <USB_EPStartXfer+0x13b4>
 8008432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008436:	3301      	adds	r3, #1
 8008438:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800843c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008440:	b29b      	uxth	r3, r3
 8008442:	029b      	lsls	r3, r3, #10
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800844a:	801a      	strh	r2, [r3, #0]
 800844c:	e042      	b.n	80084d4 <USB_EPStartXfer+0x144c>
 800844e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008452:	095b      	lsrs	r3, r3, #5
 8008454:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800845c:	f003 031f 	and.w	r3, r3, #31
 8008460:	2b00      	cmp	r3, #0
 8008462:	d104      	bne.n	800846e <USB_EPStartXfer+0x13e6>
 8008464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008468:	3b01      	subs	r3, #1
 800846a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800846e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008472:	b29b      	uxth	r3, r3
 8008474:	029b      	lsls	r3, r3, #10
 8008476:	b29b      	uxth	r3, r3
 8008478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008480:	b29a      	uxth	r2, r3
 8008482:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008486:	801a      	strh	r2, [r3, #0]
 8008488:	e024      	b.n	80084d4 <USB_EPStartXfer+0x144c>
 800848a:	463b      	mov	r3, r7
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	785b      	ldrb	r3, [r3, #1]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d11f      	bne.n	80084d4 <USB_EPStartXfer+0x144c>
 8008494:	1d3b      	adds	r3, r7, #4
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800849c:	1d3b      	adds	r3, r7, #4
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ac:	4413      	add	r3, r2
 80084ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084b2:	463b      	mov	r3, r7
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	011a      	lsls	r2, r3, #4
 80084ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084be:	4413      	add	r3, r2
 80084c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80084c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80084d2:	801a      	strh	r2, [r3, #0]
 80084d4:	1d3b      	adds	r3, r7, #4
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084dc:	463b      	mov	r3, r7
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	785b      	ldrb	r3, [r3, #1]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d16f      	bne.n	80085c6 <USB_EPStartXfer+0x153e>
 80084e6:	1d3b      	adds	r3, r7, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084ee:	1d3b      	adds	r3, r7, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084fe:	4413      	add	r3, r2
 8008500:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008504:	463b      	mov	r3, r7
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	011a      	lsls	r2, r3, #4
 800850c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008510:	4413      	add	r3, r2
 8008512:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800851a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d116      	bne.n	8008550 <USB_EPStartXfer+0x14c8>
 8008522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800852e:	b29a      	uxth	r2, r3
 8008530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008534:	801a      	strh	r2, [r3, #0]
 8008536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b29b      	uxth	r3, r3
 800853e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008546:	b29a      	uxth	r2, r3
 8008548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800854c:	801a      	strh	r2, [r3, #0]
 800854e:	e05e      	b.n	800860e <USB_EPStartXfer+0x1586>
 8008550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008554:	2b3e      	cmp	r3, #62	; 0x3e
 8008556:	d818      	bhi.n	800858a <USB_EPStartXfer+0x1502>
 8008558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800855c:	085b      	lsrs	r3, r3, #1
 800855e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d004      	beq.n	8008578 <USB_EPStartXfer+0x14f0>
 800856e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008572:	3301      	adds	r3, #1
 8008574:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008578:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800857c:	b29b      	uxth	r3, r3
 800857e:	029b      	lsls	r3, r3, #10
 8008580:	b29a      	uxth	r2, r3
 8008582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	e041      	b.n	800860e <USB_EPStartXfer+0x1586>
 800858a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008598:	f003 031f 	and.w	r3, r3, #31
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <USB_EPStartXfer+0x1522>
 80085a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085a4:	3b01      	subs	r3, #1
 80085a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	029b      	lsls	r3, r3, #10
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085bc:	b29a      	uxth	r2, r3
 80085be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085c2:	801a      	strh	r2, [r3, #0]
 80085c4:	e023      	b.n	800860e <USB_EPStartXfer+0x1586>
 80085c6:	463b      	mov	r3, r7
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d11e      	bne.n	800860e <USB_EPStartXfer+0x1586>
 80085d0:	1d3b      	adds	r3, r7, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d8:	b29b      	uxth	r3, r3
 80085da:	461a      	mov	r2, r3
 80085dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e0:	4413      	add	r3, r2
 80085e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085e6:	463b      	mov	r3, r7
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	011a      	lsls	r2, r3, #4
 80085ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f2:	4413      	add	r3, r2
 80085f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008600:	b29a      	uxth	r2, r3
 8008602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008606:	801a      	strh	r2, [r3, #0]
 8008608:	e001      	b.n	800860e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e02e      	b.n	800866c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800860e:	1d3b      	adds	r3, r7, #4
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	463b      	mov	r3, r7
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b29b      	uxth	r3, r3
 8008620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008628:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800862c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008630:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008634:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008638:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800863c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008640:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008644:	1d3b      	adds	r3, r7, #4
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	463b      	mov	r3, r7
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	441a      	add	r2, r3
 8008652:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008666:	b29b      	uxth	r3, r3
 8008668:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	785b      	ldrb	r3, [r3, #1]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d020      	beq.n	80086ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869e:	81bb      	strh	r3, [r7, #12]
 80086a0:	89bb      	ldrh	r3, [r7, #12]
 80086a2:	f083 0310 	eor.w	r3, r3, #16
 80086a6:	81bb      	strh	r3, [r7, #12]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	441a      	add	r2, r3
 80086b2:	89bb      	ldrh	r3, [r7, #12]
 80086b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	8013      	strh	r3, [r2, #0]
 80086c8:	e01f      	b.n	800870a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e0:	81fb      	strh	r3, [r7, #14]
 80086e2:	89fb      	ldrh	r3, [r7, #14]
 80086e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086e8:	81fb      	strh	r3, [r7, #14]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	441a      	add	r2, r3
 80086f4:	89fb      	ldrh	r3, [r7, #14]
 80086f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008706:	b29b      	uxth	r3, r3
 8008708:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr

08008716 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008716:	b480      	push	{r7}
 8008718:	b087      	sub	sp, #28
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	7b1b      	ldrb	r3, [r3, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	f040 809d 	bne.w	8008864 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d04c      	beq.n	80087cc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	823b      	strh	r3, [r7, #16]
 8008740:	8a3b      	ldrh	r3, [r7, #16]
 8008742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01b      	beq.n	8008782 <USB_EPClearStall+0x6c>
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800875c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008760:	81fb      	strh	r3, [r7, #14]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	441a      	add	r2, r3
 800876c:	89fb      	ldrh	r3, [r7, #14]
 800876e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800877a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800877e:	b29b      	uxth	r3, r3
 8008780:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	78db      	ldrb	r3, [r3, #3]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d06c      	beq.n	8008864 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	b29b      	uxth	r3, r3
 8008798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800879c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a0:	81bb      	strh	r3, [r7, #12]
 80087a2:	89bb      	ldrh	r3, [r7, #12]
 80087a4:	f083 0320 	eor.w	r3, r3, #32
 80087a8:	81bb      	strh	r3, [r7, #12]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	441a      	add	r2, r3
 80087b4:	89bb      	ldrh	r3, [r7, #12]
 80087b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	8013      	strh	r3, [r2, #0]
 80087ca:	e04b      	b.n	8008864 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	82fb      	strh	r3, [r7, #22]
 80087da:	8afb      	ldrh	r3, [r7, #22]
 80087dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d01b      	beq.n	800881c <USB_EPClearStall+0x106>
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fa:	82bb      	strh	r3, [r7, #20]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	441a      	add	r2, r3
 8008806:	8abb      	ldrh	r3, [r7, #20]
 8008808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800880c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008818:	b29b      	uxth	r3, r3
 800881a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	b29b      	uxth	r3, r3
 800882a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800882e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008832:	827b      	strh	r3, [r7, #18]
 8008834:	8a7b      	ldrh	r3, [r7, #18]
 8008836:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800883a:	827b      	strh	r3, [r7, #18]
 800883c:	8a7b      	ldrh	r3, [r7, #18]
 800883e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008842:	827b      	strh	r3, [r7, #18]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	441a      	add	r2, r3
 800884e:	8a7b      	ldrh	r3, [r7, #18]
 8008850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800885c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008860:	b29b      	uxth	r3, r3
 8008862:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	371c      	adds	r7, #28
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr

08008870 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2280      	movs	r2, #128	; 0x80
 8008886:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	bc80      	pop	{r7}
 8008894:	4770      	bx	lr

08008896 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB_CDC device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB_CDC Device FS peripheral, it is used
              only by USB_CDC OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bc80      	pop	{r7}
 80088a8:	4770      	bx	lr

080088aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB_CDC interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b085      	sub	sp, #20
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80088bc:	68fb      	ldr	r3, [r7, #12]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bc80      	pop	{r7}
 80088c6:	4770      	bx	lr

080088c8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b08d      	sub	sp, #52	; 0x34
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	4611      	mov	r1, r2
 80088d4:	461a      	mov	r2, r3
 80088d6:	460b      	mov	r3, r1
 80088d8:	80fb      	strh	r3, [r7, #6]
 80088da:	4613      	mov	r3, r2
 80088dc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80088de:	88bb      	ldrh	r3, [r7, #4]
 80088e0:	3301      	adds	r3, #1
 80088e2:	085b      	lsrs	r3, r3, #1
 80088e4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80088ee:	88fb      	ldrh	r3, [r7, #6]
 80088f0:	005a      	lsls	r2, r3, #1
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008900:	e01e      	b.n	8008940 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	3301      	adds	r3, #1
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	b29b      	uxth	r3, r3
 8008914:	021b      	lsls	r3, r3, #8
 8008916:	b29b      	uxth	r3, r3
 8008918:	461a      	mov	r2, r3
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	4313      	orrs	r3, r2
 800891e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	b29a      	uxth	r2, r3
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	3302      	adds	r3, #2
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800892e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008930:	3302      	adds	r3, #2
 8008932:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	3301      	adds	r3, #1
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	3b01      	subs	r3, #1
 800893e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1dd      	bne.n	8008902 <USB_WritePMA+0x3a>
  }
}
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	3734      	adds	r7, #52	; 0x34
 800894c:	46bd      	mov	sp, r7
 800894e:	bc80      	pop	{r7}
 8008950:	4770      	bx	lr

08008952 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008952:	b480      	push	{r7}
 8008954:	b08b      	sub	sp, #44	; 0x2c
 8008956:	af00      	add	r7, sp, #0
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	4611      	mov	r1, r2
 800895e:	461a      	mov	r2, r3
 8008960:	460b      	mov	r3, r1
 8008962:	80fb      	strh	r3, [r7, #6]
 8008964:	4613      	mov	r3, r2
 8008966:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008968:	88bb      	ldrh	r3, [r7, #4]
 800896a:	085b      	lsrs	r3, r3, #1
 800896c:	b29b      	uxth	r3, r3
 800896e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008978:	88fb      	ldrh	r3, [r7, #6]
 800897a:	005a      	lsls	r2, r3, #1
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008984:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
 800898a:	e01b      	b.n	80089c4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	b29b      	uxth	r3, r3
 8008992:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	3302      	adds	r3, #2
 8008998:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	b2da      	uxtb	r2, r3
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	3301      	adds	r3, #1
 80089a6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	0a1b      	lsrs	r3, r3, #8
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	3301      	adds	r3, #1
 80089b6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	3302      	adds	r3, #2
 80089bc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	3b01      	subs	r3, #1
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e0      	bne.n	800898c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80089ca:	88bb      	ldrh	r3, [r7, #4]
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d007      	beq.n	80089e6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	b29b      	uxth	r3, r3
 80089dc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	701a      	strb	r2, [r3, #0]
  }
}
 80089e6:	bf00      	nop
 80089e8:	372c      	adds	r7, #44	; 0x2c
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bc80      	pop	{r7}
 80089ee:	4770      	bx	lr

080089f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	7c1b      	ldrb	r3, [r3, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d115      	bne.n	8008a34 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	2181      	movs	r1, #129	; 0x81
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 fe4c 	bl	800a6ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a20:	2202      	movs	r2, #2
 8008a22:	2101      	movs	r1, #1
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 fe42 	bl	800a6ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008a32:	e012      	b.n	8008a5a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a34:	2340      	movs	r3, #64	; 0x40
 8008a36:	2202      	movs	r2, #2
 8008a38:	2181      	movs	r1, #129	; 0x81
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 fe37 	bl	800a6ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a46:	2340      	movs	r3, #64	; 0x40
 8008a48:	2202      	movs	r2, #2
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 fe2e 	bl	800a6ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a5a:	2308      	movs	r3, #8
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	2182      	movs	r1, #130	; 0x82
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 fe24 	bl	800a6ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008a6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a70:	f001 ff44 	bl	800a8fc <USBD_static_malloc>
 8008a74:	4602      	mov	r2, r0
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d102      	bne.n	8008a8c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008a86:	2301      	movs	r3, #1
 8008a88:	73fb      	strb	r3, [r7, #15]
 8008a8a:	e026      	b.n	8008ada <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a92:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	7c1b      	ldrb	r3, [r3, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d109      	bne.n	8008aca <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f001 fee4 	bl	800a890 <USBD_LL_PrepareReceive>
 8008ac8:	e007      	b.n	8008ada <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ad0:	2340      	movs	r3, #64	; 0x40
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fedb 	bl	800a890 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008af4:	2181      	movs	r1, #129	; 0x81
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f001 fdff 	bl	800a6fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008b02:	2101      	movs	r1, #1
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 fdf8 	bl	800a6fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b12:	2182      	movs	r1, #130	; 0x82
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 fdf0 	bl	800a6fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00e      	beq.n	8008b48 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f001 feea 	bl	800a914 <USBD_static_free>
    pdev->pClassData = NULL;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b086      	sub	sp, #24
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b62:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d039      	beq.n	8008bf0 <USBD_CDC_Setup+0x9e>
 8008b7c:	2b20      	cmp	r3, #32
 8008b7e:	d17f      	bne.n	8008c80 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	88db      	ldrh	r3, [r3, #6]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d029      	beq.n	8008bdc <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	b25b      	sxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	da11      	bge.n	8008bb6 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8008b9e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	88d2      	ldrh	r2, [r2, #6]
 8008ba4:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008ba6:	6939      	ldr	r1, [r7, #16]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	88db      	ldrh	r3, [r3, #6]
 8008bac:	461a      	mov	r2, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 f993 	bl	8009eda <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8008bb4:	e06b      	b.n	8008c8e <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	785a      	ldrb	r2, [r3, #1]
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	88db      	ldrh	r3, [r3, #6]
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008bcc:	6939      	ldr	r1, [r7, #16]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	88db      	ldrh	r3, [r3, #6]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 f9ae 	bl	8009f36 <USBD_CtlPrepareRx>
    break;
 8008bda:	e058      	b.n	8008c8e <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	7850      	ldrb	r0, [r2, #1]
 8008be8:	2200      	movs	r2, #0
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	4798      	blx	r3
    break;
 8008bee:	e04e      	b.n	8008c8e <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	785b      	ldrb	r3, [r3, #1]
 8008bf4:	2b0b      	cmp	r3, #11
 8008bf6:	d02e      	beq.n	8008c56 <USBD_CDC_Setup+0x104>
 8008bf8:	2b0b      	cmp	r3, #11
 8008bfa:	dc38      	bgt.n	8008c6e <USBD_CDC_Setup+0x11c>
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <USBD_CDC_Setup+0xb4>
 8008c00:	2b0a      	cmp	r3, #10
 8008c02:	d014      	beq.n	8008c2e <USBD_CDC_Setup+0xdc>
 8008c04:	e033      	b.n	8008c6e <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d107      	bne.n	8008c20 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c10:	f107 030c 	add.w	r3, r7, #12
 8008c14:	2202      	movs	r2, #2
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 f95e 	bl	8009eda <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008c1e:	e02e      	b.n	8008c7e <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 f8ef 	bl	8009e06 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008c28:	2302      	movs	r3, #2
 8008c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c2c:	e027      	b.n	8008c7e <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c34:	2b03      	cmp	r3, #3
 8008c36:	d107      	bne.n	8008c48 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008c38:	f107 030f 	add.w	r3, r7, #15
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 f94a 	bl	8009eda <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008c46:	e01a      	b.n	8008c7e <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 f8db 	bl	8009e06 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008c50:	2302      	movs	r3, #2
 8008c52:	75fb      	strb	r3, [r7, #23]
      break;
 8008c54:	e013      	b.n	8008c7e <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	d00d      	beq.n	8008c7c <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 f8cf 	bl	8009e06 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008c6c:	e006      	b.n	8008c7c <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 f8c8 	bl	8009e06 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c76:	2302      	movs	r3, #2
 8008c78:	75fb      	strb	r3, [r7, #23]
      break;
 8008c7a:	e000      	b.n	8008c7e <USBD_CDC_Setup+0x12c>
      break;
 8008c7c:	bf00      	nop
    }
    break;
 8008c7e:	e006      	b.n	8008c8e <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f001 f8bf 	bl	8009e06 <USBD_CtlError>
    ret = USBD_FAIL;
 8008c88:	2302      	movs	r3, #2
 8008c8a:	75fb      	strb	r3, [r7, #23]
    break;
 8008c8c:	bf00      	nop
  }

  return ret;
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008caa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008cb2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d03a      	beq.n	8008d34 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008cbe:	78fa      	ldrb	r2, [r7, #3]
 8008cc0:	6879      	ldr	r1, [r7, #4]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	440b      	add	r3, r1
 8008ccc:	331c      	adds	r3, #28
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d029      	beq.n	8008d28 <USBD_CDC_DataIn+0x90>
 8008cd4:	78fa      	ldrb	r2, [r7, #3]
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	331c      	adds	r3, #28
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	78f9      	ldrb	r1, [r7, #3]
 8008ce8:	68b8      	ldr	r0, [r7, #8]
 8008cea:	460b      	mov	r3, r1
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	440b      	add	r3, r1
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	4403      	add	r3, r0
 8008cf4:	3338      	adds	r3, #56	; 0x38
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cfc:	fb03 f301 	mul.w	r3, r3, r1
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d110      	bne.n	8008d28 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008d06:	78fa      	ldrb	r2, [r7, #3]
 8008d08:	6879      	ldr	r1, [r7, #4]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	440b      	add	r3, r1
 8008d14:	331c      	adds	r3, #28
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008d1a:	78f9      	ldrb	r1, [r7, #3]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2200      	movs	r2, #0
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 fd92 	bl	800a84a <USBD_LL_Transmit>
 8008d26:	e003      	b.n	8008d30 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	e000      	b.n	8008d36 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008d34:	2302      	movs	r3, #2
  }
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	460b      	mov	r3, r1
 8008d48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d50:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008d52:	78fb      	ldrb	r3, [r7, #3]
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f001 fdbd 	bl	800a8d6 <USBD_LL_GetRxDataSize>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00d      	beq.n	8008d8a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d82:	4611      	mov	r1, r2
 8008d84:	4798      	blx	r3

    return USBD_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	e000      	b.n	8008d8c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008d8a:	2302      	movs	r3, #2
  }
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008da2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d015      	beq.n	8008dda <USBD_CDC_EP0_RxReady+0x46>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008db4:	2bff      	cmp	r3, #255	; 0xff
 8008db6:	d010      	beq.n	8008dda <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008dc6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008dce:	b292      	uxth	r2, r2
 8008dd0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	22ff      	movs	r2, #255	; 0xff
 8008dd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2243      	movs	r2, #67	; 0x43
 8008df0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008df2:	4b03      	ldr	r3, [pc, #12]	; (8008e00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc80      	pop	{r7}
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	200000c0 	.word	0x200000c0

08008e04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2243      	movs	r2, #67	; 0x43
 8008e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008e12:	4b03      	ldr	r3, [pc, #12]	; (8008e20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	2000007c 	.word	0x2000007c

08008e24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2243      	movs	r2, #67	; 0x43
 8008e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008e32:	4b03      	ldr	r3, [pc, #12]	; (8008e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bc80      	pop	{r7}
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	20000104 	.word	0x20000104

08008e44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	220a      	movs	r2, #10
 8008e50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008e52:	4b03      	ldr	r3, [pc, #12]	; (8008e60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bc80      	pop	{r7}
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	20000038 	.word	0x20000038

08008e64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d005      	beq.n	8008e84 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bc80      	pop	{r7}
 8008e8e:	4770      	bx	lr

08008e90 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b087      	sub	sp, #28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ea4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008eae:	88fa      	ldrh	r2, [r7, #6]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr

08008ec2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b085      	sub	sp, #20
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ed2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr

08008ee8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ef6:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d01c      	beq.n	8008f3c <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d115      	bne.n	8008f38 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2181      	movs	r1, #129	; 0x81
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f001 fc8b 	bl	800a84a <USBD_LL_Transmit>

      return USBD_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e002      	b.n	8008f3e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e000      	b.n	8008f3e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008f3c:	2302      	movs	r3, #2
  }
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d017      	beq.n	8008f90 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7c1b      	ldrb	r3, [r3, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d109      	bne.n	8008f7c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f72:	2101      	movs	r1, #1
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 fc8b 	bl	800a890 <USBD_LL_PrepareReceive>
 8008f7a:	e007      	b.n	8008f8c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f82:	2340      	movs	r3, #64	; 0x40
 8008f84:	2101      	movs	r1, #1
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 fc82 	bl	800a890 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e000      	b.n	8008f92 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008f90:	2302      	movs	r3, #2
  }
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e01a      	b.n	8008fe8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	79fa      	ldrb	r2, [r7, #7]
 8008fde:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f001 faef 	bl	800a5c4 <USBD_LL_Init>

  return USBD_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d006      	beq.n	8009012 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	73fb      	strb	r3, [r7, #15]
 8009010:	e001      	b.n	8009016 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009012:	2302      	movs	r3, #2
 8009014:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr

08009022 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 fb24 	bl	800a678 <USBD_LL_Start>

  return USBD_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr

0800904e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800905a:	2302      	movs	r3, #2
 800905c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00c      	beq.n	8009082 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	78fa      	ldrb	r2, [r7, #3]
 8009072:	4611      	mov	r1, r2
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	4798      	blx	r3
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009082:	7bfb      	ldrb	r3, [r7, #15]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	4611      	mov	r1, r2
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	4798      	blx	r3
  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fe62 	bl	8009d8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80090d8:	461a      	mov	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80090e6:	f003 031f 	and.w	r3, r3, #31
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d016      	beq.n	800911c <USBD_LL_SetupStage+0x6a>
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d81c      	bhi.n	800912c <USBD_LL_SetupStage+0x7a>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <USBD_LL_SetupStage+0x4a>
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d008      	beq.n	800910c <USBD_LL_SetupStage+0x5a>
 80090fa:	e017      	b.n	800912c <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f9c5 	bl	8009494 <USBD_StdDevReq>
    break;
 800910a:	e01a      	b.n	8009142 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fa27 	bl	8009568 <USBD_StdItfReq>
    break;
 800911a:	e012      	b.n	8009142 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fa67 	bl	80095f8 <USBD_StdEPReq>
    break;
 800912a:	e00a      	b.n	8009142 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009132:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009136:	b2db      	uxtb	r3, r3
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f001 fafc 	bl	800a738 <USBD_LL_StallEP>
    break;
 8009140:	bf00      	nop
  }

  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	460b      	mov	r3, r1
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d14b      	bne.n	80091f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009166:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800916e:	2b03      	cmp	r3, #3
 8009170:	d134      	bne.n	80091dc <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	429a      	cmp	r2, r3
 800917c:	d919      	bls.n	80091b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	1ad2      	subs	r2, r2, r3
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8009194:	429a      	cmp	r2, r3
 8009196:	d203      	bcs.n	80091a0 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800919c:	b29b      	uxth	r3, r3
 800919e:	e002      	b.n	80091a6 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	461a      	mov	r2, r3
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f000 fee1 	bl	8009f72 <USBD_CtlContinueRx>
 80091b0:	e038      	b.n	8009224 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d105      	bne.n	80091d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 fede 	bl	8009f96 <USBD_CtlSendStatus>
 80091da:	e023      	b.n	8009224 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80091e2:	2b05      	cmp	r3, #5
 80091e4:	d11e      	bne.n	8009224 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80091ee:	2100      	movs	r1, #0
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f001 faa1 	bl	800a738 <USBD_LL_StallEP>
 80091f6:	e015      	b.n	8009224 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00d      	beq.n	8009220 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800920a:	2b03      	cmp	r3, #3
 800920c:	d108      	bne.n	8009220 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	7afa      	ldrb	r2, [r7, #11]
 8009218:	4611      	mov	r1, r2
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	4798      	blx	r3
 800921e:	e001      	b.n	8009224 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009220:	2302      	movs	r3, #2
 8009222:	e000      	b.n	8009226 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b086      	sub	sp, #24
 8009232:	af00      	add	r7, sp, #0
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	460b      	mov	r3, r1
 8009238:	607a      	str	r2, [r7, #4]
 800923a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800923c:	7afb      	ldrb	r3, [r7, #11]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d17f      	bne.n	8009342 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3314      	adds	r3, #20
 8009246:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800924e:	2b02      	cmp	r3, #2
 8009250:	d15c      	bne.n	800930c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	429a      	cmp	r2, r3
 800925c:	d915      	bls.n	800928a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	1ad2      	subs	r2, r2, r3
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	b29b      	uxth	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 fe4b 	bl	8009f12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800927c:	2300      	movs	r3, #0
 800927e:	2200      	movs	r2, #0
 8009280:	2100      	movs	r1, #0
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f001 fb04 	bl	800a890 <USBD_LL_PrepareReceive>
 8009288:	e04e      	b.n	8009328 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	6912      	ldr	r2, [r2, #16]
 8009292:	fbb3 f1f2 	udiv	r1, r3, r2
 8009296:	fb02 f201 	mul.w	r2, r2, r1
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	2b00      	cmp	r3, #0
 800929e:	d11c      	bne.n	80092da <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d316      	bcc.n	80092da <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d20f      	bcs.n	80092da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80092ba:	2200      	movs	r2, #0
 80092bc:	2100      	movs	r1, #0
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 fe27 	bl	8009f12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80092cc:	2300      	movs	r3, #0
 80092ce:	2200      	movs	r2, #0
 80092d0:	2100      	movs	r1, #0
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f001 fadc 	bl	800a890 <USBD_LL_PrepareReceive>
 80092d8:	e026      	b.n	8009328 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d105      	bne.n	80092fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80092fc:	2180      	movs	r1, #128	; 0x80
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f001 fa1a 	bl	800a738 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 fe59 	bl	8009fbc <USBD_CtlReceiveStatus>
 800930a:	e00d      	b.n	8009328 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009312:	2b04      	cmp	r3, #4
 8009314:	d004      	beq.n	8009320 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800931c:	2b00      	cmp	r3, #0
 800931e:	d103      	bne.n	8009328 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009320:	2180      	movs	r1, #128	; 0x80
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f001 fa08 	bl	800a738 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800932e:	2b01      	cmp	r3, #1
 8009330:	d11d      	bne.n	800936e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f7ff fe81 	bl	800903a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8009340:	e015      	b.n	800936e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00d      	beq.n	800936a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8009354:	2b03      	cmp	r3, #3
 8009356:	d108      	bne.n	800936a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	7afa      	ldrb	r2, [r7, #11]
 8009362:	4611      	mov	r1, r2
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	4798      	blx	r3
 8009368:	e001      	b.n	800936e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800936a:	2302      	movs	r3, #2
 800936c:	e000      	b.n	8009370 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009380:	2340      	movs	r3, #64	; 0x40
 8009382:	2200      	movs	r2, #0
 8009384:	2100      	movs	r1, #0
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 f991 	bl	800a6ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2240      	movs	r2, #64	; 0x40
 8009398:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800939c:	2340      	movs	r3, #64	; 0x40
 800939e:	2200      	movs	r2, #0
 80093a0:	2180      	movs	r1, #128	; 0x80
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 f983 	bl	800a6ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2240      	movs	r2, #64	; 0x40
 80093b2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d009      	beq.n	80093f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	6852      	ldr	r2, [r2, #4]
 80093e8:	b2d2      	uxtb	r2, r2
 80093ea:	4611      	mov	r1, r2
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	4798      	blx	r3
  }

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	460b      	mov	r3, r1
 8009404:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	bc80      	pop	{r7}
 8009416:	4770      	bx	lr

08009418 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2204      	movs	r2, #4
 8009430:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	bc80      	pop	{r7}
 800943e:	4770      	bx	lr

08009440 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	bc80      	pop	{r7}
 800945e:	4770      	bx	lr

08009460 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800946e:	2b03      	cmp	r3, #3
 8009470:	d10b      	bne.n	800948a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d005      	beq.n	800948a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009484:	69db      	ldr	r3, [r3, #28]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d005      	beq.n	80094ba <USBD_StdDevReq+0x26>
 80094ae:	2b40      	cmp	r3, #64	; 0x40
 80094b0:	d84f      	bhi.n	8009552 <USBD_StdDevReq+0xbe>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d009      	beq.n	80094ca <USBD_StdDevReq+0x36>
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d14b      	bne.n	8009552 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	4798      	blx	r3
    break;
 80094c8:	e048      	b.n	800955c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	785b      	ldrb	r3, [r3, #1]
 80094ce:	2b09      	cmp	r3, #9
 80094d0:	d839      	bhi.n	8009546 <USBD_StdDevReq+0xb2>
 80094d2:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <USBD_StdDevReq+0x44>)
 80094d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d8:	08009529 	.word	0x08009529
 80094dc:	0800953d 	.word	0x0800953d
 80094e0:	08009547 	.word	0x08009547
 80094e4:	08009533 	.word	0x08009533
 80094e8:	08009547 	.word	0x08009547
 80094ec:	0800950b 	.word	0x0800950b
 80094f0:	08009501 	.word	0x08009501
 80094f4:	08009547 	.word	0x08009547
 80094f8:	0800951f 	.word	0x0800951f
 80094fc:	08009515 	.word	0x08009515
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f9da 	bl	80098bc <USBD_GetDescriptor>
      break;
 8009508:	e022      	b.n	8009550 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 facf 	bl	8009ab0 <USBD_SetAddress>
      break;
 8009512:	e01d      	b.n	8009550 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fb0e 	bl	8009b38 <USBD_SetConfig>
      break;
 800951c:	e018      	b.n	8009550 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fb97 	bl	8009c54 <USBD_GetConfig>
      break;
 8009526:	e013      	b.n	8009550 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fbc7 	bl	8009cbe <USBD_GetStatus>
      break;
 8009530:	e00e      	b.n	8009550 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fbf5 	bl	8009d24 <USBD_SetFeature>
      break;
 800953a:	e009      	b.n	8009550 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fc04 	bl	8009d4c <USBD_ClrFeature>
      break;
 8009544:	e004      	b.n	8009550 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fc5c 	bl	8009e06 <USBD_CtlError>
      break;
 800954e:	bf00      	nop
    }
    break;
 8009550:	e004      	b.n	800955c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fc56 	bl	8009e06 <USBD_CtlError>
    break;
 800955a:	bf00      	nop
  }

  return ret;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop

08009568 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800957e:	2b40      	cmp	r3, #64	; 0x40
 8009580:	d005      	beq.n	800958e <USBD_StdItfReq+0x26>
 8009582:	2b40      	cmp	r3, #64	; 0x40
 8009584:	d82e      	bhi.n	80095e4 <USBD_StdItfReq+0x7c>
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <USBD_StdItfReq+0x26>
 800958a:	2b20      	cmp	r3, #32
 800958c:	d12a      	bne.n	80095e4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009594:	3b01      	subs	r3, #1
 8009596:	2b02      	cmp	r3, #2
 8009598:	d81d      	bhi.n	80095d6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	889b      	ldrh	r3, [r3, #4]
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d813      	bhi.n	80095cc <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
 80095b2:	4603      	mov	r3, r0
 80095b4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	88db      	ldrh	r3, [r3, #6]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d110      	bne.n	80095e0 <USBD_StdItfReq+0x78>
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10d      	bne.n	80095e0 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fce6 	bl	8009f96 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80095ca:	e009      	b.n	80095e0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fc19 	bl	8009e06 <USBD_CtlError>
      break;
 80095d4:	e004      	b.n	80095e0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fc14 	bl	8009e06 <USBD_CtlError>
      break;
 80095de:	e000      	b.n	80095e2 <USBD_StdItfReq+0x7a>
      break;
 80095e0:	bf00      	nop
    }
    break;
 80095e2:	e004      	b.n	80095ee <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fc0d 	bl	8009e06 <USBD_CtlError>
    break;
 80095ec:	bf00      	nop
  }

  return USBD_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	889b      	ldrh	r3, [r3, #4]
 800960a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009614:	2b40      	cmp	r3, #64	; 0x40
 8009616:	d007      	beq.n	8009628 <USBD_StdEPReq+0x30>
 8009618:	2b40      	cmp	r3, #64	; 0x40
 800961a:	f200 8144 	bhi.w	80098a6 <USBD_StdEPReq+0x2ae>
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <USBD_StdEPReq+0x40>
 8009622:	2b20      	cmp	r3, #32
 8009624:	f040 813f 	bne.w	80098a6 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	4798      	blx	r3
    break;
 8009636:	e13b      	b.n	80098b0 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009640:	2b20      	cmp	r3, #32
 8009642:	d10a      	bne.n	800965a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	4798      	blx	r3
 8009652:	4603      	mov	r3, r0
 8009654:	73fb      	strb	r3, [r7, #15]

      return ret;
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	e12b      	b.n	80098b2 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	785b      	ldrb	r3, [r3, #1]
 800965e:	2b03      	cmp	r3, #3
 8009660:	d007      	beq.n	8009672 <USBD_StdEPReq+0x7a>
 8009662:	2b03      	cmp	r3, #3
 8009664:	f300 8119 	bgt.w	800989a <USBD_StdEPReq+0x2a2>
 8009668:	2b00      	cmp	r3, #0
 800966a:	d072      	beq.n	8009752 <USBD_StdEPReq+0x15a>
 800966c:	2b01      	cmp	r3, #1
 800966e:	d03a      	beq.n	80096e6 <USBD_StdEPReq+0xee>
 8009670:	e113      	b.n	800989a <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009678:	2b02      	cmp	r3, #2
 800967a:	d002      	beq.n	8009682 <USBD_StdEPReq+0x8a>
 800967c:	2b03      	cmp	r3, #3
 800967e:	d015      	beq.n	80096ac <USBD_StdEPReq+0xb4>
 8009680:	e02b      	b.n	80096da <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00c      	beq.n	80096a2 <USBD_StdEPReq+0xaa>
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	2b80      	cmp	r3, #128	; 0x80
 800968c:	d009      	beq.n	80096a2 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f001 f850 	bl	800a738 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009698:	2180      	movs	r1, #128	; 0x80
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 f84c 	bl	800a738 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80096a0:	e020      	b.n	80096e4 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fbae 	bl	8009e06 <USBD_CtlError>
        break;
 80096aa:	e01b      	b.n	80096e4 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	885b      	ldrh	r3, [r3, #2]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10e      	bne.n	80096d2 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00b      	beq.n	80096d2 <USBD_StdEPReq+0xda>
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	2b80      	cmp	r3, #128	; 0x80
 80096be:	d008      	beq.n	80096d2 <USBD_StdEPReq+0xda>
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	88db      	ldrh	r3, [r3, #6]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d104      	bne.n	80096d2 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 f833 	bl	800a738 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fc5f 	bl	8009f96 <USBD_CtlSendStatus>

        break;
 80096d8:	e004      	b.n	80096e4 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fb92 	bl	8009e06 <USBD_CtlError>
        break;
 80096e2:	bf00      	nop
      }
      break;
 80096e4:	e0de      	b.n	80098a4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d002      	beq.n	80096f6 <USBD_StdEPReq+0xfe>
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d015      	beq.n	8009720 <USBD_StdEPReq+0x128>
 80096f4:	e026      	b.n	8009744 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00c      	beq.n	8009716 <USBD_StdEPReq+0x11e>
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b80      	cmp	r3, #128	; 0x80
 8009700:	d009      	beq.n	8009716 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 f816 	bl	800a738 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800970c:	2180      	movs	r1, #128	; 0x80
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 f812 	bl	800a738 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009714:	e01c      	b.n	8009750 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fb74 	bl	8009e06 <USBD_CtlError>
        break;
 800971e:	e017      	b.n	8009750 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	885b      	ldrh	r3, [r3, #2]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d112      	bne.n	800974e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800972e:	2b00      	cmp	r3, #0
 8009730:	d004      	beq.n	800973c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f001 f81d 	bl	800a776 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fc2a 	bl	8009f96 <USBD_CtlSendStatus>
        }
        break;
 8009742:	e004      	b.n	800974e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fb5d 	bl	8009e06 <USBD_CtlError>
        break;
 800974c:	e000      	b.n	8009750 <USBD_StdEPReq+0x158>
        break;
 800974e:	bf00      	nop
      }
      break;
 8009750:	e0a8      	b.n	80098a4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009758:	2b02      	cmp	r3, #2
 800975a:	d002      	beq.n	8009762 <USBD_StdEPReq+0x16a>
 800975c:	2b03      	cmp	r3, #3
 800975e:	d031      	beq.n	80097c4 <USBD_StdEPReq+0x1cc>
 8009760:	e095      	b.n	800988e <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009762:	7bbb      	ldrb	r3, [r7, #14]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d007      	beq.n	8009778 <USBD_StdEPReq+0x180>
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	2b80      	cmp	r3, #128	; 0x80
 800976c:	d004      	beq.n	8009778 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fb48 	bl	8009e06 <USBD_CtlError>
          break;
 8009776:	e08f      	b.n	8009898 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800977c:	2b00      	cmp	r3, #0
 800977e:	da0b      	bge.n	8009798 <USBD_StdEPReq+0x1a0>
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009786:	4613      	mov	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	3310      	adds	r3, #16
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	4413      	add	r3, r2
 8009794:	3304      	adds	r3, #4
 8009796:	e00a      	b.n	80097ae <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	4413      	add	r3, r2
 80097ae:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2202      	movs	r2, #2
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fb8c 	bl	8009eda <USBD_CtlSendData>
          break;
 80097c2:	e069      	b.n	8009898 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80097c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	da11      	bge.n	80097f0 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	f003 020f 	and.w	r2, r3, #15
 80097d2:	6879      	ldr	r1, [r7, #4]
 80097d4:	4613      	mov	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	440b      	add	r3, r1
 80097de:	3318      	adds	r3, #24
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d117      	bne.n	8009816 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fb0c 	bl	8009e06 <USBD_CtlError>
            break;
 80097ee:	e053      	b.n	8009898 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	f003 020f 	and.w	r2, r3, #15
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	440b      	add	r3, r1
 8009802:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 faf9 	bl	8009e06 <USBD_CtlError>
            break;
 8009814:	e040      	b.n	8009898 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800981a:	2b00      	cmp	r3, #0
 800981c:	da0b      	bge.n	8009836 <USBD_StdEPReq+0x23e>
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009824:	4613      	mov	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	3310      	adds	r3, #16
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	4413      	add	r3, r2
 8009832:	3304      	adds	r3, #4
 8009834:	e00a      	b.n	800984c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	4413      	add	r3, r2
 800984c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <USBD_StdEPReq+0x262>
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	2b80      	cmp	r3, #128	; 0x80
 8009858:	d103      	bne.n	8009862 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	e00e      	b.n	8009880 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 ffa4 	bl	800a7b4 <USBD_LL_IsStallEP>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2201      	movs	r2, #1
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	e002      	b.n	8009880 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2202      	movs	r2, #2
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fb27 	bl	8009eda <USBD_CtlSendData>
          break;
 800988c:	e004      	b.n	8009898 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fab8 	bl	8009e06 <USBD_CtlError>
        break;
 8009896:	bf00      	nop
      }
      break;
 8009898:	e004      	b.n	80098a4 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fab2 	bl	8009e06 <USBD_CtlError>
      break;
 80098a2:	bf00      	nop
    }
    break;
 80098a4:	e004      	b.n	80098b0 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 faac 	bl	8009e06 <USBD_CtlError>
    break;
 80098ae:	bf00      	nop
  }

  return ret;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	885b      	ldrh	r3, [r3, #2]
 80098ca:	0a1b      	lsrs	r3, r3, #8
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	3b01      	subs	r3, #1
 80098d0:	2b06      	cmp	r3, #6
 80098d2:	f200 80c9 	bhi.w	8009a68 <USBD_GetDescriptor+0x1ac>
 80098d6:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <USBD_GetDescriptor+0x20>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	080098f9 	.word	0x080098f9
 80098e0:	08009911 	.word	0x08009911
 80098e4:	08009951 	.word	0x08009951
 80098e8:	08009a69 	.word	0x08009a69
 80098ec:	08009a69 	.word	0x08009a69
 80098f0:	08009a15 	.word	0x08009a15
 80098f4:	08009a3b 	.word	0x08009a3b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	7c12      	ldrb	r2, [r2, #16]
 8009904:	f107 010a 	add.w	r1, r7, #10
 8009908:	4610      	mov	r0, r2
 800990a:	4798      	blx	r3
 800990c:	60f8      	str	r0, [r7, #12]
    break;
 800990e:	e0b0      	b.n	8009a72 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	7c1b      	ldrb	r3, [r3, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10d      	bne.n	8009934 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800991e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009920:	f107 020a 	add.w	r2, r7, #10
 8009924:	4610      	mov	r0, r2
 8009926:	4798      	blx	r3
 8009928:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3301      	adds	r3, #1
 800992e:	2202      	movs	r2, #2
 8009930:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009932:	e09e      	b.n	8009a72 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800993a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993c:	f107 020a 	add.w	r2, r7, #10
 8009940:	4610      	mov	r0, r2
 8009942:	4798      	blx	r3
 8009944:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3301      	adds	r3, #1
 800994a:	2202      	movs	r2, #2
 800994c:	701a      	strb	r2, [r3, #0]
    break;
 800994e:	e090      	b.n	8009a72 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	885b      	ldrh	r3, [r3, #2]
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b05      	cmp	r3, #5
 8009958:	d856      	bhi.n	8009a08 <USBD_GetDescriptor+0x14c>
 800995a:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <USBD_GetDescriptor+0xa4>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	08009979 	.word	0x08009979
 8009964:	08009991 	.word	0x08009991
 8009968:	080099a9 	.word	0x080099a9
 800996c:	080099c1 	.word	0x080099c1
 8009970:	080099d9 	.word	0x080099d9
 8009974:	080099f1 	.word	0x080099f1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	7c12      	ldrb	r2, [r2, #16]
 8009984:	f107 010a 	add.w	r1, r7, #10
 8009988:	4610      	mov	r0, r2
 800998a:	4798      	blx	r3
 800998c:	60f8      	str	r0, [r7, #12]
      break;
 800998e:	e040      	b.n	8009a12 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	7c12      	ldrb	r2, [r2, #16]
 800999c:	f107 010a 	add.w	r1, r7, #10
 80099a0:	4610      	mov	r0, r2
 80099a2:	4798      	blx	r3
 80099a4:	60f8      	str	r0, [r7, #12]
      break;
 80099a6:	e034      	b.n	8009a12 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	7c12      	ldrb	r2, [r2, #16]
 80099b4:	f107 010a 	add.w	r1, r7, #10
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
 80099bc:	60f8      	str	r0, [r7, #12]
      break;
 80099be:	e028      	b.n	8009a12 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	7c12      	ldrb	r2, [r2, #16]
 80099cc:	f107 010a 	add.w	r1, r7, #10
 80099d0:	4610      	mov	r0, r2
 80099d2:	4798      	blx	r3
 80099d4:	60f8      	str	r0, [r7, #12]
      break;
 80099d6:	e01c      	b.n	8009a12 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	7c12      	ldrb	r2, [r2, #16]
 80099e4:	f107 010a 	add.w	r1, r7, #10
 80099e8:	4610      	mov	r0, r2
 80099ea:	4798      	blx	r3
 80099ec:	60f8      	str	r0, [r7, #12]
      break;
 80099ee:	e010      	b.n	8009a12 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	7c12      	ldrb	r2, [r2, #16]
 80099fc:	f107 010a 	add.w	r1, r7, #10
 8009a00:	4610      	mov	r0, r2
 8009a02:	4798      	blx	r3
 8009a04:	60f8      	str	r0, [r7, #12]
      break;
 8009a06:	e004      	b.n	8009a12 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f9fb 	bl	8009e06 <USBD_CtlError>
      return;
 8009a10:	e04b      	b.n	8009aaa <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8009a12:	e02e      	b.n	8009a72 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	7c1b      	ldrb	r3, [r3, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d109      	bne.n	8009a30 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a24:	f107 020a 	add.w	r2, r7, #10
 8009a28:	4610      	mov	r0, r2
 8009a2a:	4798      	blx	r3
 8009a2c:	60f8      	str	r0, [r7, #12]
      break;
 8009a2e:	e020      	b.n	8009a72 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f9e7 	bl	8009e06 <USBD_CtlError>
      return;
 8009a38:	e037      	b.n	8009aaa <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	7c1b      	ldrb	r3, [r3, #16]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10d      	bne.n	8009a5e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4a:	f107 020a 	add.w	r2, r7, #10
 8009a4e:	4610      	mov	r0, r2
 8009a50:	4798      	blx	r3
 8009a52:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3301      	adds	r3, #1
 8009a58:	2207      	movs	r2, #7
 8009a5a:	701a      	strb	r2, [r3, #0]
      break;
 8009a5c:	e009      	b.n	8009a72 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f9d0 	bl	8009e06 <USBD_CtlError>
      return;
 8009a66:	e020      	b.n	8009aaa <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f9cb 	bl	8009e06 <USBD_CtlError>
    return;
 8009a70:	e01b      	b.n	8009aaa <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8009a72:	897b      	ldrh	r3, [r7, #10]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d011      	beq.n	8009a9c <USBD_GetDescriptor+0x1e0>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	88db      	ldrh	r3, [r3, #6]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00d      	beq.n	8009a9c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	88da      	ldrh	r2, [r3, #6]
 8009a84:	897b      	ldrh	r3, [r7, #10]
 8009a86:	4293      	cmp	r3, r2
 8009a88:	bf28      	it	cs
 8009a8a:	4613      	movcs	r3, r2
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009a90:	897b      	ldrh	r3, [r7, #10]
 8009a92:	461a      	mov	r2, r3
 8009a94:	68f9      	ldr	r1, [r7, #12]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fa1f 	bl	8009eda <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	88db      	ldrh	r3, [r3, #6]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d102      	bne.n	8009aaa <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fa76 	bl	8009f96 <USBD_CtlSendStatus>
  }
}
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	889b      	ldrh	r3, [r3, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d130      	bne.n	8009b24 <USBD_SetAddress+0x74>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	88db      	ldrh	r3, [r3, #6]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d12c      	bne.n	8009b24 <USBD_SetAddress+0x74>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	885b      	ldrh	r3, [r3, #2]
 8009ace:	2b7f      	cmp	r3, #127	; 0x7f
 8009ad0:	d828      	bhi.n	8009b24 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	885b      	ldrh	r3, [r3, #2]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009adc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d104      	bne.n	8009af2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f98b 	bl	8009e06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009af0:	e01d      	b.n	8009b2e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	7bfa      	ldrb	r2, [r7, #15]
 8009af6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fe84 	bl	800a80c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fa46 	bl	8009f96 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d004      	beq.n	8009b1a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b18:	e009      	b.n	8009b2e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b22:	e004      	b.n	8009b2e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f96d 	bl	8009e06 <USBD_CtlError>
  }
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	885b      	ldrh	r3, [r3, #2]
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	4b41      	ldr	r3, [pc, #260]	; (8009c50 <USBD_SetConfig+0x118>)
 8009b4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b4c:	4b40      	ldr	r3, [pc, #256]	; (8009c50 <USBD_SetConfig+0x118>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d904      	bls.n	8009b5e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f955 	bl	8009e06 <USBD_CtlError>
 8009b5c:	e075      	b.n	8009c4a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d002      	beq.n	8009b6e <USBD_SetConfig+0x36>
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	d023      	beq.n	8009bb4 <USBD_SetConfig+0x7c>
 8009b6c:	e062      	b.n	8009c34 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009b6e:	4b38      	ldr	r3, [pc, #224]	; (8009c50 <USBD_SetConfig+0x118>)
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d01a      	beq.n	8009bac <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8009b76:	4b36      	ldr	r3, [pc, #216]	; (8009c50 <USBD_SetConfig+0x118>)
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2203      	movs	r2, #3
 8009b84:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b88:	4b31      	ldr	r3, [pc, #196]	; (8009c50 <USBD_SetConfig+0x118>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7ff fa5d 	bl	800904e <USBD_SetClassConfig>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d104      	bne.n	8009ba4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f932 	bl	8009e06 <USBD_CtlError>
          return;
 8009ba2:	e052      	b.n	8009c4a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f9f6 	bl	8009f96 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009baa:	e04e      	b.n	8009c4a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f9f2 	bl	8009f96 <USBD_CtlSendStatus>
      break;
 8009bb2:	e04a      	b.n	8009c4a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009bb4:	4b26      	ldr	r3, [pc, #152]	; (8009c50 <USBD_SetConfig+0x118>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d112      	bne.n	8009be2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009bc4:	4b22      	ldr	r3, [pc, #136]	; (8009c50 <USBD_SetConfig+0x118>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009bce:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <USBD_SetConfig+0x118>)
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff fa59 	bl	800908c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f9db 	bl	8009f96 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009be0:	e033      	b.n	8009c4a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009be2:	4b1b      	ldr	r3, [pc, #108]	; (8009c50 <USBD_SetConfig+0x118>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d01d      	beq.n	8009c2c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7ff fa47 	bl	800908c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009bfe:	4b14      	ldr	r3, [pc, #80]	; (8009c50 <USBD_SetConfig+0x118>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009c08:	4b11      	ldr	r3, [pc, #68]	; (8009c50 <USBD_SetConfig+0x118>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7ff fa1d 	bl	800904e <USBD_SetClassConfig>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d104      	bne.n	8009c24 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f8f2 	bl	8009e06 <USBD_CtlError>
          return;
 8009c22:	e012      	b.n	8009c4a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f9b6 	bl	8009f96 <USBD_CtlSendStatus>
      break;
 8009c2a:	e00e      	b.n	8009c4a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f9b2 	bl	8009f96 <USBD_CtlSendStatus>
      break;
 8009c32:	e00a      	b.n	8009c4a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f8e5 	bl	8009e06 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009c3c:	4b04      	ldr	r3, [pc, #16]	; (8009c50 <USBD_SetConfig+0x118>)
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7ff fa22 	bl	800908c <USBD_ClrClassConfig>
      break;
 8009c48:	bf00      	nop
    }
  }
}
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	20000248 	.word	0x20000248

08009c54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	88db      	ldrh	r3, [r3, #6]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d004      	beq.n	8009c70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f8cc 	bl	8009e06 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009c6e:	e022      	b.n	8009cb6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	dc02      	bgt.n	8009c80 <USBD_GetConfig+0x2c>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	dc03      	bgt.n	8009c86 <USBD_GetConfig+0x32>
 8009c7e:	e015      	b.n	8009cac <USBD_GetConfig+0x58>
 8009c80:	2b03      	cmp	r3, #3
 8009c82:	d00b      	beq.n	8009c9c <USBD_GetConfig+0x48>
 8009c84:	e012      	b.n	8009cac <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3308      	adds	r3, #8
 8009c90:	2201      	movs	r2, #1
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f920 	bl	8009eda <USBD_CtlSendData>
      break;
 8009c9a:	e00c      	b.n	8009cb6 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f918 	bl	8009eda <USBD_CtlSendData>
      break;
 8009caa:	e004      	b.n	8009cb6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f8a9 	bl	8009e06 <USBD_CtlError>
      break;
 8009cb4:	bf00      	nop
}
 8009cb6:	bf00      	nop
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d81e      	bhi.n	8009d12 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	88db      	ldrh	r3, [r3, #6]
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d004      	beq.n	8009ce6 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f891 	bl	8009e06 <USBD_CtlError>
      break;
 8009ce4:	e01a      	b.n	8009d1c <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d005      	beq.n	8009d02 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	f043 0202 	orr.w	r2, r3, #2
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	330c      	adds	r3, #12
 8009d06:	2202      	movs	r2, #2
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f8e5 	bl	8009eda <USBD_CtlSendData>
    break;
 8009d10:	e004      	b.n	8009d1c <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f876 	bl	8009e06 <USBD_CtlError>
    break;
 8009d1a:	bf00      	nop
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	885b      	ldrh	r3, [r3, #2]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d106      	bne.n	8009d44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f929 	bl	8009f96 <USBD_CtlSendStatus>
  }

}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d80b      	bhi.n	8009d7a <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	885b      	ldrh	r3, [r3, #2]
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d10c      	bne.n	8009d84 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f90f 	bl	8009f96 <USBD_CtlSendStatus>
    }
    break;
 8009d78:	e004      	b.n	8009d84 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009d7a:	6839      	ldr	r1, [r7, #0]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f842 	bl	8009e06 <USBD_CtlError>
    break;
 8009d82:	e000      	b.n	8009d86 <USBD_ClrFeature+0x3a>
    break;
 8009d84:	bf00      	nop
  }
}
 8009d86:	bf00      	nop
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b083      	sub	sp, #12
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	781a      	ldrb	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	785a      	ldrb	r2, [r3, #1]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	3302      	adds	r3, #2
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	3303      	adds	r3, #3
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	021b      	lsls	r3, r3, #8
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	4413      	add	r3, r2
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	3305      	adds	r3, #5
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	4413      	add	r3, r2
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	3306      	adds	r3, #6
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	3307      	adds	r3, #7
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	021b      	lsls	r3, r3, #8
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	4413      	add	r3, r2
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	80da      	strh	r2, [r3, #6]

}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bc80      	pop	{r7}
 8009e04:	4770      	bx	lr

08009e06 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009e10:	2180      	movs	r1, #128	; 0x80
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fc90 	bl	800a738 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009e18:	2100      	movs	r1, #0
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fc8c 	bl	800a738 <USBD_LL_StallEP>
}
 8009e20:	bf00      	nop
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d032      	beq.n	8009ea4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 f834 	bl	8009eac <USBD_GetLen>
 8009e44:	4603      	mov	r3, r0
 8009e46:	3301      	adds	r3, #1
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
 8009e54:	1c5a      	adds	r2, r3, #1
 8009e56:	75fa      	strb	r2, [r7, #23]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	7812      	ldrb	r2, [r2, #0]
 8009e62:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	75fa      	strb	r2, [r7, #23]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	4413      	add	r3, r2
 8009e70:	2203      	movs	r2, #3
 8009e72:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009e74:	e012      	b.n	8009e9c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	1c5a      	adds	r2, r3, #1
 8009e7a:	60fa      	str	r2, [r7, #12]
 8009e7c:	7dfa      	ldrb	r2, [r7, #23]
 8009e7e:	1c51      	adds	r1, r2, #1
 8009e80:	75f9      	strb	r1, [r7, #23]
 8009e82:	4611      	mov	r1, r2
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	440a      	add	r2, r1
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	1c5a      	adds	r2, r3, #1
 8009e90:	75fa      	strb	r2, [r7, #23]
 8009e92:	461a      	mov	r2, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	4413      	add	r3, r2
 8009e98:	2200      	movs	r2, #0
 8009e9a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e8      	bne.n	8009e76 <USBD_GetString+0x4e>
    }
  }
}
 8009ea4:	bf00      	nop
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009eb8:	e005      	b.n	8009ec6 <USBD_GetLen+0x1a>
    {
        len++;
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1f5      	bne.n	8009eba <USBD_GetLen+0xe>
    }

    return len;
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bc80      	pop	{r7}
 8009ed8:	4770      	bx	lr

08009eda <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b084      	sub	sp, #16
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009ef0:	88fa      	ldrh	r2, [r7, #6]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009ef6:	88fa      	ldrh	r2, [r7, #6]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009efc:	88fb      	ldrh	r3, [r7, #6]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	2100      	movs	r1, #0
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f000 fca1 	bl	800a84a <USBD_LL_Transmit>

  return USBD_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	60f8      	str	r0, [r7, #12]
 8009f1a:	60b9      	str	r1, [r7, #8]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009f20:	88fb      	ldrh	r3, [r7, #6]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	2100      	movs	r1, #0
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f000 fc8f 	bl	800a84a <USBD_LL_Transmit>

  return USBD_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	60b9      	str	r1, [r7, #8]
 8009f40:	4613      	mov	r3, r2
 8009f42:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2203      	movs	r2, #3
 8009f48:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009f4c:	88fa      	ldrh	r2, [r7, #6]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009f54:	88fa      	ldrh	r2, [r7, #6]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009f5c:	88fb      	ldrh	r3, [r7, #6]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	2100      	movs	r1, #0
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f000 fc94 	bl	800a890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	60f8      	str	r0, [r7, #12]
 8009f7a:	60b9      	str	r1, [r7, #8]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f80:	88fb      	ldrh	r3, [r7, #6]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	2100      	movs	r1, #0
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 fc82 	bl	800a890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b082      	sub	sp, #8
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2204      	movs	r2, #4
 8009fa2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2100      	movs	r1, #0
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fc4c 	bl	800a84a <USBD_LL_Transmit>

  return USBD_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2205      	movs	r2, #5
 8009fc8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fc5c 	bl	800a890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
	...

08009fe4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	4912      	ldr	r1, [pc, #72]	; (800a034 <MX_USB_DEVICE_Init+0x50>)
 8009fec:	4812      	ldr	r0, [pc, #72]	; (800a038 <MX_USB_DEVICE_Init+0x54>)
 8009fee:	f7fe ffd4 	bl	8008f9a <USBD_Init>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009ff8:	f7f8 fd64 	bl	8002ac4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009ffc:	490f      	ldr	r1, [pc, #60]	; (800a03c <MX_USB_DEVICE_Init+0x58>)
 8009ffe:	480e      	ldr	r0, [pc, #56]	; (800a038 <MX_USB_DEVICE_Init+0x54>)
 800a000:	f7fe fff6 	bl	8008ff0 <USBD_RegisterClass>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a00a:	f7f8 fd5b 	bl	8002ac4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a00e:	490c      	ldr	r1, [pc, #48]	; (800a040 <MX_USB_DEVICE_Init+0x5c>)
 800a010:	4809      	ldr	r0, [pc, #36]	; (800a038 <MX_USB_DEVICE_Init+0x54>)
 800a012:	f7fe ff27 	bl	8008e64 <USBD_CDC_RegisterInterface>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a01c:	f7f8 fd52 	bl	8002ac4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a020:	4805      	ldr	r0, [pc, #20]	; (800a038 <MX_USB_DEVICE_Init+0x54>)
 800a022:	f7fe fffe 	bl	8009022 <USBD_Start>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a02c:	f7f8 fd4a 	bl	8002ac4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a030:	bf00      	nop
 800a032:	bd80      	pop	{r7, pc}
 800a034:	20000158 	.word	0x20000158
 800a038:	2000084c 	.word	0x2000084c
 800a03c:	20000044 	.word	0x20000044
 800a040:	20000148 	.word	0x20000148

0800a044 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a048:	2200      	movs	r2, #0
 800a04a:	4905      	ldr	r1, [pc, #20]	; (800a060 <CDC_Init_FS+0x1c>)
 800a04c:	4805      	ldr	r0, [pc, #20]	; (800a064 <CDC_Init_FS+0x20>)
 800a04e:	f7fe ff1f 	bl	8008e90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a052:	4905      	ldr	r1, [pc, #20]	; (800a068 <CDC_Init_FS+0x24>)
 800a054:	4803      	ldr	r0, [pc, #12]	; (800a064 <CDC_Init_FS+0x20>)
 800a056:	f7fe ff34 	bl	8008ec2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a05a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20000ed0 	.word	0x20000ed0
 800a064:	2000084c 	.word	0x2000084c
 800a068:	20000ae8 	.word	0x20000ae8

0800a06c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a070:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a072:	4618      	mov	r0, r3
 800a074:	46bd      	mov	sp, r7
 800a076:	bc80      	pop	{r7}
 800a078:	4770      	bx	lr
	...

0800a07c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	6039      	str	r1, [r7, #0]
 800a086:	71fb      	strb	r3, [r7, #7]
 800a088:	4613      	mov	r3, r2
 800a08a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	2b23      	cmp	r3, #35	; 0x23
 800a090:	d84a      	bhi.n	800a128 <CDC_Control_FS+0xac>
 800a092:	a201      	add	r2, pc, #4	; (adr r2, 800a098 <CDC_Control_FS+0x1c>)
 800a094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a098:	0800a129 	.word	0x0800a129
 800a09c:	0800a129 	.word	0x0800a129
 800a0a0:	0800a129 	.word	0x0800a129
 800a0a4:	0800a129 	.word	0x0800a129
 800a0a8:	0800a129 	.word	0x0800a129
 800a0ac:	0800a129 	.word	0x0800a129
 800a0b0:	0800a129 	.word	0x0800a129
 800a0b4:	0800a129 	.word	0x0800a129
 800a0b8:	0800a129 	.word	0x0800a129
 800a0bc:	0800a129 	.word	0x0800a129
 800a0c0:	0800a129 	.word	0x0800a129
 800a0c4:	0800a129 	.word	0x0800a129
 800a0c8:	0800a129 	.word	0x0800a129
 800a0cc:	0800a129 	.word	0x0800a129
 800a0d0:	0800a129 	.word	0x0800a129
 800a0d4:	0800a129 	.word	0x0800a129
 800a0d8:	0800a129 	.word	0x0800a129
 800a0dc:	0800a129 	.word	0x0800a129
 800a0e0:	0800a129 	.word	0x0800a129
 800a0e4:	0800a129 	.word	0x0800a129
 800a0e8:	0800a129 	.word	0x0800a129
 800a0ec:	0800a129 	.word	0x0800a129
 800a0f0:	0800a129 	.word	0x0800a129
 800a0f4:	0800a129 	.word	0x0800a129
 800a0f8:	0800a129 	.word	0x0800a129
 800a0fc:	0800a129 	.word	0x0800a129
 800a100:	0800a129 	.word	0x0800a129
 800a104:	0800a129 	.word	0x0800a129
 800a108:	0800a129 	.word	0x0800a129
 800a10c:	0800a129 	.word	0x0800a129
 800a110:	0800a129 	.word	0x0800a129
 800a114:	0800a129 	.word	0x0800a129
 800a118:	0800a129 	.word	0x0800a129
 800a11c:	0800a129 	.word	0x0800a129
 800a120:	0800a129 	.word	0x0800a129
 800a124:	0800a129 	.word	0x0800a129
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a128:	bf00      	nop
  }

  return (USBD_OK);
 800a12a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	bc80      	pop	{r7}
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop

0800a138 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	dataReceived = 1;
 800a142:	4b0e      	ldr	r3, [pc, #56]	; (800a17c <CDC_Receive_FS+0x44>)
 800a144:	2201      	movs	r2, #1
 800a146:	701a      	strb	r2, [r3, #0]
	memcpy(saveReceivedData, Buf, *Len);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	461a      	mov	r2, r3
 800a14e:	6879      	ldr	r1, [r7, #4]
 800a150:	480b      	ldr	r0, [pc, #44]	; (800a180 <CDC_Receive_FS+0x48>)
 800a152:	f000 fc47 	bl	800a9e4 <memcpy>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	480a      	ldr	r0, [pc, #40]	; (800a184 <CDC_Receive_FS+0x4c>)
 800a15a:	f7fe feb2 	bl	8008ec2 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a15e:	4809      	ldr	r0, [pc, #36]	; (800a184 <CDC_Receive_FS+0x4c>)
 800a160:	f7fe fef1 	bl	8008f46 <USBD_CDC_ReceivePacket>
	CDC_ReceiveCallBack(Buf, Len[0]);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f832 	bl	800a1d4 <CDC_ReceiveCallBack>
	return (USBD_OK);
 800a170:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a172:	4618      	mov	r0, r3
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	2000022c 	.word	0x2000022c
 800a180:	20000600 	.word	0x20000600
 800a184:	2000084c 	.word	0x2000084c

0800a188 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	460b      	mov	r3, r1
 800a192:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a198:	4b0d      	ldr	r3, [pc, #52]	; (800a1d0 <CDC_Transmit_FS+0x48>)
 800a19a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a19e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e00b      	b.n	800a1c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a1ae:	887b      	ldrh	r3, [r7, #2]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	4806      	ldr	r0, [pc, #24]	; (800a1d0 <CDC_Transmit_FS+0x48>)
 800a1b6:	f7fe fe6b 	bl	8008e90 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a1ba:	4805      	ldr	r0, [pc, #20]	; (800a1d0 <CDC_Transmit_FS+0x48>)
 800a1bc:	f7fe fe94 	bl	8008ee8 <USBD_CDC_TransmitPacket>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	2000084c 	.word	0x2000084c

0800a1d4 <CDC_ReceiveCallBack>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
__weak void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len){
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]

}
 800a1de:	bf00      	nop
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bc80      	pop	{r7}
 800a1e6:	4770      	bx	lr

0800a1e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	6039      	str	r1, [r7, #0]
 800a1f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2212      	movs	r2, #18
 800a1f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a1fa:	4b03      	ldr	r3, [pc, #12]	; (800a208 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	bc80      	pop	{r7}
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	20000174 	.word	0x20000174

0800a20c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	4603      	mov	r3, r0
 800a214:	6039      	str	r1, [r7, #0]
 800a216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2204      	movs	r2, #4
 800a21c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a21e:	4b03      	ldr	r3, [pc, #12]	; (800a22c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a220:	4618      	mov	r0, r3
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	bc80      	pop	{r7}
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	20000188 	.word	0x20000188

0800a230 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	4603      	mov	r3, r0
 800a238:	6039      	str	r1, [r7, #0]
 800a23a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a23c:	79fb      	ldrb	r3, [r7, #7]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d105      	bne.n	800a24e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	4907      	ldr	r1, [pc, #28]	; (800a264 <USBD_FS_ProductStrDescriptor+0x34>)
 800a246:	4808      	ldr	r0, [pc, #32]	; (800a268 <USBD_FS_ProductStrDescriptor+0x38>)
 800a248:	f7ff fdee 	bl	8009e28 <USBD_GetString>
 800a24c:	e004      	b.n	800a258 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	4904      	ldr	r1, [pc, #16]	; (800a264 <USBD_FS_ProductStrDescriptor+0x34>)
 800a252:	4805      	ldr	r0, [pc, #20]	; (800a268 <USBD_FS_ProductStrDescriptor+0x38>)
 800a254:	f7ff fde8 	bl	8009e28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a258:	4b02      	ldr	r3, [pc, #8]	; (800a264 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	200012b8 	.word	0x200012b8
 800a268:	0800bb40 	.word	0x0800bb40

0800a26c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	6039      	str	r1, [r7, #0]
 800a276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	4904      	ldr	r1, [pc, #16]	; (800a28c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a27c:	4804      	ldr	r0, [pc, #16]	; (800a290 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a27e:	f7ff fdd3 	bl	8009e28 <USBD_GetString>
  return USBD_StrDesc;
 800a282:	4b02      	ldr	r3, [pc, #8]	; (800a28c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	200012b8 	.word	0x200012b8
 800a290:	0800bb58 	.word	0x0800bb58

0800a294 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	6039      	str	r1, [r7, #0]
 800a29e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	221a      	movs	r2, #26
 800a2a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2a6:	f000 f843 	bl	800a330 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2aa:	4b02      	ldr	r3, [pc, #8]	; (800a2b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	2000018c 	.word	0x2000018c

0800a2b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	6039      	str	r1, [r7, #0]
 800a2c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d105      	bne.n	800a2d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	4907      	ldr	r1, [pc, #28]	; (800a2ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2ce:	4808      	ldr	r0, [pc, #32]	; (800a2f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2d0:	f7ff fdaa 	bl	8009e28 <USBD_GetString>
 800a2d4:	e004      	b.n	800a2e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	4904      	ldr	r1, [pc, #16]	; (800a2ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2da:	4805      	ldr	r0, [pc, #20]	; (800a2f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2dc:	f7ff fda4 	bl	8009e28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2e0:	4b02      	ldr	r3, [pc, #8]	; (800a2ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	200012b8 	.word	0x200012b8
 800a2f0:	0800bb6c 	.word	0x0800bb6c

0800a2f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	6039      	str	r1, [r7, #0]
 800a2fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a300:	79fb      	ldrb	r3, [r7, #7]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d105      	bne.n	800a312 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	4907      	ldr	r1, [pc, #28]	; (800a328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a30a:	4808      	ldr	r0, [pc, #32]	; (800a32c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a30c:	f7ff fd8c 	bl	8009e28 <USBD_GetString>
 800a310:	e004      	b.n	800a31c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	4904      	ldr	r1, [pc, #16]	; (800a328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a316:	4805      	ldr	r0, [pc, #20]	; (800a32c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a318:	f7ff fd86 	bl	8009e28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a31c:	4b02      	ldr	r3, [pc, #8]	; (800a328 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	200012b8 	.word	0x200012b8
 800a32c:	0800bb78 	.word	0x0800bb78

0800a330 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a336:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <Get_SerialNum+0x44>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a33c:	4b0e      	ldr	r3, [pc, #56]	; (800a378 <Get_SerialNum+0x48>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a342:	4b0e      	ldr	r3, [pc, #56]	; (800a37c <Get_SerialNum+0x4c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4413      	add	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d009      	beq.n	800a36a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a356:	2208      	movs	r2, #8
 800a358:	4909      	ldr	r1, [pc, #36]	; (800a380 <Get_SerialNum+0x50>)
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f000 f814 	bl	800a388 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a360:	2204      	movs	r2, #4
 800a362:	4908      	ldr	r1, [pc, #32]	; (800a384 <Get_SerialNum+0x54>)
 800a364:	68b8      	ldr	r0, [r7, #8]
 800a366:	f000 f80f 	bl	800a388 <IntToUnicode>
  }
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	1ff80050 	.word	0x1ff80050
 800a378:	1ff80054 	.word	0x1ff80054
 800a37c:	1ff80058 	.word	0x1ff80058
 800a380:	2000018e 	.word	0x2000018e
 800a384:	2000019e 	.word	0x2000019e

0800a388 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	4613      	mov	r3, r2
 800a394:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a39a:	2300      	movs	r3, #0
 800a39c:	75fb      	strb	r3, [r7, #23]
 800a39e:	e027      	b.n	800a3f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	0f1b      	lsrs	r3, r3, #28
 800a3a4:	2b09      	cmp	r3, #9
 800a3a6:	d80b      	bhi.n	800a3c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	0f1b      	lsrs	r3, r3, #28
 800a3ac:	b2da      	uxtb	r2, r3
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	440b      	add	r3, r1
 800a3b8:	3230      	adds	r2, #48	; 0x30
 800a3ba:	b2d2      	uxtb	r2, r2
 800a3bc:	701a      	strb	r2, [r3, #0]
 800a3be:	e00a      	b.n	800a3d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	0f1b      	lsrs	r3, r3, #28
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	440b      	add	r3, r1
 800a3d0:	3237      	adds	r2, #55	; 0x37
 800a3d2:	b2d2      	uxtb	r2, r2
 800a3d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	011b      	lsls	r3, r3, #4
 800a3da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
 800a3de:	005b      	lsls	r3, r3, #1
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	75fb      	strb	r3, [r7, #23]
 800a3f0:	7dfa      	ldrb	r2, [r7, #23]
 800a3f2:	79fb      	ldrb	r3, [r7, #7]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d3d3      	bcc.n	800a3a0 <IntToUnicode+0x18>
  }
}
 800a3f8:	bf00      	nop
 800a3fa:	bf00      	nop
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bc80      	pop	{r7}
 800a402:	4770      	bx	lr

0800a404 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	460b      	mov	r3, r1
 800a40e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	2b01      	cmp	r3, #1
 800a414:	d106      	bne.n	800a424 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800a416:	4b09      	ldr	r3, [pc, #36]	; (800a43c <HAL_PCDEx_SetConnectionState+0x38>)
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	4a08      	ldr	r2, [pc, #32]	; (800a43c <HAL_PCDEx_SetConnectionState+0x38>)
 800a41c:	f043 0301 	orr.w	r3, r3, #1
 800a420:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800a422:	e005      	b.n	800a430 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800a424:	4b05      	ldr	r3, [pc, #20]	; (800a43c <HAL_PCDEx_SetConnectionState+0x38>)
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	4a04      	ldr	r2, [pc, #16]	; (800a43c <HAL_PCDEx_SetConnectionState+0x38>)
 800a42a:	f023 0301 	bic.w	r3, r3, #1
 800a42e:	6053      	str	r3, [r2, #4]
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	bc80      	pop	{r7}
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	40010000 	.word	0x40010000

0800a440 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a0d      	ldr	r2, [pc, #52]	; (800a484 <HAL_PCD_MspInit+0x44>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d113      	bne.n	800a47a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a452:	4b0d      	ldr	r3, [pc, #52]	; (800a488 <HAL_PCD_MspInit+0x48>)
 800a454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a456:	4a0c      	ldr	r2, [pc, #48]	; (800a488 <HAL_PCD_MspInit+0x48>)
 800a458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a45c:	6253      	str	r3, [r2, #36]	; 0x24
 800a45e:	4b0a      	ldr	r3, [pc, #40]	; (800a488 <HAL_PCD_MspInit+0x48>)
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a46a:	2200      	movs	r2, #0
 800a46c:	2100      	movs	r1, #0
 800a46e:	2014      	movs	r0, #20
 800a470:	f7f9 f8bf 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a474:	2014      	movs	r0, #20
 800a476:	f7f9 f8d8 	bl	800362a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a47a:	bf00      	nop
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	40005c00 	.word	0x40005c00
 800a488:	40023800 	.word	0x40023800

0800a48c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	f7fe fe05 	bl	80090b2 <USBD_LL_SetupStage>
}
 800a4a8:	bf00      	nop
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a4c2:	78fa      	ldrb	r2, [r7, #3]
 800a4c4:	6879      	ldr	r1, [r7, #4]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	00db      	lsls	r3, r3, #3
 800a4ce:	440b      	add	r3, r1
 800a4d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	78fb      	ldrb	r3, [r7, #3]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f7fe fe37 	bl	800914c <USBD_LL_DataOutStage>
}
 800a4de:	bf00      	nop
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a4f8:	78fa      	ldrb	r2, [r7, #3]
 800a4fa:	6879      	ldr	r1, [r7, #4]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	440b      	add	r3, r1
 800a506:	333c      	adds	r3, #60	; 0x3c
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	78fb      	ldrb	r3, [r7, #3]
 800a50c:	4619      	mov	r1, r3
 800a50e:	f7fe fe8e 	bl	800922e <USBD_LL_DataInStage>
}
 800a512:	bf00      	nop
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe ff99 	bl	8009460 <USBD_LL_SOF>
}
 800a52e:	bf00      	nop
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a53e:	2301      	movs	r3, #1
 800a540:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d001      	beq.n	800a54e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a54a:	f7f8 fabb 	bl	8002ac4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a554:	7bfa      	ldrb	r2, [r7, #15]
 800a556:	4611      	mov	r1, r2
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fe ff4e 	bl	80093fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a564:	4618      	mov	r0, r3
 800a566:	f7fe ff07 	bl	8009378 <USBD_LL_Reset>
}
 800a56a:	bf00      	nop
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
	...

0800a574 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe ff48 	bl	8009418 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d005      	beq.n	800a59c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a590:	4b04      	ldr	r3, [pc, #16]	; (800a5a4 <HAL_PCD_SuspendCallback+0x30>)
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	4a03      	ldr	r2, [pc, #12]	; (800a5a4 <HAL_PCD_SuspendCallback+0x30>)
 800a596:	f043 0306 	orr.w	r3, r3, #6
 800a59a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a59c:	bf00      	nop
 800a59e:	3708      	adds	r7, #8
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	e000ed00 	.word	0xe000ed00

0800a5a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fe ff42 	bl	8009440 <USBD_LL_Resume>
}
 800a5bc:	bf00      	nop
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a5cc:	4a28      	ldr	r2, [pc, #160]	; (800a670 <USBD_LL_Init+0xac>)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a26      	ldr	r2, [pc, #152]	; (800a670 <USBD_LL_Init+0xac>)
 800a5d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800a5dc:	4b24      	ldr	r3, [pc, #144]	; (800a670 <USBD_LL_Init+0xac>)
 800a5de:	4a25      	ldr	r2, [pc, #148]	; (800a674 <USBD_LL_Init+0xb0>)
 800a5e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a5e2:	4b23      	ldr	r3, [pc, #140]	; (800a670 <USBD_LL_Init+0xac>)
 800a5e4:	2208      	movs	r2, #8
 800a5e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a5e8:	4b21      	ldr	r3, [pc, #132]	; (800a670 <USBD_LL_Init+0xac>)
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a5ee:	4b20      	ldr	r3, [pc, #128]	; (800a670 <USBD_LL_Init+0xac>)
 800a5f0:	2202      	movs	r2, #2
 800a5f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a5f4:	4b1e      	ldr	r3, [pc, #120]	; (800a670 <USBD_LL_Init+0xac>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a5fa:	4b1d      	ldr	r3, [pc, #116]	; (800a670 <USBD_LL_Init+0xac>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a600:	481b      	ldr	r0, [pc, #108]	; (800a670 <USBD_LL_Init+0xac>)
 800a602:	f7f9 fa0d 	bl	8003a20 <HAL_PCD_Init>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a60c:	f7f8 fa5a 	bl	8002ac4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a616:	2318      	movs	r3, #24
 800a618:	2200      	movs	r2, #0
 800a61a:	2100      	movs	r1, #0
 800a61c:	f7fa fdea 	bl	80051f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a626:	2358      	movs	r3, #88	; 0x58
 800a628:	2200      	movs	r2, #0
 800a62a:	2180      	movs	r1, #128	; 0x80
 800a62c:	f7fa fde2 	bl	80051f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a636:	23c0      	movs	r3, #192	; 0xc0
 800a638:	2200      	movs	r2, #0
 800a63a:	2181      	movs	r1, #129	; 0x81
 800a63c:	f7fa fdda 	bl	80051f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a646:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a64a:	2200      	movs	r2, #0
 800a64c:	2101      	movs	r1, #1
 800a64e:	f7fa fdd1 	bl	80051f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a65c:	2200      	movs	r2, #0
 800a65e:	2182      	movs	r1, #130	; 0x82
 800a660:	f7fa fdc8 	bl	80051f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	200014b8 	.word	0x200014b8
 800a674:	40005c00 	.word	0x40005c00

0800a678 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a68e:	4618      	mov	r0, r3
 800a690:	f7f9 faa4 	bl	8003bdc <HAL_PCD_Start>
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 f944 	bl	800a928 <USBD_Get_USB_Status>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	4608      	mov	r0, r1
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	4603      	mov	r3, r0
 800a6be:	70fb      	strb	r3, [r7, #3]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	70bb      	strb	r3, [r7, #2]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a6d6:	78bb      	ldrb	r3, [r7, #2]
 800a6d8:	883a      	ldrh	r2, [r7, #0]
 800a6da:	78f9      	ldrb	r1, [r7, #3]
 800a6dc:	f7f9 fbc0 	bl	8003e60 <HAL_PCD_EP_Open>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 f91e 	bl	800a928 <USBD_Get_USB_Status>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	460b      	mov	r3, r1
 800a704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a714:	78fa      	ldrb	r2, [r7, #3]
 800a716:	4611      	mov	r1, r2
 800a718:	4618      	mov	r0, r3
 800a71a:	f7f9 fc07 	bl	8003f2c <HAL_PCD_EP_Close>
 800a71e:	4603      	mov	r3, r0
 800a720:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	4618      	mov	r0, r3
 800a726:	f000 f8ff 	bl	800a928 <USBD_Get_USB_Status>
 800a72a:	4603      	mov	r3, r0
 800a72c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a72e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a752:	78fa      	ldrb	r2, [r7, #3]
 800a754:	4611      	mov	r1, r2
 800a756:	4618      	mov	r0, r3
 800a758:	f7f9 fcc7 	bl	80040ea <HAL_PCD_EP_SetStall>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a760:	7bfb      	ldrb	r3, [r7, #15]
 800a762:	4618      	mov	r0, r3
 800a764:	f000 f8e0 	bl	800a928 <USBD_Get_USB_Status>
 800a768:	4603      	mov	r3, r0
 800a76a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a76c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	460b      	mov	r3, r1
 800a780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a790:	78fa      	ldrb	r2, [r7, #3]
 800a792:	4611      	mov	r1, r2
 800a794:	4618      	mov	r0, r3
 800a796:	f7f9 fcfa 	bl	800418e <HAL_PCD_EP_ClrStall>
 800a79a:	4603      	mov	r3, r0
 800a79c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 f8c1 	bl	800a928 <USBD_Get_USB_Status>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a7c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	da0c      	bge.n	800a7ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7d0:	78fb      	ldrb	r3, [r7, #3]
 800a7d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d6:	68f9      	ldr	r1, [r7, #12]
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	00db      	lsls	r3, r3, #3
 800a7e2:	440b      	add	r3, r1
 800a7e4:	3302      	adds	r3, #2
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	e00b      	b.n	800a802 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7f0:	68f9      	ldr	r1, [r7, #12]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	00db      	lsls	r3, r3, #3
 800a7fa:	440b      	add	r3, r1
 800a7fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a800:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a802:	4618      	mov	r0, r3
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	bc80      	pop	{r7}
 800a80a:	4770      	bx	lr

0800a80c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a826:	78fa      	ldrb	r2, [r7, #3]
 800a828:	4611      	mov	r1, r2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7f9 faf3 	bl	8003e16 <HAL_PCD_SetAddress>
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	4618      	mov	r0, r3
 800a838:	f000 f876 	bl	800a928 <USBD_Get_USB_Status>
 800a83c:	4603      	mov	r3, r0
 800a83e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a840:	7bbb      	ldrb	r3, [r7, #14]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b086      	sub	sp, #24
 800a84e:	af00      	add	r7, sp, #0
 800a850:	60f8      	str	r0, [r7, #12]
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	461a      	mov	r2, r3
 800a856:	460b      	mov	r3, r1
 800a858:	72fb      	strb	r3, [r7, #11]
 800a85a:	4613      	mov	r3, r2
 800a85c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a86c:	893b      	ldrh	r3, [r7, #8]
 800a86e:	7af9      	ldrb	r1, [r7, #11]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	f7f9 fbf7 	bl	8004064 <HAL_PCD_EP_Transmit>
 800a876:	4603      	mov	r3, r0
 800a878:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a87a:	7dfb      	ldrb	r3, [r7, #23]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 f853 	bl	800a928 <USBD_Get_USB_Status>
 800a882:	4603      	mov	r3, r0
 800a884:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a886:	7dbb      	ldrb	r3, [r7, #22]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	607a      	str	r2, [r7, #4]
 800a89a:	461a      	mov	r2, r3
 800a89c:	460b      	mov	r3, r1
 800a89e:	72fb      	strb	r3, [r7, #11]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a8b2:	893b      	ldrh	r3, [r7, #8]
 800a8b4:	7af9      	ldrb	r1, [r7, #11]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	f7f9 fb80 	bl	8003fbc <HAL_PCD_EP_Receive>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8c0:	7dfb      	ldrb	r3, [r7, #23]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 f830 	bl	800a928 <USBD_Get_USB_Status>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a8e8:	78fa      	ldrb	r2, [r7, #3]
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7f9 fba2 	bl	8004036 <HAL_PCD_EP_GetRxCount>
 800a8f2:	4603      	mov	r3, r0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a904:	4b02      	ldr	r3, [pc, #8]	; (800a910 <USBD_static_malloc+0x14>)
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bc80      	pop	{r7}
 800a90e:	4770      	bx	lr
 800a910:	2000024c 	.word	0x2000024c

0800a914 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]

}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	bc80      	pop	{r7}
 800a924:	4770      	bx	lr
	...

0800a928 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	4603      	mov	r3, r0
 800a930:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	2b03      	cmp	r3, #3
 800a93a:	d817      	bhi.n	800a96c <USBD_Get_USB_Status+0x44>
 800a93c:	a201      	add	r2, pc, #4	; (adr r2, 800a944 <USBD_Get_USB_Status+0x1c>)
 800a93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a942:	bf00      	nop
 800a944:	0800a955 	.word	0x0800a955
 800a948:	0800a95b 	.word	0x0800a95b
 800a94c:	0800a961 	.word	0x0800a961
 800a950:	0800a967 	.word	0x0800a967
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	73fb      	strb	r3, [r7, #15]
    break;
 800a958:	e00b      	b.n	800a972 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a95a:	2302      	movs	r3, #2
 800a95c:	73fb      	strb	r3, [r7, #15]
    break;
 800a95e:	e008      	b.n	800a972 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a960:	2301      	movs	r3, #1
 800a962:	73fb      	strb	r3, [r7, #15]
    break;
 800a964:	e005      	b.n	800a972 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a966:	2302      	movs	r3, #2
 800a968:	73fb      	strb	r3, [r7, #15]
    break;
 800a96a:	e002      	b.n	800a972 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a96c:	2302      	movs	r3, #2
 800a96e:	73fb      	strb	r3, [r7, #15]
    break;
 800a970:	bf00      	nop
  }
  return usb_status;
 800a972:	7bfb      	ldrb	r3, [r7, #15]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	bc80      	pop	{r7}
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop

0800a980 <__errno>:
 800a980:	4b01      	ldr	r3, [pc, #4]	; (800a988 <__errno+0x8>)
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	200001a8 	.word	0x200001a8

0800a98c <__libc_init_array>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	2600      	movs	r6, #0
 800a990:	4d0c      	ldr	r5, [pc, #48]	; (800a9c4 <__libc_init_array+0x38>)
 800a992:	4c0d      	ldr	r4, [pc, #52]	; (800a9c8 <__libc_init_array+0x3c>)
 800a994:	1b64      	subs	r4, r4, r5
 800a996:	10a4      	asrs	r4, r4, #2
 800a998:	42a6      	cmp	r6, r4
 800a99a:	d109      	bne.n	800a9b0 <__libc_init_array+0x24>
 800a99c:	f001 f8c2 	bl	800bb24 <_init>
 800a9a0:	2600      	movs	r6, #0
 800a9a2:	4d0a      	ldr	r5, [pc, #40]	; (800a9cc <__libc_init_array+0x40>)
 800a9a4:	4c0a      	ldr	r4, [pc, #40]	; (800a9d0 <__libc_init_array+0x44>)
 800a9a6:	1b64      	subs	r4, r4, r5
 800a9a8:	10a4      	asrs	r4, r4, #2
 800a9aa:	42a6      	cmp	r6, r4
 800a9ac:	d105      	bne.n	800a9ba <__libc_init_array+0x2e>
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b4:	4798      	blx	r3
 800a9b6:	3601      	adds	r6, #1
 800a9b8:	e7ee      	b.n	800a998 <__libc_init_array+0xc>
 800a9ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9be:	4798      	blx	r3
 800a9c0:	3601      	adds	r6, #1
 800a9c2:	e7f2      	b.n	800a9aa <__libc_init_array+0x1e>
 800a9c4:	0800bbf0 	.word	0x0800bbf0
 800a9c8:	0800bbf0 	.word	0x0800bbf0
 800a9cc:	0800bbf0 	.word	0x0800bbf0
 800a9d0:	0800bbf4 	.word	0x0800bbf4

0800a9d4 <malloc>:
 800a9d4:	4b02      	ldr	r3, [pc, #8]	; (800a9e0 <malloc+0xc>)
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	f000 b865 	b.w	800aaa8 <_malloc_r>
 800a9de:	bf00      	nop
 800a9e0:	200001a8 	.word	0x200001a8

0800a9e4 <memcpy>:
 800a9e4:	440a      	add	r2, r1
 800a9e6:	4291      	cmp	r1, r2
 800a9e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9ec:	d100      	bne.n	800a9f0 <memcpy+0xc>
 800a9ee:	4770      	bx	lr
 800a9f0:	b510      	push	{r4, lr}
 800a9f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9f6:	4291      	cmp	r1, r2
 800a9f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9fc:	d1f9      	bne.n	800a9f2 <memcpy+0xe>
 800a9fe:	bd10      	pop	{r4, pc}

0800aa00 <memset>:
 800aa00:	4603      	mov	r3, r0
 800aa02:	4402      	add	r2, r0
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d100      	bne.n	800aa0a <memset+0xa>
 800aa08:	4770      	bx	lr
 800aa0a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa0e:	e7f9      	b.n	800aa04 <memset+0x4>

0800aa10 <_free_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4605      	mov	r5, r0
 800aa14:	2900      	cmp	r1, #0
 800aa16:	d043      	beq.n	800aaa0 <_free_r+0x90>
 800aa18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa1c:	1f0c      	subs	r4, r1, #4
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bfb8      	it	lt
 800aa22:	18e4      	addlt	r4, r4, r3
 800aa24:	f000 f8b2 	bl	800ab8c <__malloc_lock>
 800aa28:	4a1e      	ldr	r2, [pc, #120]	; (800aaa4 <_free_r+0x94>)
 800aa2a:	6813      	ldr	r3, [r2, #0]
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	b933      	cbnz	r3, 800aa3e <_free_r+0x2e>
 800aa30:	6063      	str	r3, [r4, #4]
 800aa32:	6014      	str	r4, [r2, #0]
 800aa34:	4628      	mov	r0, r5
 800aa36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa3a:	f000 b8ad 	b.w	800ab98 <__malloc_unlock>
 800aa3e:	42a3      	cmp	r3, r4
 800aa40:	d90a      	bls.n	800aa58 <_free_r+0x48>
 800aa42:	6821      	ldr	r1, [r4, #0]
 800aa44:	1862      	adds	r2, r4, r1
 800aa46:	4293      	cmp	r3, r2
 800aa48:	bf01      	itttt	eq
 800aa4a:	681a      	ldreq	r2, [r3, #0]
 800aa4c:	685b      	ldreq	r3, [r3, #4]
 800aa4e:	1852      	addeq	r2, r2, r1
 800aa50:	6022      	streq	r2, [r4, #0]
 800aa52:	6063      	str	r3, [r4, #4]
 800aa54:	6004      	str	r4, [r0, #0]
 800aa56:	e7ed      	b.n	800aa34 <_free_r+0x24>
 800aa58:	461a      	mov	r2, r3
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	b10b      	cbz	r3, 800aa62 <_free_r+0x52>
 800aa5e:	42a3      	cmp	r3, r4
 800aa60:	d9fa      	bls.n	800aa58 <_free_r+0x48>
 800aa62:	6811      	ldr	r1, [r2, #0]
 800aa64:	1850      	adds	r0, r2, r1
 800aa66:	42a0      	cmp	r0, r4
 800aa68:	d10b      	bne.n	800aa82 <_free_r+0x72>
 800aa6a:	6820      	ldr	r0, [r4, #0]
 800aa6c:	4401      	add	r1, r0
 800aa6e:	1850      	adds	r0, r2, r1
 800aa70:	4283      	cmp	r3, r0
 800aa72:	6011      	str	r1, [r2, #0]
 800aa74:	d1de      	bne.n	800aa34 <_free_r+0x24>
 800aa76:	6818      	ldr	r0, [r3, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	4401      	add	r1, r0
 800aa7c:	6011      	str	r1, [r2, #0]
 800aa7e:	6053      	str	r3, [r2, #4]
 800aa80:	e7d8      	b.n	800aa34 <_free_r+0x24>
 800aa82:	d902      	bls.n	800aa8a <_free_r+0x7a>
 800aa84:	230c      	movs	r3, #12
 800aa86:	602b      	str	r3, [r5, #0]
 800aa88:	e7d4      	b.n	800aa34 <_free_r+0x24>
 800aa8a:	6820      	ldr	r0, [r4, #0]
 800aa8c:	1821      	adds	r1, r4, r0
 800aa8e:	428b      	cmp	r3, r1
 800aa90:	bf01      	itttt	eq
 800aa92:	6819      	ldreq	r1, [r3, #0]
 800aa94:	685b      	ldreq	r3, [r3, #4]
 800aa96:	1809      	addeq	r1, r1, r0
 800aa98:	6021      	streq	r1, [r4, #0]
 800aa9a:	6063      	str	r3, [r4, #4]
 800aa9c:	6054      	str	r4, [r2, #4]
 800aa9e:	e7c9      	b.n	800aa34 <_free_r+0x24>
 800aaa0:	bd38      	pop	{r3, r4, r5, pc}
 800aaa2:	bf00      	nop
 800aaa4:	2000046c 	.word	0x2000046c

0800aaa8 <_malloc_r>:
 800aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaaa:	1ccd      	adds	r5, r1, #3
 800aaac:	f025 0503 	bic.w	r5, r5, #3
 800aab0:	3508      	adds	r5, #8
 800aab2:	2d0c      	cmp	r5, #12
 800aab4:	bf38      	it	cc
 800aab6:	250c      	movcc	r5, #12
 800aab8:	2d00      	cmp	r5, #0
 800aaba:	4606      	mov	r6, r0
 800aabc:	db01      	blt.n	800aac2 <_malloc_r+0x1a>
 800aabe:	42a9      	cmp	r1, r5
 800aac0:	d903      	bls.n	800aaca <_malloc_r+0x22>
 800aac2:	230c      	movs	r3, #12
 800aac4:	6033      	str	r3, [r6, #0]
 800aac6:	2000      	movs	r0, #0
 800aac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaca:	f000 f85f 	bl	800ab8c <__malloc_lock>
 800aace:	4921      	ldr	r1, [pc, #132]	; (800ab54 <_malloc_r+0xac>)
 800aad0:	680a      	ldr	r2, [r1, #0]
 800aad2:	4614      	mov	r4, r2
 800aad4:	b99c      	cbnz	r4, 800aafe <_malloc_r+0x56>
 800aad6:	4f20      	ldr	r7, [pc, #128]	; (800ab58 <_malloc_r+0xb0>)
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	b923      	cbnz	r3, 800aae6 <_malloc_r+0x3e>
 800aadc:	4621      	mov	r1, r4
 800aade:	4630      	mov	r0, r6
 800aae0:	f000 f844 	bl	800ab6c <_sbrk_r>
 800aae4:	6038      	str	r0, [r7, #0]
 800aae6:	4629      	mov	r1, r5
 800aae8:	4630      	mov	r0, r6
 800aaea:	f000 f83f 	bl	800ab6c <_sbrk_r>
 800aaee:	1c43      	adds	r3, r0, #1
 800aaf0:	d123      	bne.n	800ab3a <_malloc_r+0x92>
 800aaf2:	230c      	movs	r3, #12
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	6033      	str	r3, [r6, #0]
 800aaf8:	f000 f84e 	bl	800ab98 <__malloc_unlock>
 800aafc:	e7e3      	b.n	800aac6 <_malloc_r+0x1e>
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	1b5b      	subs	r3, r3, r5
 800ab02:	d417      	bmi.n	800ab34 <_malloc_r+0x8c>
 800ab04:	2b0b      	cmp	r3, #11
 800ab06:	d903      	bls.n	800ab10 <_malloc_r+0x68>
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	441c      	add	r4, r3
 800ab0c:	6025      	str	r5, [r4, #0]
 800ab0e:	e004      	b.n	800ab1a <_malloc_r+0x72>
 800ab10:	6863      	ldr	r3, [r4, #4]
 800ab12:	42a2      	cmp	r2, r4
 800ab14:	bf0c      	ite	eq
 800ab16:	600b      	streq	r3, [r1, #0]
 800ab18:	6053      	strne	r3, [r2, #4]
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f000 f83c 	bl	800ab98 <__malloc_unlock>
 800ab20:	f104 000b 	add.w	r0, r4, #11
 800ab24:	1d23      	adds	r3, r4, #4
 800ab26:	f020 0007 	bic.w	r0, r0, #7
 800ab2a:	1ac2      	subs	r2, r0, r3
 800ab2c:	d0cc      	beq.n	800aac8 <_malloc_r+0x20>
 800ab2e:	1a1b      	subs	r3, r3, r0
 800ab30:	50a3      	str	r3, [r4, r2]
 800ab32:	e7c9      	b.n	800aac8 <_malloc_r+0x20>
 800ab34:	4622      	mov	r2, r4
 800ab36:	6864      	ldr	r4, [r4, #4]
 800ab38:	e7cc      	b.n	800aad4 <_malloc_r+0x2c>
 800ab3a:	1cc4      	adds	r4, r0, #3
 800ab3c:	f024 0403 	bic.w	r4, r4, #3
 800ab40:	42a0      	cmp	r0, r4
 800ab42:	d0e3      	beq.n	800ab0c <_malloc_r+0x64>
 800ab44:	1a21      	subs	r1, r4, r0
 800ab46:	4630      	mov	r0, r6
 800ab48:	f000 f810 	bl	800ab6c <_sbrk_r>
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	d1dd      	bne.n	800ab0c <_malloc_r+0x64>
 800ab50:	e7cf      	b.n	800aaf2 <_malloc_r+0x4a>
 800ab52:	bf00      	nop
 800ab54:	2000046c 	.word	0x2000046c
 800ab58:	20000470 	.word	0x20000470

0800ab5c <realloc>:
 800ab5c:	4b02      	ldr	r3, [pc, #8]	; (800ab68 <realloc+0xc>)
 800ab5e:	460a      	mov	r2, r1
 800ab60:	4601      	mov	r1, r0
 800ab62:	6818      	ldr	r0, [r3, #0]
 800ab64:	f000 b81e 	b.w	800aba4 <_realloc_r>
 800ab68:	200001a8 	.word	0x200001a8

0800ab6c <_sbrk_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	2300      	movs	r3, #0
 800ab70:	4d05      	ldr	r5, [pc, #20]	; (800ab88 <_sbrk_r+0x1c>)
 800ab72:	4604      	mov	r4, r0
 800ab74:	4608      	mov	r0, r1
 800ab76:	602b      	str	r3, [r5, #0]
 800ab78:	f7f8 f874 	bl	8002c64 <_sbrk>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d102      	bne.n	800ab86 <_sbrk_r+0x1a>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	b103      	cbz	r3, 800ab86 <_sbrk_r+0x1a>
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	200017a4 	.word	0x200017a4

0800ab8c <__malloc_lock>:
 800ab8c:	4801      	ldr	r0, [pc, #4]	; (800ab94 <__malloc_lock+0x8>)
 800ab8e:	f000 b82f 	b.w	800abf0 <__retarget_lock_acquire_recursive>
 800ab92:	bf00      	nop
 800ab94:	200017ac 	.word	0x200017ac

0800ab98 <__malloc_unlock>:
 800ab98:	4801      	ldr	r0, [pc, #4]	; (800aba0 <__malloc_unlock+0x8>)
 800ab9a:	f000 b82a 	b.w	800abf2 <__retarget_lock_release_recursive>
 800ab9e:	bf00      	nop
 800aba0:	200017ac 	.word	0x200017ac

0800aba4 <_realloc_r>:
 800aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba6:	4607      	mov	r7, r0
 800aba8:	4614      	mov	r4, r2
 800abaa:	460e      	mov	r6, r1
 800abac:	b921      	cbnz	r1, 800abb8 <_realloc_r+0x14>
 800abae:	4611      	mov	r1, r2
 800abb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800abb4:	f7ff bf78 	b.w	800aaa8 <_malloc_r>
 800abb8:	b922      	cbnz	r2, 800abc4 <_realloc_r+0x20>
 800abba:	f7ff ff29 	bl	800aa10 <_free_r>
 800abbe:	4625      	mov	r5, r4
 800abc0:	4628      	mov	r0, r5
 800abc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abc4:	f000 f816 	bl	800abf4 <_malloc_usable_size_r>
 800abc8:	42a0      	cmp	r0, r4
 800abca:	d20f      	bcs.n	800abec <_realloc_r+0x48>
 800abcc:	4621      	mov	r1, r4
 800abce:	4638      	mov	r0, r7
 800abd0:	f7ff ff6a 	bl	800aaa8 <_malloc_r>
 800abd4:	4605      	mov	r5, r0
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d0f2      	beq.n	800abc0 <_realloc_r+0x1c>
 800abda:	4631      	mov	r1, r6
 800abdc:	4622      	mov	r2, r4
 800abde:	f7ff ff01 	bl	800a9e4 <memcpy>
 800abe2:	4631      	mov	r1, r6
 800abe4:	4638      	mov	r0, r7
 800abe6:	f7ff ff13 	bl	800aa10 <_free_r>
 800abea:	e7e9      	b.n	800abc0 <_realloc_r+0x1c>
 800abec:	4635      	mov	r5, r6
 800abee:	e7e7      	b.n	800abc0 <_realloc_r+0x1c>

0800abf0 <__retarget_lock_acquire_recursive>:
 800abf0:	4770      	bx	lr

0800abf2 <__retarget_lock_release_recursive>:
 800abf2:	4770      	bx	lr

0800abf4 <_malloc_usable_size_r>:
 800abf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abf8:	1f18      	subs	r0, r3, #4
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	bfbc      	itt	lt
 800abfe:	580b      	ldrlt	r3, [r1, r0]
 800ac00:	18c0      	addlt	r0, r0, r3
 800ac02:	4770      	bx	lr

0800ac04 <pow>:
 800ac04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac08:	461f      	mov	r7, r3
 800ac0a:	4680      	mov	r8, r0
 800ac0c:	4689      	mov	r9, r1
 800ac0e:	4616      	mov	r6, r2
 800ac10:	f000 f8a6 	bl	800ad60 <__ieee754_pow>
 800ac14:	4b4d      	ldr	r3, [pc, #308]	; (800ad4c <pow+0x148>)
 800ac16:	4604      	mov	r4, r0
 800ac18:	f993 3000 	ldrsb.w	r3, [r3]
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	3301      	adds	r3, #1
 800ac20:	d015      	beq.n	800ac4e <pow+0x4a>
 800ac22:	4632      	mov	r2, r6
 800ac24:	463b      	mov	r3, r7
 800ac26:	4630      	mov	r0, r6
 800ac28:	4639      	mov	r1, r7
 800ac2a:	f7f5 feff 	bl	8000a2c <__aeabi_dcmpun>
 800ac2e:	b970      	cbnz	r0, 800ac4e <pow+0x4a>
 800ac30:	4642      	mov	r2, r8
 800ac32:	464b      	mov	r3, r9
 800ac34:	4640      	mov	r0, r8
 800ac36:	4649      	mov	r1, r9
 800ac38:	f7f5 fef8 	bl	8000a2c <__aeabi_dcmpun>
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	2300      	movs	r3, #0
 800ac40:	b148      	cbz	r0, 800ac56 <pow+0x52>
 800ac42:	4630      	mov	r0, r6
 800ac44:	4639      	mov	r1, r7
 800ac46:	f7f5 febf 	bl	80009c8 <__aeabi_dcmpeq>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d17b      	bne.n	800ad46 <pow+0x142>
 800ac4e:	4620      	mov	r0, r4
 800ac50:	4629      	mov	r1, r5
 800ac52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac56:	4640      	mov	r0, r8
 800ac58:	4649      	mov	r1, r9
 800ac5a:	f7f5 feb5 	bl	80009c8 <__aeabi_dcmpeq>
 800ac5e:	b1e0      	cbz	r0, 800ac9a <pow+0x96>
 800ac60:	2200      	movs	r2, #0
 800ac62:	2300      	movs	r3, #0
 800ac64:	4630      	mov	r0, r6
 800ac66:	4639      	mov	r1, r7
 800ac68:	f7f5 feae 	bl	80009c8 <__aeabi_dcmpeq>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d16a      	bne.n	800ad46 <pow+0x142>
 800ac70:	4630      	mov	r0, r6
 800ac72:	4639      	mov	r1, r7
 800ac74:	f000 fe39 	bl	800b8ea <finite>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d0e8      	beq.n	800ac4e <pow+0x4a>
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	2300      	movs	r3, #0
 800ac80:	4630      	mov	r0, r6
 800ac82:	4639      	mov	r1, r7
 800ac84:	f7f5 feaa 	bl	80009dc <__aeabi_dcmplt>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d0e0      	beq.n	800ac4e <pow+0x4a>
 800ac8c:	f7ff fe78 	bl	800a980 <__errno>
 800ac90:	2321      	movs	r3, #33	; 0x21
 800ac92:	2400      	movs	r4, #0
 800ac94:	6003      	str	r3, [r0, #0]
 800ac96:	4d2e      	ldr	r5, [pc, #184]	; (800ad50 <pow+0x14c>)
 800ac98:	e7d9      	b.n	800ac4e <pow+0x4a>
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	f000 fe24 	bl	800b8ea <finite>
 800aca2:	bba8      	cbnz	r0, 800ad10 <pow+0x10c>
 800aca4:	4640      	mov	r0, r8
 800aca6:	4649      	mov	r1, r9
 800aca8:	f000 fe1f 	bl	800b8ea <finite>
 800acac:	b380      	cbz	r0, 800ad10 <pow+0x10c>
 800acae:	4630      	mov	r0, r6
 800acb0:	4639      	mov	r1, r7
 800acb2:	f000 fe1a 	bl	800b8ea <finite>
 800acb6:	b358      	cbz	r0, 800ad10 <pow+0x10c>
 800acb8:	4622      	mov	r2, r4
 800acba:	462b      	mov	r3, r5
 800acbc:	4620      	mov	r0, r4
 800acbe:	4629      	mov	r1, r5
 800acc0:	f7f5 feb4 	bl	8000a2c <__aeabi_dcmpun>
 800acc4:	b160      	cbz	r0, 800ace0 <pow+0xdc>
 800acc6:	f7ff fe5b 	bl	800a980 <__errno>
 800acca:	2321      	movs	r3, #33	; 0x21
 800accc:	2200      	movs	r2, #0
 800acce:	6003      	str	r3, [r0, #0]
 800acd0:	2300      	movs	r3, #0
 800acd2:	4610      	mov	r0, r2
 800acd4:	4619      	mov	r1, r3
 800acd6:	f7f5 fd39 	bl	800074c <__aeabi_ddiv>
 800acda:	4604      	mov	r4, r0
 800acdc:	460d      	mov	r5, r1
 800acde:	e7b6      	b.n	800ac4e <pow+0x4a>
 800ace0:	f7ff fe4e 	bl	800a980 <__errno>
 800ace4:	2322      	movs	r3, #34	; 0x22
 800ace6:	2200      	movs	r2, #0
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	4649      	mov	r1, r9
 800acec:	2300      	movs	r3, #0
 800acee:	4640      	mov	r0, r8
 800acf0:	f7f5 fe74 	bl	80009dc <__aeabi_dcmplt>
 800acf4:	2400      	movs	r4, #0
 800acf6:	b148      	cbz	r0, 800ad0c <pow+0x108>
 800acf8:	4630      	mov	r0, r6
 800acfa:	4639      	mov	r1, r7
 800acfc:	f000 fe02 	bl	800b904 <rint>
 800ad00:	4632      	mov	r2, r6
 800ad02:	463b      	mov	r3, r7
 800ad04:	f7f5 fe60 	bl	80009c8 <__aeabi_dcmpeq>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d0c4      	beq.n	800ac96 <pow+0x92>
 800ad0c:	4d11      	ldr	r5, [pc, #68]	; (800ad54 <pow+0x150>)
 800ad0e:	e79e      	b.n	800ac4e <pow+0x4a>
 800ad10:	2200      	movs	r2, #0
 800ad12:	2300      	movs	r3, #0
 800ad14:	4620      	mov	r0, r4
 800ad16:	4629      	mov	r1, r5
 800ad18:	f7f5 fe56 	bl	80009c8 <__aeabi_dcmpeq>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d096      	beq.n	800ac4e <pow+0x4a>
 800ad20:	4640      	mov	r0, r8
 800ad22:	4649      	mov	r1, r9
 800ad24:	f000 fde1 	bl	800b8ea <finite>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d090      	beq.n	800ac4e <pow+0x4a>
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f000 fddb 	bl	800b8ea <finite>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d08a      	beq.n	800ac4e <pow+0x4a>
 800ad38:	f7ff fe22 	bl	800a980 <__errno>
 800ad3c:	2322      	movs	r3, #34	; 0x22
 800ad3e:	2400      	movs	r4, #0
 800ad40:	2500      	movs	r5, #0
 800ad42:	6003      	str	r3, [r0, #0]
 800ad44:	e783      	b.n	800ac4e <pow+0x4a>
 800ad46:	2400      	movs	r4, #0
 800ad48:	4d03      	ldr	r5, [pc, #12]	; (800ad58 <pow+0x154>)
 800ad4a:	e780      	b.n	800ac4e <pow+0x4a>
 800ad4c:	2000020c 	.word	0x2000020c
 800ad50:	fff00000 	.word	0xfff00000
 800ad54:	7ff00000 	.word	0x7ff00000
 800ad58:	3ff00000 	.word	0x3ff00000
 800ad5c:	00000000 	.word	0x00000000

0800ad60 <__ieee754_pow>:
 800ad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad64:	b093      	sub	sp, #76	; 0x4c
 800ad66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad6a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800ad6e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ad72:	ea55 0302 	orrs.w	r3, r5, r2
 800ad76:	4607      	mov	r7, r0
 800ad78:	4688      	mov	r8, r1
 800ad7a:	f000 84bf 	beq.w	800b6fc <__ieee754_pow+0x99c>
 800ad7e:	4b7e      	ldr	r3, [pc, #504]	; (800af78 <__ieee754_pow+0x218>)
 800ad80:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800ad84:	429c      	cmp	r4, r3
 800ad86:	4689      	mov	r9, r1
 800ad88:	4682      	mov	sl, r0
 800ad8a:	dc09      	bgt.n	800ada0 <__ieee754_pow+0x40>
 800ad8c:	d103      	bne.n	800ad96 <__ieee754_pow+0x36>
 800ad8e:	b978      	cbnz	r0, 800adb0 <__ieee754_pow+0x50>
 800ad90:	42a5      	cmp	r5, r4
 800ad92:	dd02      	ble.n	800ad9a <__ieee754_pow+0x3a>
 800ad94:	e00c      	b.n	800adb0 <__ieee754_pow+0x50>
 800ad96:	429d      	cmp	r5, r3
 800ad98:	dc02      	bgt.n	800ada0 <__ieee754_pow+0x40>
 800ad9a:	429d      	cmp	r5, r3
 800ad9c:	d10e      	bne.n	800adbc <__ieee754_pow+0x5c>
 800ad9e:	b16a      	cbz	r2, 800adbc <__ieee754_pow+0x5c>
 800ada0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ada4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ada8:	ea54 030a 	orrs.w	r3, r4, sl
 800adac:	f000 84a6 	beq.w	800b6fc <__ieee754_pow+0x99c>
 800adb0:	4872      	ldr	r0, [pc, #456]	; (800af7c <__ieee754_pow+0x21c>)
 800adb2:	b013      	add	sp, #76	; 0x4c
 800adb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb8:	f000 bd9e 	b.w	800b8f8 <nan>
 800adbc:	f1b9 0f00 	cmp.w	r9, #0
 800adc0:	da39      	bge.n	800ae36 <__ieee754_pow+0xd6>
 800adc2:	4b6f      	ldr	r3, [pc, #444]	; (800af80 <__ieee754_pow+0x220>)
 800adc4:	429d      	cmp	r5, r3
 800adc6:	dc54      	bgt.n	800ae72 <__ieee754_pow+0x112>
 800adc8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800adcc:	429d      	cmp	r5, r3
 800adce:	f340 84a6 	ble.w	800b71e <__ieee754_pow+0x9be>
 800add2:	152b      	asrs	r3, r5, #20
 800add4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800add8:	2b14      	cmp	r3, #20
 800adda:	dd0f      	ble.n	800adfc <__ieee754_pow+0x9c>
 800addc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ade0:	fa22 f103 	lsr.w	r1, r2, r3
 800ade4:	fa01 f303 	lsl.w	r3, r1, r3
 800ade8:	4293      	cmp	r3, r2
 800adea:	f040 8498 	bne.w	800b71e <__ieee754_pow+0x9be>
 800adee:	f001 0101 	and.w	r1, r1, #1
 800adf2:	f1c1 0302 	rsb	r3, r1, #2
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	b182      	cbz	r2, 800ae1c <__ieee754_pow+0xbc>
 800adfa:	e05e      	b.n	800aeba <__ieee754_pow+0x15a>
 800adfc:	2a00      	cmp	r2, #0
 800adfe:	d15a      	bne.n	800aeb6 <__ieee754_pow+0x156>
 800ae00:	f1c3 0314 	rsb	r3, r3, #20
 800ae04:	fa45 f103 	asr.w	r1, r5, r3
 800ae08:	fa01 f303 	lsl.w	r3, r1, r3
 800ae0c:	42ab      	cmp	r3, r5
 800ae0e:	f040 8483 	bne.w	800b718 <__ieee754_pow+0x9b8>
 800ae12:	f001 0101 	and.w	r1, r1, #1
 800ae16:	f1c1 0302 	rsb	r3, r1, #2
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	4b59      	ldr	r3, [pc, #356]	; (800af84 <__ieee754_pow+0x224>)
 800ae1e:	429d      	cmp	r5, r3
 800ae20:	d130      	bne.n	800ae84 <__ieee754_pow+0x124>
 800ae22:	2e00      	cmp	r6, #0
 800ae24:	f280 8474 	bge.w	800b710 <__ieee754_pow+0x9b0>
 800ae28:	463a      	mov	r2, r7
 800ae2a:	4643      	mov	r3, r8
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	4955      	ldr	r1, [pc, #340]	; (800af84 <__ieee754_pow+0x224>)
 800ae30:	f7f5 fc8c 	bl	800074c <__aeabi_ddiv>
 800ae34:	e02f      	b.n	800ae96 <__ieee754_pow+0x136>
 800ae36:	2300      	movs	r3, #0
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	2a00      	cmp	r2, #0
 800ae3c:	d13d      	bne.n	800aeba <__ieee754_pow+0x15a>
 800ae3e:	4b4e      	ldr	r3, [pc, #312]	; (800af78 <__ieee754_pow+0x218>)
 800ae40:	429d      	cmp	r5, r3
 800ae42:	d1eb      	bne.n	800ae1c <__ieee754_pow+0xbc>
 800ae44:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ae48:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ae4c:	ea53 030a 	orrs.w	r3, r3, sl
 800ae50:	f000 8454 	beq.w	800b6fc <__ieee754_pow+0x99c>
 800ae54:	4b4c      	ldr	r3, [pc, #304]	; (800af88 <__ieee754_pow+0x228>)
 800ae56:	429c      	cmp	r4, r3
 800ae58:	dd0d      	ble.n	800ae76 <__ieee754_pow+0x116>
 800ae5a:	2e00      	cmp	r6, #0
 800ae5c:	f280 8454 	bge.w	800b708 <__ieee754_pow+0x9a8>
 800ae60:	f04f 0b00 	mov.w	fp, #0
 800ae64:	f04f 0c00 	mov.w	ip, #0
 800ae68:	4658      	mov	r0, fp
 800ae6a:	4661      	mov	r1, ip
 800ae6c:	b013      	add	sp, #76	; 0x4c
 800ae6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae72:	2302      	movs	r3, #2
 800ae74:	e7e0      	b.n	800ae38 <__ieee754_pow+0xd8>
 800ae76:	2e00      	cmp	r6, #0
 800ae78:	daf2      	bge.n	800ae60 <__ieee754_pow+0x100>
 800ae7a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ae7e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ae82:	e7f1      	b.n	800ae68 <__ieee754_pow+0x108>
 800ae84:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800ae88:	d108      	bne.n	800ae9c <__ieee754_pow+0x13c>
 800ae8a:	463a      	mov	r2, r7
 800ae8c:	4643      	mov	r3, r8
 800ae8e:	4638      	mov	r0, r7
 800ae90:	4641      	mov	r1, r8
 800ae92:	f7f5 fb31 	bl	80004f8 <__aeabi_dmul>
 800ae96:	4683      	mov	fp, r0
 800ae98:	468c      	mov	ip, r1
 800ae9a:	e7e5      	b.n	800ae68 <__ieee754_pow+0x108>
 800ae9c:	4b3b      	ldr	r3, [pc, #236]	; (800af8c <__ieee754_pow+0x22c>)
 800ae9e:	429e      	cmp	r6, r3
 800aea0:	d10b      	bne.n	800aeba <__ieee754_pow+0x15a>
 800aea2:	f1b9 0f00 	cmp.w	r9, #0
 800aea6:	db08      	blt.n	800aeba <__ieee754_pow+0x15a>
 800aea8:	4638      	mov	r0, r7
 800aeaa:	4641      	mov	r1, r8
 800aeac:	b013      	add	sp, #76	; 0x4c
 800aeae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb2:	f000 bc6b 	b.w	800b78c <__ieee754_sqrt>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	4638      	mov	r0, r7
 800aebc:	4641      	mov	r1, r8
 800aebe:	f000 fd11 	bl	800b8e4 <fabs>
 800aec2:	4683      	mov	fp, r0
 800aec4:	468c      	mov	ip, r1
 800aec6:	f1ba 0f00 	cmp.w	sl, #0
 800aeca:	d129      	bne.n	800af20 <__ieee754_pow+0x1c0>
 800aecc:	b124      	cbz	r4, 800aed8 <__ieee754_pow+0x178>
 800aece:	4b2d      	ldr	r3, [pc, #180]	; (800af84 <__ieee754_pow+0x224>)
 800aed0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d123      	bne.n	800af20 <__ieee754_pow+0x1c0>
 800aed8:	2e00      	cmp	r6, #0
 800aeda:	da07      	bge.n	800aeec <__ieee754_pow+0x18c>
 800aedc:	465a      	mov	r2, fp
 800aede:	4663      	mov	r3, ip
 800aee0:	2000      	movs	r0, #0
 800aee2:	4928      	ldr	r1, [pc, #160]	; (800af84 <__ieee754_pow+0x224>)
 800aee4:	f7f5 fc32 	bl	800074c <__aeabi_ddiv>
 800aee8:	4683      	mov	fp, r0
 800aeea:	468c      	mov	ip, r1
 800aeec:	f1b9 0f00 	cmp.w	r9, #0
 800aef0:	daba      	bge.n	800ae68 <__ieee754_pow+0x108>
 800aef2:	9b00      	ldr	r3, [sp, #0]
 800aef4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800aef8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aefc:	4323      	orrs	r3, r4
 800aefe:	d108      	bne.n	800af12 <__ieee754_pow+0x1b2>
 800af00:	465a      	mov	r2, fp
 800af02:	4663      	mov	r3, ip
 800af04:	4658      	mov	r0, fp
 800af06:	4661      	mov	r1, ip
 800af08:	f7f5 f93e 	bl	8000188 <__aeabi_dsub>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	e78e      	b.n	800ae30 <__ieee754_pow+0xd0>
 800af12:	9b00      	ldr	r3, [sp, #0]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d1a7      	bne.n	800ae68 <__ieee754_pow+0x108>
 800af18:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800af1c:	469c      	mov	ip, r3
 800af1e:	e7a3      	b.n	800ae68 <__ieee754_pow+0x108>
 800af20:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800af24:	3b01      	subs	r3, #1
 800af26:	930c      	str	r3, [sp, #48]	; 0x30
 800af28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af2a:	9b00      	ldr	r3, [sp, #0]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	d104      	bne.n	800af3a <__ieee754_pow+0x1da>
 800af30:	463a      	mov	r2, r7
 800af32:	4643      	mov	r3, r8
 800af34:	4638      	mov	r0, r7
 800af36:	4641      	mov	r1, r8
 800af38:	e7e6      	b.n	800af08 <__ieee754_pow+0x1a8>
 800af3a:	4b15      	ldr	r3, [pc, #84]	; (800af90 <__ieee754_pow+0x230>)
 800af3c:	429d      	cmp	r5, r3
 800af3e:	f340 80f9 	ble.w	800b134 <__ieee754_pow+0x3d4>
 800af42:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800af46:	429d      	cmp	r5, r3
 800af48:	4b0f      	ldr	r3, [pc, #60]	; (800af88 <__ieee754_pow+0x228>)
 800af4a:	dd09      	ble.n	800af60 <__ieee754_pow+0x200>
 800af4c:	429c      	cmp	r4, r3
 800af4e:	dc0c      	bgt.n	800af6a <__ieee754_pow+0x20a>
 800af50:	2e00      	cmp	r6, #0
 800af52:	da85      	bge.n	800ae60 <__ieee754_pow+0x100>
 800af54:	a306      	add	r3, pc, #24	; (adr r3, 800af70 <__ieee754_pow+0x210>)
 800af56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5a:	4610      	mov	r0, r2
 800af5c:	4619      	mov	r1, r3
 800af5e:	e798      	b.n	800ae92 <__ieee754_pow+0x132>
 800af60:	429c      	cmp	r4, r3
 800af62:	dbf5      	blt.n	800af50 <__ieee754_pow+0x1f0>
 800af64:	4b07      	ldr	r3, [pc, #28]	; (800af84 <__ieee754_pow+0x224>)
 800af66:	429c      	cmp	r4, r3
 800af68:	dd14      	ble.n	800af94 <__ieee754_pow+0x234>
 800af6a:	2e00      	cmp	r6, #0
 800af6c:	dcf2      	bgt.n	800af54 <__ieee754_pow+0x1f4>
 800af6e:	e777      	b.n	800ae60 <__ieee754_pow+0x100>
 800af70:	8800759c 	.word	0x8800759c
 800af74:	7e37e43c 	.word	0x7e37e43c
 800af78:	7ff00000 	.word	0x7ff00000
 800af7c:	0800bba4 	.word	0x0800bba4
 800af80:	433fffff 	.word	0x433fffff
 800af84:	3ff00000 	.word	0x3ff00000
 800af88:	3fefffff 	.word	0x3fefffff
 800af8c:	3fe00000 	.word	0x3fe00000
 800af90:	41e00000 	.word	0x41e00000
 800af94:	4661      	mov	r1, ip
 800af96:	2200      	movs	r2, #0
 800af98:	4658      	mov	r0, fp
 800af9a:	4b61      	ldr	r3, [pc, #388]	; (800b120 <__ieee754_pow+0x3c0>)
 800af9c:	f7f5 f8f4 	bl	8000188 <__aeabi_dsub>
 800afa0:	a355      	add	r3, pc, #340	; (adr r3, 800b0f8 <__ieee754_pow+0x398>)
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	4604      	mov	r4, r0
 800afa8:	460d      	mov	r5, r1
 800afaa:	f7f5 faa5 	bl	80004f8 <__aeabi_dmul>
 800afae:	a354      	add	r3, pc, #336	; (adr r3, 800b100 <__ieee754_pow+0x3a0>)
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	4606      	mov	r6, r0
 800afb6:	460f      	mov	r7, r1
 800afb8:	4620      	mov	r0, r4
 800afba:	4629      	mov	r1, r5
 800afbc:	f7f5 fa9c 	bl	80004f8 <__aeabi_dmul>
 800afc0:	2200      	movs	r2, #0
 800afc2:	4682      	mov	sl, r0
 800afc4:	468b      	mov	fp, r1
 800afc6:	4620      	mov	r0, r4
 800afc8:	4629      	mov	r1, r5
 800afca:	4b56      	ldr	r3, [pc, #344]	; (800b124 <__ieee754_pow+0x3c4>)
 800afcc:	f7f5 fa94 	bl	80004f8 <__aeabi_dmul>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	a14c      	add	r1, pc, #304	; (adr r1, 800b108 <__ieee754_pow+0x3a8>)
 800afd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afda:	f7f5 f8d5 	bl	8000188 <__aeabi_dsub>
 800afde:	4622      	mov	r2, r4
 800afe0:	462b      	mov	r3, r5
 800afe2:	f7f5 fa89 	bl	80004f8 <__aeabi_dmul>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	2000      	movs	r0, #0
 800afec:	494e      	ldr	r1, [pc, #312]	; (800b128 <__ieee754_pow+0x3c8>)
 800afee:	f7f5 f8cb 	bl	8000188 <__aeabi_dsub>
 800aff2:	4622      	mov	r2, r4
 800aff4:	462b      	mov	r3, r5
 800aff6:	4680      	mov	r8, r0
 800aff8:	4689      	mov	r9, r1
 800affa:	4620      	mov	r0, r4
 800affc:	4629      	mov	r1, r5
 800affe:	f7f5 fa7b 	bl	80004f8 <__aeabi_dmul>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4640      	mov	r0, r8
 800b008:	4649      	mov	r1, r9
 800b00a:	f7f5 fa75 	bl	80004f8 <__aeabi_dmul>
 800b00e:	a340      	add	r3, pc, #256	; (adr r3, 800b110 <__ieee754_pow+0x3b0>)
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	f7f5 fa70 	bl	80004f8 <__aeabi_dmul>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4650      	mov	r0, sl
 800b01e:	4659      	mov	r1, fp
 800b020:	f7f5 f8b2 	bl	8000188 <__aeabi_dsub>
 800b024:	f04f 0a00 	mov.w	sl, #0
 800b028:	4602      	mov	r2, r0
 800b02a:	460b      	mov	r3, r1
 800b02c:	4604      	mov	r4, r0
 800b02e:	460d      	mov	r5, r1
 800b030:	4630      	mov	r0, r6
 800b032:	4639      	mov	r1, r7
 800b034:	f7f5 f8aa 	bl	800018c <__adddf3>
 800b038:	4632      	mov	r2, r6
 800b03a:	463b      	mov	r3, r7
 800b03c:	4650      	mov	r0, sl
 800b03e:	468b      	mov	fp, r1
 800b040:	f7f5 f8a2 	bl	8000188 <__aeabi_dsub>
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	4620      	mov	r0, r4
 800b04a:	4629      	mov	r1, r5
 800b04c:	f7f5 f89c 	bl	8000188 <__aeabi_dsub>
 800b050:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b054:	9b00      	ldr	r3, [sp, #0]
 800b056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b058:	3b01      	subs	r3, #1
 800b05a:	4313      	orrs	r3, r2
 800b05c:	f04f 0600 	mov.w	r6, #0
 800b060:	f04f 0200 	mov.w	r2, #0
 800b064:	bf0c      	ite	eq
 800b066:	4b31      	ldreq	r3, [pc, #196]	; (800b12c <__ieee754_pow+0x3cc>)
 800b068:	4b2d      	ldrne	r3, [pc, #180]	; (800b120 <__ieee754_pow+0x3c0>)
 800b06a:	4604      	mov	r4, r0
 800b06c:	460d      	mov	r5, r1
 800b06e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b072:	e9cd 2300 	strd	r2, r3, [sp]
 800b076:	4632      	mov	r2, r6
 800b078:	463b      	mov	r3, r7
 800b07a:	f7f5 f885 	bl	8000188 <__aeabi_dsub>
 800b07e:	4652      	mov	r2, sl
 800b080:	465b      	mov	r3, fp
 800b082:	f7f5 fa39 	bl	80004f8 <__aeabi_dmul>
 800b086:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b08a:	4680      	mov	r8, r0
 800b08c:	4689      	mov	r9, r1
 800b08e:	4620      	mov	r0, r4
 800b090:	4629      	mov	r1, r5
 800b092:	f7f5 fa31 	bl	80004f8 <__aeabi_dmul>
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	4640      	mov	r0, r8
 800b09c:	4649      	mov	r1, r9
 800b09e:	f7f5 f875 	bl	800018c <__adddf3>
 800b0a2:	4632      	mov	r2, r6
 800b0a4:	463b      	mov	r3, r7
 800b0a6:	4680      	mov	r8, r0
 800b0a8:	4689      	mov	r9, r1
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	4659      	mov	r1, fp
 800b0ae:	f7f5 fa23 	bl	80004f8 <__aeabi_dmul>
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	460d      	mov	r5, r1
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	4640      	mov	r0, r8
 800b0be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b0c2:	f7f5 f863 	bl	800018c <__adddf3>
 800b0c6:	4b1a      	ldr	r3, [pc, #104]	; (800b130 <__ieee754_pow+0x3d0>)
 800b0c8:	4682      	mov	sl, r0
 800b0ca:	4299      	cmp	r1, r3
 800b0cc:	460f      	mov	r7, r1
 800b0ce:	460e      	mov	r6, r1
 800b0d0:	f340 82ed 	ble.w	800b6ae <__ieee754_pow+0x94e>
 800b0d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b0d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b0dc:	4303      	orrs	r3, r0
 800b0de:	f000 81e7 	beq.w	800b4b0 <__ieee754_pow+0x750>
 800b0e2:	a30d      	add	r3, pc, #52	; (adr r3, 800b118 <__ieee754_pow+0x3b8>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0ec:	f7f5 fa04 	bl	80004f8 <__aeabi_dmul>
 800b0f0:	a309      	add	r3, pc, #36	; (adr r3, 800b118 <__ieee754_pow+0x3b8>)
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	e6cc      	b.n	800ae92 <__ieee754_pow+0x132>
 800b0f8:	60000000 	.word	0x60000000
 800b0fc:	3ff71547 	.word	0x3ff71547
 800b100:	f85ddf44 	.word	0xf85ddf44
 800b104:	3e54ae0b 	.word	0x3e54ae0b
 800b108:	55555555 	.word	0x55555555
 800b10c:	3fd55555 	.word	0x3fd55555
 800b110:	652b82fe 	.word	0x652b82fe
 800b114:	3ff71547 	.word	0x3ff71547
 800b118:	8800759c 	.word	0x8800759c
 800b11c:	7e37e43c 	.word	0x7e37e43c
 800b120:	3ff00000 	.word	0x3ff00000
 800b124:	3fd00000 	.word	0x3fd00000
 800b128:	3fe00000 	.word	0x3fe00000
 800b12c:	bff00000 	.word	0xbff00000
 800b130:	408fffff 	.word	0x408fffff
 800b134:	4bd4      	ldr	r3, [pc, #848]	; (800b488 <__ieee754_pow+0x728>)
 800b136:	2200      	movs	r2, #0
 800b138:	ea09 0303 	and.w	r3, r9, r3
 800b13c:	b943      	cbnz	r3, 800b150 <__ieee754_pow+0x3f0>
 800b13e:	4658      	mov	r0, fp
 800b140:	4661      	mov	r1, ip
 800b142:	4bd2      	ldr	r3, [pc, #840]	; (800b48c <__ieee754_pow+0x72c>)
 800b144:	f7f5 f9d8 	bl	80004f8 <__aeabi_dmul>
 800b148:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b14c:	4683      	mov	fp, r0
 800b14e:	460c      	mov	r4, r1
 800b150:	1523      	asrs	r3, r4, #20
 800b152:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b156:	4413      	add	r3, r2
 800b158:	930b      	str	r3, [sp, #44]	; 0x2c
 800b15a:	4bcd      	ldr	r3, [pc, #820]	; (800b490 <__ieee754_pow+0x730>)
 800b15c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b160:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b164:	429c      	cmp	r4, r3
 800b166:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b16a:	dd08      	ble.n	800b17e <__ieee754_pow+0x41e>
 800b16c:	4bc9      	ldr	r3, [pc, #804]	; (800b494 <__ieee754_pow+0x734>)
 800b16e:	429c      	cmp	r4, r3
 800b170:	f340 819c 	ble.w	800b4ac <__ieee754_pow+0x74c>
 800b174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b176:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b17a:	3301      	adds	r3, #1
 800b17c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b17e:	2600      	movs	r6, #0
 800b180:	00f3      	lsls	r3, r6, #3
 800b182:	930d      	str	r3, [sp, #52]	; 0x34
 800b184:	4bc4      	ldr	r3, [pc, #784]	; (800b498 <__ieee754_pow+0x738>)
 800b186:	4658      	mov	r0, fp
 800b188:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b18c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b190:	4629      	mov	r1, r5
 800b192:	461a      	mov	r2, r3
 800b194:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b198:	4623      	mov	r3, r4
 800b19a:	f7f4 fff5 	bl	8000188 <__aeabi_dsub>
 800b19e:	46da      	mov	sl, fp
 800b1a0:	462b      	mov	r3, r5
 800b1a2:	4652      	mov	r2, sl
 800b1a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b1a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1ac:	f7f4 ffee 	bl	800018c <__adddf3>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	49b9      	ldr	r1, [pc, #740]	; (800b49c <__ieee754_pow+0x73c>)
 800b1b8:	f7f5 fac8 	bl	800074c <__aeabi_ddiv>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b1c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b1c8:	f7f5 f996 	bl	80004f8 <__aeabi_dmul>
 800b1cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b1d0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b1d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2200      	movs	r2, #0
 800b1dc:	46ab      	mov	fp, r5
 800b1de:	106d      	asrs	r5, r5, #1
 800b1e0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b1e4:	9304      	str	r3, [sp, #16]
 800b1e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b1ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b1ee:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	4614      	mov	r4, r2
 800b1f8:	461d      	mov	r5, r3
 800b1fa:	f7f5 f97d 	bl	80004f8 <__aeabi_dmul>
 800b1fe:	4602      	mov	r2, r0
 800b200:	460b      	mov	r3, r1
 800b202:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b206:	f7f4 ffbf 	bl	8000188 <__aeabi_dsub>
 800b20a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b20e:	4606      	mov	r6, r0
 800b210:	460f      	mov	r7, r1
 800b212:	4620      	mov	r0, r4
 800b214:	4629      	mov	r1, r5
 800b216:	f7f4 ffb7 	bl	8000188 <__aeabi_dsub>
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	4650      	mov	r0, sl
 800b220:	4659      	mov	r1, fp
 800b222:	f7f4 ffb1 	bl	8000188 <__aeabi_dsub>
 800b226:	4642      	mov	r2, r8
 800b228:	464b      	mov	r3, r9
 800b22a:	f7f5 f965 	bl	80004f8 <__aeabi_dmul>
 800b22e:	4602      	mov	r2, r0
 800b230:	460b      	mov	r3, r1
 800b232:	4630      	mov	r0, r6
 800b234:	4639      	mov	r1, r7
 800b236:	f7f4 ffa7 	bl	8000188 <__aeabi_dsub>
 800b23a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b23e:	f7f5 f95b 	bl	80004f8 <__aeabi_dmul>
 800b242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b246:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b24a:	4610      	mov	r0, r2
 800b24c:	4619      	mov	r1, r3
 800b24e:	f7f5 f953 	bl	80004f8 <__aeabi_dmul>
 800b252:	a37b      	add	r3, pc, #492	; (adr r3, 800b440 <__ieee754_pow+0x6e0>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	4604      	mov	r4, r0
 800b25a:	460d      	mov	r5, r1
 800b25c:	f7f5 f94c 	bl	80004f8 <__aeabi_dmul>
 800b260:	a379      	add	r3, pc, #484	; (adr r3, 800b448 <__ieee754_pow+0x6e8>)
 800b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b266:	f7f4 ff91 	bl	800018c <__adddf3>
 800b26a:	4622      	mov	r2, r4
 800b26c:	462b      	mov	r3, r5
 800b26e:	f7f5 f943 	bl	80004f8 <__aeabi_dmul>
 800b272:	a377      	add	r3, pc, #476	; (adr r3, 800b450 <__ieee754_pow+0x6f0>)
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	f7f4 ff88 	bl	800018c <__adddf3>
 800b27c:	4622      	mov	r2, r4
 800b27e:	462b      	mov	r3, r5
 800b280:	f7f5 f93a 	bl	80004f8 <__aeabi_dmul>
 800b284:	a374      	add	r3, pc, #464	; (adr r3, 800b458 <__ieee754_pow+0x6f8>)
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	f7f4 ff7f 	bl	800018c <__adddf3>
 800b28e:	4622      	mov	r2, r4
 800b290:	462b      	mov	r3, r5
 800b292:	f7f5 f931 	bl	80004f8 <__aeabi_dmul>
 800b296:	a372      	add	r3, pc, #456	; (adr r3, 800b460 <__ieee754_pow+0x700>)
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	f7f4 ff76 	bl	800018c <__adddf3>
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	462b      	mov	r3, r5
 800b2a4:	f7f5 f928 	bl	80004f8 <__aeabi_dmul>
 800b2a8:	a36f      	add	r3, pc, #444	; (adr r3, 800b468 <__ieee754_pow+0x708>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	f7f4 ff6d 	bl	800018c <__adddf3>
 800b2b2:	4622      	mov	r2, r4
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	460f      	mov	r7, r1
 800b2b8:	462b      	mov	r3, r5
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	4629      	mov	r1, r5
 800b2be:	f7f5 f91b 	bl	80004f8 <__aeabi_dmul>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	f7f5 f915 	bl	80004f8 <__aeabi_dmul>
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	460d      	mov	r5, r1
 800b2d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2d6:	4642      	mov	r2, r8
 800b2d8:	464b      	mov	r3, r9
 800b2da:	f7f4 ff57 	bl	800018c <__adddf3>
 800b2de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2e2:	f7f5 f909 	bl	80004f8 <__aeabi_dmul>
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	462b      	mov	r3, r5
 800b2ea:	f7f4 ff4f 	bl	800018c <__adddf3>
 800b2ee:	4642      	mov	r2, r8
 800b2f0:	4606      	mov	r6, r0
 800b2f2:	460f      	mov	r7, r1
 800b2f4:	464b      	mov	r3, r9
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	f7f5 f8fd 	bl	80004f8 <__aeabi_dmul>
 800b2fe:	2200      	movs	r2, #0
 800b300:	4b67      	ldr	r3, [pc, #412]	; (800b4a0 <__ieee754_pow+0x740>)
 800b302:	4682      	mov	sl, r0
 800b304:	468b      	mov	fp, r1
 800b306:	f7f4 ff41 	bl	800018c <__adddf3>
 800b30a:	4632      	mov	r2, r6
 800b30c:	463b      	mov	r3, r7
 800b30e:	f7f4 ff3d 	bl	800018c <__adddf3>
 800b312:	9c04      	ldr	r4, [sp, #16]
 800b314:	460d      	mov	r5, r1
 800b316:	4622      	mov	r2, r4
 800b318:	460b      	mov	r3, r1
 800b31a:	4640      	mov	r0, r8
 800b31c:	4649      	mov	r1, r9
 800b31e:	f7f5 f8eb 	bl	80004f8 <__aeabi_dmul>
 800b322:	2200      	movs	r2, #0
 800b324:	4680      	mov	r8, r0
 800b326:	4689      	mov	r9, r1
 800b328:	4620      	mov	r0, r4
 800b32a:	4629      	mov	r1, r5
 800b32c:	4b5c      	ldr	r3, [pc, #368]	; (800b4a0 <__ieee754_pow+0x740>)
 800b32e:	f7f4 ff2b 	bl	8000188 <__aeabi_dsub>
 800b332:	4652      	mov	r2, sl
 800b334:	465b      	mov	r3, fp
 800b336:	f7f4 ff27 	bl	8000188 <__aeabi_dsub>
 800b33a:	4602      	mov	r2, r0
 800b33c:	460b      	mov	r3, r1
 800b33e:	4630      	mov	r0, r6
 800b340:	4639      	mov	r1, r7
 800b342:	f7f4 ff21 	bl	8000188 <__aeabi_dsub>
 800b346:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b34a:	f7f5 f8d5 	bl	80004f8 <__aeabi_dmul>
 800b34e:	4622      	mov	r2, r4
 800b350:	4606      	mov	r6, r0
 800b352:	460f      	mov	r7, r1
 800b354:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b358:	462b      	mov	r3, r5
 800b35a:	f7f5 f8cd 	bl	80004f8 <__aeabi_dmul>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	4630      	mov	r0, r6
 800b364:	4639      	mov	r1, r7
 800b366:	f7f4 ff11 	bl	800018c <__adddf3>
 800b36a:	4606      	mov	r6, r0
 800b36c:	460f      	mov	r7, r1
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4640      	mov	r0, r8
 800b374:	4649      	mov	r1, r9
 800b376:	f7f4 ff09 	bl	800018c <__adddf3>
 800b37a:	a33d      	add	r3, pc, #244	; (adr r3, 800b470 <__ieee754_pow+0x710>)
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	9c04      	ldr	r4, [sp, #16]
 800b382:	460d      	mov	r5, r1
 800b384:	4620      	mov	r0, r4
 800b386:	f7f5 f8b7 	bl	80004f8 <__aeabi_dmul>
 800b38a:	4642      	mov	r2, r8
 800b38c:	464b      	mov	r3, r9
 800b38e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b392:	4620      	mov	r0, r4
 800b394:	4629      	mov	r1, r5
 800b396:	f7f4 fef7 	bl	8000188 <__aeabi_dsub>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	4630      	mov	r0, r6
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	f7f4 fef1 	bl	8000188 <__aeabi_dsub>
 800b3a6:	a334      	add	r3, pc, #208	; (adr r3, 800b478 <__ieee754_pow+0x718>)
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	f7f5 f8a4 	bl	80004f8 <__aeabi_dmul>
 800b3b0:	a333      	add	r3, pc, #204	; (adr r3, 800b480 <__ieee754_pow+0x720>)
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	460f      	mov	r7, r1
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	4629      	mov	r1, r5
 800b3be:	f7f5 f89b 	bl	80004f8 <__aeabi_dmul>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	4639      	mov	r1, r7
 800b3ca:	f7f4 fedf 	bl	800018c <__adddf3>
 800b3ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3d0:	4b34      	ldr	r3, [pc, #208]	; (800b4a4 <__ieee754_pow+0x744>)
 800b3d2:	4413      	add	r3, r2
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	f7f4 fed8 	bl	800018c <__adddf3>
 800b3dc:	4680      	mov	r8, r0
 800b3de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b3e0:	4689      	mov	r9, r1
 800b3e2:	f7f5 f81f 	bl	8000424 <__aeabi_i2d>
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	460d      	mov	r5, r1
 800b3ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3ec:	4b2e      	ldr	r3, [pc, #184]	; (800b4a8 <__ieee754_pow+0x748>)
 800b3ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	f7f4 fec6 	bl	800018c <__adddf3>
 800b400:	4632      	mov	r2, r6
 800b402:	463b      	mov	r3, r7
 800b404:	f7f4 fec2 	bl	800018c <__adddf3>
 800b408:	4622      	mov	r2, r4
 800b40a:	462b      	mov	r3, r5
 800b40c:	f7f4 febe 	bl	800018c <__adddf3>
 800b410:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b414:	4622      	mov	r2, r4
 800b416:	462b      	mov	r3, r5
 800b418:	4650      	mov	r0, sl
 800b41a:	468b      	mov	fp, r1
 800b41c:	f7f4 feb4 	bl	8000188 <__aeabi_dsub>
 800b420:	4632      	mov	r2, r6
 800b422:	463b      	mov	r3, r7
 800b424:	f7f4 feb0 	bl	8000188 <__aeabi_dsub>
 800b428:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b42c:	f7f4 feac 	bl	8000188 <__aeabi_dsub>
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	4640      	mov	r0, r8
 800b436:	4649      	mov	r1, r9
 800b438:	e608      	b.n	800b04c <__ieee754_pow+0x2ec>
 800b43a:	bf00      	nop
 800b43c:	f3af 8000 	nop.w
 800b440:	4a454eef 	.word	0x4a454eef
 800b444:	3fca7e28 	.word	0x3fca7e28
 800b448:	93c9db65 	.word	0x93c9db65
 800b44c:	3fcd864a 	.word	0x3fcd864a
 800b450:	a91d4101 	.word	0xa91d4101
 800b454:	3fd17460 	.word	0x3fd17460
 800b458:	518f264d 	.word	0x518f264d
 800b45c:	3fd55555 	.word	0x3fd55555
 800b460:	db6fabff 	.word	0xdb6fabff
 800b464:	3fdb6db6 	.word	0x3fdb6db6
 800b468:	33333303 	.word	0x33333303
 800b46c:	3fe33333 	.word	0x3fe33333
 800b470:	e0000000 	.word	0xe0000000
 800b474:	3feec709 	.word	0x3feec709
 800b478:	dc3a03fd 	.word	0xdc3a03fd
 800b47c:	3feec709 	.word	0x3feec709
 800b480:	145b01f5 	.word	0x145b01f5
 800b484:	be3e2fe0 	.word	0xbe3e2fe0
 800b488:	7ff00000 	.word	0x7ff00000
 800b48c:	43400000 	.word	0x43400000
 800b490:	0003988e 	.word	0x0003988e
 800b494:	000bb679 	.word	0x000bb679
 800b498:	0800bba8 	.word	0x0800bba8
 800b49c:	3ff00000 	.word	0x3ff00000
 800b4a0:	40080000 	.word	0x40080000
 800b4a4:	0800bbc8 	.word	0x0800bbc8
 800b4a8:	0800bbb8 	.word	0x0800bbb8
 800b4ac:	2601      	movs	r6, #1
 800b4ae:	e667      	b.n	800b180 <__ieee754_pow+0x420>
 800b4b0:	a39d      	add	r3, pc, #628	; (adr r3, 800b728 <__ieee754_pow+0x9c8>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	4640      	mov	r0, r8
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	f7f4 fe67 	bl	800018c <__adddf3>
 800b4be:	4622      	mov	r2, r4
 800b4c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4c4:	462b      	mov	r3, r5
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	f7f4 fe5d 	bl	8000188 <__aeabi_dsub>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4d6:	f7f5 fa9f 	bl	8000a18 <__aeabi_dcmpgt>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	f47f ae01 	bne.w	800b0e2 <__ieee754_pow+0x382>
 800b4e0:	4aa5      	ldr	r2, [pc, #660]	; (800b778 <__ieee754_pow+0xa18>)
 800b4e2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	f340 8103 	ble.w	800b6f2 <__ieee754_pow+0x992>
 800b4ec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	151b      	asrs	r3, r3, #20
 800b4f4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b4f8:	fa4a f303 	asr.w	r3, sl, r3
 800b4fc:	4433      	add	r3, r6
 800b4fe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b502:	4f9e      	ldr	r7, [pc, #632]	; (800b77c <__ieee754_pow+0xa1c>)
 800b504:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b508:	4117      	asrs	r7, r2
 800b50a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b50e:	ea23 0107 	bic.w	r1, r3, r7
 800b512:	f1c2 0214 	rsb	r2, r2, #20
 800b516:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b51a:	460b      	mov	r3, r1
 800b51c:	fa4a fa02 	asr.w	sl, sl, r2
 800b520:	2e00      	cmp	r6, #0
 800b522:	4602      	mov	r2, r0
 800b524:	4629      	mov	r1, r5
 800b526:	4620      	mov	r0, r4
 800b528:	bfb8      	it	lt
 800b52a:	f1ca 0a00 	rsblt	sl, sl, #0
 800b52e:	f7f4 fe2b 	bl	8000188 <__aeabi_dsub>
 800b532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b53a:	2400      	movs	r4, #0
 800b53c:	4642      	mov	r2, r8
 800b53e:	464b      	mov	r3, r9
 800b540:	f7f4 fe24 	bl	800018c <__adddf3>
 800b544:	a37a      	add	r3, pc, #488	; (adr r3, 800b730 <__ieee754_pow+0x9d0>)
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	4620      	mov	r0, r4
 800b54c:	460d      	mov	r5, r1
 800b54e:	f7f4 ffd3 	bl	80004f8 <__aeabi_dmul>
 800b552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b556:	4606      	mov	r6, r0
 800b558:	460f      	mov	r7, r1
 800b55a:	4620      	mov	r0, r4
 800b55c:	4629      	mov	r1, r5
 800b55e:	f7f4 fe13 	bl	8000188 <__aeabi_dsub>
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	4640      	mov	r0, r8
 800b568:	4649      	mov	r1, r9
 800b56a:	f7f4 fe0d 	bl	8000188 <__aeabi_dsub>
 800b56e:	a372      	add	r3, pc, #456	; (adr r3, 800b738 <__ieee754_pow+0x9d8>)
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	f7f4 ffc0 	bl	80004f8 <__aeabi_dmul>
 800b578:	a371      	add	r3, pc, #452	; (adr r3, 800b740 <__ieee754_pow+0x9e0>)
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	4680      	mov	r8, r0
 800b580:	4689      	mov	r9, r1
 800b582:	4620      	mov	r0, r4
 800b584:	4629      	mov	r1, r5
 800b586:	f7f4 ffb7 	bl	80004f8 <__aeabi_dmul>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	4640      	mov	r0, r8
 800b590:	4649      	mov	r1, r9
 800b592:	f7f4 fdfb 	bl	800018c <__adddf3>
 800b596:	4604      	mov	r4, r0
 800b598:	460d      	mov	r5, r1
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	4630      	mov	r0, r6
 800b5a0:	4639      	mov	r1, r7
 800b5a2:	f7f4 fdf3 	bl	800018c <__adddf3>
 800b5a6:	4632      	mov	r2, r6
 800b5a8:	463b      	mov	r3, r7
 800b5aa:	4680      	mov	r8, r0
 800b5ac:	4689      	mov	r9, r1
 800b5ae:	f7f4 fdeb 	bl	8000188 <__aeabi_dsub>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	f7f4 fde5 	bl	8000188 <__aeabi_dsub>
 800b5be:	4642      	mov	r2, r8
 800b5c0:	4606      	mov	r6, r0
 800b5c2:	460f      	mov	r7, r1
 800b5c4:	464b      	mov	r3, r9
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	4649      	mov	r1, r9
 800b5ca:	f7f4 ff95 	bl	80004f8 <__aeabi_dmul>
 800b5ce:	a35e      	add	r3, pc, #376	; (adr r3, 800b748 <__ieee754_pow+0x9e8>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	460d      	mov	r5, r1
 800b5d8:	f7f4 ff8e 	bl	80004f8 <__aeabi_dmul>
 800b5dc:	a35c      	add	r3, pc, #368	; (adr r3, 800b750 <__ieee754_pow+0x9f0>)
 800b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e2:	f7f4 fdd1 	bl	8000188 <__aeabi_dsub>
 800b5e6:	4622      	mov	r2, r4
 800b5e8:	462b      	mov	r3, r5
 800b5ea:	f7f4 ff85 	bl	80004f8 <__aeabi_dmul>
 800b5ee:	a35a      	add	r3, pc, #360	; (adr r3, 800b758 <__ieee754_pow+0x9f8>)
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	f7f4 fdca 	bl	800018c <__adddf3>
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	f7f4 ff7c 	bl	80004f8 <__aeabi_dmul>
 800b600:	a357      	add	r3, pc, #348	; (adr r3, 800b760 <__ieee754_pow+0xa00>)
 800b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b606:	f7f4 fdbf 	bl	8000188 <__aeabi_dsub>
 800b60a:	4622      	mov	r2, r4
 800b60c:	462b      	mov	r3, r5
 800b60e:	f7f4 ff73 	bl	80004f8 <__aeabi_dmul>
 800b612:	a355      	add	r3, pc, #340	; (adr r3, 800b768 <__ieee754_pow+0xa08>)
 800b614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b618:	f7f4 fdb8 	bl	800018c <__adddf3>
 800b61c:	4622      	mov	r2, r4
 800b61e:	462b      	mov	r3, r5
 800b620:	f7f4 ff6a 	bl	80004f8 <__aeabi_dmul>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4640      	mov	r0, r8
 800b62a:	4649      	mov	r1, r9
 800b62c:	f7f4 fdac 	bl	8000188 <__aeabi_dsub>
 800b630:	4604      	mov	r4, r0
 800b632:	460d      	mov	r5, r1
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	4640      	mov	r0, r8
 800b63a:	4649      	mov	r1, r9
 800b63c:	f7f4 ff5c 	bl	80004f8 <__aeabi_dmul>
 800b640:	2200      	movs	r2, #0
 800b642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b64a:	4620      	mov	r0, r4
 800b64c:	4629      	mov	r1, r5
 800b64e:	f7f4 fd9b 	bl	8000188 <__aeabi_dsub>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b65a:	f7f5 f877 	bl	800074c <__aeabi_ddiv>
 800b65e:	4632      	mov	r2, r6
 800b660:	4604      	mov	r4, r0
 800b662:	460d      	mov	r5, r1
 800b664:	463b      	mov	r3, r7
 800b666:	4640      	mov	r0, r8
 800b668:	4649      	mov	r1, r9
 800b66a:	f7f4 ff45 	bl	80004f8 <__aeabi_dmul>
 800b66e:	4632      	mov	r2, r6
 800b670:	463b      	mov	r3, r7
 800b672:	f7f4 fd8b 	bl	800018c <__adddf3>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	4620      	mov	r0, r4
 800b67c:	4629      	mov	r1, r5
 800b67e:	f7f4 fd83 	bl	8000188 <__aeabi_dsub>
 800b682:	4642      	mov	r2, r8
 800b684:	464b      	mov	r3, r9
 800b686:	f7f4 fd7f 	bl	8000188 <__aeabi_dsub>
 800b68a:	4602      	mov	r2, r0
 800b68c:	460b      	mov	r3, r1
 800b68e:	2000      	movs	r0, #0
 800b690:	493b      	ldr	r1, [pc, #236]	; (800b780 <__ieee754_pow+0xa20>)
 800b692:	f7f4 fd79 	bl	8000188 <__aeabi_dsub>
 800b696:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b69a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b69e:	da2b      	bge.n	800b6f8 <__ieee754_pow+0x998>
 800b6a0:	4652      	mov	r2, sl
 800b6a2:	f000 f9b9 	bl	800ba18 <scalbn>
 800b6a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6aa:	f7ff bbf2 	b.w	800ae92 <__ieee754_pow+0x132>
 800b6ae:	4b35      	ldr	r3, [pc, #212]	; (800b784 <__ieee754_pow+0xa24>)
 800b6b0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b6b4:	429f      	cmp	r7, r3
 800b6b6:	f77f af13 	ble.w	800b4e0 <__ieee754_pow+0x780>
 800b6ba:	4b33      	ldr	r3, [pc, #204]	; (800b788 <__ieee754_pow+0xa28>)
 800b6bc:	440b      	add	r3, r1
 800b6be:	4303      	orrs	r3, r0
 800b6c0:	d00b      	beq.n	800b6da <__ieee754_pow+0x97a>
 800b6c2:	a32b      	add	r3, pc, #172	; (adr r3, 800b770 <__ieee754_pow+0xa10>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6cc:	f7f4 ff14 	bl	80004f8 <__aeabi_dmul>
 800b6d0:	a327      	add	r3, pc, #156	; (adr r3, 800b770 <__ieee754_pow+0xa10>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f7ff bbdc 	b.w	800ae92 <__ieee754_pow+0x132>
 800b6da:	4622      	mov	r2, r4
 800b6dc:	462b      	mov	r3, r5
 800b6de:	f7f4 fd53 	bl	8000188 <__aeabi_dsub>
 800b6e2:	4642      	mov	r2, r8
 800b6e4:	464b      	mov	r3, r9
 800b6e6:	f7f5 f98d 	bl	8000a04 <__aeabi_dcmpge>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	f43f aef8 	beq.w	800b4e0 <__ieee754_pow+0x780>
 800b6f0:	e7e7      	b.n	800b6c2 <__ieee754_pow+0x962>
 800b6f2:	f04f 0a00 	mov.w	sl, #0
 800b6f6:	e71e      	b.n	800b536 <__ieee754_pow+0x7d6>
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	e7d4      	b.n	800b6a6 <__ieee754_pow+0x946>
 800b6fc:	f04f 0b00 	mov.w	fp, #0
 800b700:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b780 <__ieee754_pow+0xa20>
 800b704:	f7ff bbb0 	b.w	800ae68 <__ieee754_pow+0x108>
 800b708:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b70c:	f7ff bbac 	b.w	800ae68 <__ieee754_pow+0x108>
 800b710:	4638      	mov	r0, r7
 800b712:	4641      	mov	r1, r8
 800b714:	f7ff bbbf 	b.w	800ae96 <__ieee754_pow+0x136>
 800b718:	9200      	str	r2, [sp, #0]
 800b71a:	f7ff bb7f 	b.w	800ae1c <__ieee754_pow+0xbc>
 800b71e:	2300      	movs	r3, #0
 800b720:	f7ff bb69 	b.w	800adf6 <__ieee754_pow+0x96>
 800b724:	f3af 8000 	nop.w
 800b728:	652b82fe 	.word	0x652b82fe
 800b72c:	3c971547 	.word	0x3c971547
 800b730:	00000000 	.word	0x00000000
 800b734:	3fe62e43 	.word	0x3fe62e43
 800b738:	fefa39ef 	.word	0xfefa39ef
 800b73c:	3fe62e42 	.word	0x3fe62e42
 800b740:	0ca86c39 	.word	0x0ca86c39
 800b744:	be205c61 	.word	0xbe205c61
 800b748:	72bea4d0 	.word	0x72bea4d0
 800b74c:	3e663769 	.word	0x3e663769
 800b750:	c5d26bf1 	.word	0xc5d26bf1
 800b754:	3ebbbd41 	.word	0x3ebbbd41
 800b758:	af25de2c 	.word	0xaf25de2c
 800b75c:	3f11566a 	.word	0x3f11566a
 800b760:	16bebd93 	.word	0x16bebd93
 800b764:	3f66c16c 	.word	0x3f66c16c
 800b768:	5555553e 	.word	0x5555553e
 800b76c:	3fc55555 	.word	0x3fc55555
 800b770:	c2f8f359 	.word	0xc2f8f359
 800b774:	01a56e1f 	.word	0x01a56e1f
 800b778:	3fe00000 	.word	0x3fe00000
 800b77c:	000fffff 	.word	0x000fffff
 800b780:	3ff00000 	.word	0x3ff00000
 800b784:	4090cbff 	.word	0x4090cbff
 800b788:	3f6f3400 	.word	0x3f6f3400

0800b78c <__ieee754_sqrt>:
 800b78c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b8e0 <__ieee754_sqrt+0x154>
 800b790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b794:	ea3c 0c01 	bics.w	ip, ip, r1
 800b798:	460b      	mov	r3, r1
 800b79a:	4606      	mov	r6, r0
 800b79c:	460d      	mov	r5, r1
 800b79e:	460a      	mov	r2, r1
 800b7a0:	4607      	mov	r7, r0
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	d10e      	bne.n	800b7c4 <__ieee754_sqrt+0x38>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	f7f4 fea6 	bl	80004f8 <__aeabi_dmul>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	f7f4 fcea 	bl	800018c <__adddf3>
 800b7b8:	4606      	mov	r6, r0
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	4630      	mov	r0, r6
 800b7be:	4629      	mov	r1, r5
 800b7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c4:	2900      	cmp	r1, #0
 800b7c6:	dc0d      	bgt.n	800b7e4 <__ieee754_sqrt+0x58>
 800b7c8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b7cc:	ea5c 0707 	orrs.w	r7, ip, r7
 800b7d0:	d0f4      	beq.n	800b7bc <__ieee754_sqrt+0x30>
 800b7d2:	b139      	cbz	r1, 800b7e4 <__ieee754_sqrt+0x58>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	f7f4 fcd7 	bl	8000188 <__aeabi_dsub>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	f7f4 ffb5 	bl	800074c <__aeabi_ddiv>
 800b7e2:	e7e9      	b.n	800b7b8 <__ieee754_sqrt+0x2c>
 800b7e4:	1512      	asrs	r2, r2, #20
 800b7e6:	d074      	beq.n	800b8d2 <__ieee754_sqrt+0x146>
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	07d5      	lsls	r5, r2, #31
 800b7ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7f0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800b7f4:	bf5e      	ittt	pl
 800b7f6:	0fe3      	lsrpl	r3, r4, #31
 800b7f8:	0064      	lslpl	r4, r4, #1
 800b7fa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800b7fe:	0fe3      	lsrs	r3, r4, #31
 800b800:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b804:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800b808:	2516      	movs	r5, #22
 800b80a:	4601      	mov	r1, r0
 800b80c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b810:	1076      	asrs	r6, r6, #1
 800b812:	0064      	lsls	r4, r4, #1
 800b814:	188f      	adds	r7, r1, r2
 800b816:	429f      	cmp	r7, r3
 800b818:	bfde      	ittt	le
 800b81a:	1bdb      	suble	r3, r3, r7
 800b81c:	18b9      	addle	r1, r7, r2
 800b81e:	1880      	addle	r0, r0, r2
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	3d01      	subs	r5, #1
 800b824:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b828:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b82c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b830:	d1f0      	bne.n	800b814 <__ieee754_sqrt+0x88>
 800b832:	462a      	mov	r2, r5
 800b834:	f04f 0e20 	mov.w	lr, #32
 800b838:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b83c:	428b      	cmp	r3, r1
 800b83e:	eb07 0c05 	add.w	ip, r7, r5
 800b842:	dc02      	bgt.n	800b84a <__ieee754_sqrt+0xbe>
 800b844:	d113      	bne.n	800b86e <__ieee754_sqrt+0xe2>
 800b846:	45a4      	cmp	ip, r4
 800b848:	d811      	bhi.n	800b86e <__ieee754_sqrt+0xe2>
 800b84a:	f1bc 0f00 	cmp.w	ip, #0
 800b84e:	eb0c 0507 	add.w	r5, ip, r7
 800b852:	da43      	bge.n	800b8dc <__ieee754_sqrt+0x150>
 800b854:	2d00      	cmp	r5, #0
 800b856:	db41      	blt.n	800b8dc <__ieee754_sqrt+0x150>
 800b858:	f101 0801 	add.w	r8, r1, #1
 800b85c:	1a5b      	subs	r3, r3, r1
 800b85e:	4641      	mov	r1, r8
 800b860:	45a4      	cmp	ip, r4
 800b862:	bf88      	it	hi
 800b864:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b868:	eba4 040c 	sub.w	r4, r4, ip
 800b86c:	443a      	add	r2, r7
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	f1be 0e01 	subs.w	lr, lr, #1
 800b874:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b878:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800b87c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b880:	d1dc      	bne.n	800b83c <__ieee754_sqrt+0xb0>
 800b882:	4323      	orrs	r3, r4
 800b884:	d006      	beq.n	800b894 <__ieee754_sqrt+0x108>
 800b886:	1c54      	adds	r4, r2, #1
 800b888:	bf0b      	itete	eq
 800b88a:	4672      	moveq	r2, lr
 800b88c:	3201      	addne	r2, #1
 800b88e:	3001      	addeq	r0, #1
 800b890:	f022 0201 	bicne.w	r2, r2, #1
 800b894:	1043      	asrs	r3, r0, #1
 800b896:	07c1      	lsls	r1, r0, #31
 800b898:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b89c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b8a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b8a4:	bf48      	it	mi
 800b8a6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800b8b0:	e782      	b.n	800b7b8 <__ieee754_sqrt+0x2c>
 800b8b2:	0ae3      	lsrs	r3, r4, #11
 800b8b4:	3915      	subs	r1, #21
 800b8b6:	0564      	lsls	r4, r4, #21
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d0fa      	beq.n	800b8b2 <__ieee754_sqrt+0x126>
 800b8bc:	02de      	lsls	r6, r3, #11
 800b8be:	d50a      	bpl.n	800b8d6 <__ieee754_sqrt+0x14a>
 800b8c0:	f1c2 0020 	rsb	r0, r2, #32
 800b8c4:	fa24 f000 	lsr.w	r0, r4, r0
 800b8c8:	1e55      	subs	r5, r2, #1
 800b8ca:	4094      	lsls	r4, r2
 800b8cc:	4303      	orrs	r3, r0
 800b8ce:	1b4a      	subs	r2, r1, r5
 800b8d0:	e78a      	b.n	800b7e8 <__ieee754_sqrt+0x5c>
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	e7f0      	b.n	800b8b8 <__ieee754_sqrt+0x12c>
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	3201      	adds	r2, #1
 800b8da:	e7ef      	b.n	800b8bc <__ieee754_sqrt+0x130>
 800b8dc:	4688      	mov	r8, r1
 800b8de:	e7bd      	b.n	800b85c <__ieee754_sqrt+0xd0>
 800b8e0:	7ff00000 	.word	0x7ff00000

0800b8e4 <fabs>:
 800b8e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b8e8:	4770      	bx	lr

0800b8ea <finite>:
 800b8ea:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b8ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b8f2:	0fc0      	lsrs	r0, r0, #31
 800b8f4:	4770      	bx	lr
	...

0800b8f8 <nan>:
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	4901      	ldr	r1, [pc, #4]	; (800b900 <nan+0x8>)
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	7ff80000 	.word	0x7ff80000

0800b904 <rint>:
 800b904:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800b908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b90a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800b90e:	2f13      	cmp	r7, #19
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	460c      	mov	r4, r1
 800b916:	4605      	mov	r5, r0
 800b918:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800b91c:	dc59      	bgt.n	800b9d2 <rint+0xce>
 800b91e:	2f00      	cmp	r7, #0
 800b920:	da2a      	bge.n	800b978 <rint+0x74>
 800b922:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b926:	4301      	orrs	r1, r0
 800b928:	d022      	beq.n	800b970 <rint+0x6c>
 800b92a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800b92e:	4301      	orrs	r1, r0
 800b930:	424d      	negs	r5, r1
 800b932:	430d      	orrs	r5, r1
 800b934:	4936      	ldr	r1, [pc, #216]	; (800ba10 <rint+0x10c>)
 800b936:	0c5c      	lsrs	r4, r3, #17
 800b938:	0b2d      	lsrs	r5, r5, #12
 800b93a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800b93e:	0464      	lsls	r4, r4, #17
 800b940:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b944:	ea45 0304 	orr.w	r3, r5, r4
 800b948:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b94c:	4620      	mov	r0, r4
 800b94e:	4629      	mov	r1, r5
 800b950:	f7f4 fc1c 	bl	800018c <__adddf3>
 800b954:	e9cd 0100 	strd	r0, r1, [sp]
 800b958:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b95c:	462b      	mov	r3, r5
 800b95e:	4622      	mov	r2, r4
 800b960:	f7f4 fc12 	bl	8000188 <__aeabi_dsub>
 800b964:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b968:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4610      	mov	r0, r2
 800b972:	4619      	mov	r1, r3
 800b974:	b003      	add	sp, #12
 800b976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b978:	4926      	ldr	r1, [pc, #152]	; (800ba14 <rint+0x110>)
 800b97a:	4139      	asrs	r1, r7
 800b97c:	ea03 0001 	and.w	r0, r3, r1
 800b980:	4310      	orrs	r0, r2
 800b982:	d0f5      	beq.n	800b970 <rint+0x6c>
 800b984:	084b      	lsrs	r3, r1, #1
 800b986:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800b98a:	ea52 0501 	orrs.w	r5, r2, r1
 800b98e:	d00c      	beq.n	800b9aa <rint+0xa6>
 800b990:	ea24 0303 	bic.w	r3, r4, r3
 800b994:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800b998:	2f13      	cmp	r7, #19
 800b99a:	bf0c      	ite	eq
 800b99c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800b9a0:	2500      	movne	r5, #0
 800b9a2:	fa44 f707 	asr.w	r7, r4, r7
 800b9a6:	ea43 0407 	orr.w	r4, r3, r7
 800b9aa:	4919      	ldr	r1, [pc, #100]	; (800ba10 <rint+0x10c>)
 800b9ac:	4623      	mov	r3, r4
 800b9ae:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800b9b2:	462a      	mov	r2, r5
 800b9b4:	e9d6 4500 	ldrd	r4, r5, [r6]
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	f7f4 fbe6 	bl	800018c <__adddf3>
 800b9c0:	e9cd 0100 	strd	r0, r1, [sp]
 800b9c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9c8:	4622      	mov	r2, r4
 800b9ca:	462b      	mov	r3, r5
 800b9cc:	f7f4 fbdc 	bl	8000188 <__aeabi_dsub>
 800b9d0:	e7cc      	b.n	800b96c <rint+0x68>
 800b9d2:	2f33      	cmp	r7, #51	; 0x33
 800b9d4:	dd05      	ble.n	800b9e2 <rint+0xde>
 800b9d6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800b9da:	d1c9      	bne.n	800b970 <rint+0x6c>
 800b9dc:	f7f4 fbd6 	bl	800018c <__adddf3>
 800b9e0:	e7c4      	b.n	800b96c <rint+0x68>
 800b9e2:	f04f 31ff 	mov.w	r1, #4294967295
 800b9e6:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800b9ea:	fa21 f10c 	lsr.w	r1, r1, ip
 800b9ee:	4208      	tst	r0, r1
 800b9f0:	d0be      	beq.n	800b970 <rint+0x6c>
 800b9f2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800b9f6:	bf18      	it	ne
 800b9f8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800b9fc:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800ba00:	bf1e      	ittt	ne
 800ba02:	ea20 0303 	bicne.w	r3, r0, r3
 800ba06:	fa45 fc0c 	asrne.w	ip, r5, ip
 800ba0a:	ea43 050c 	orrne.w	r5, r3, ip
 800ba0e:	e7cc      	b.n	800b9aa <rint+0xa6>
 800ba10:	0800bbd8 	.word	0x0800bbd8
 800ba14:	000fffff 	.word	0x000fffff

0800ba18 <scalbn>:
 800ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ba1e:	4604      	mov	r4, r0
 800ba20:	460d      	mov	r5, r1
 800ba22:	4617      	mov	r7, r2
 800ba24:	460b      	mov	r3, r1
 800ba26:	b996      	cbnz	r6, 800ba4e <scalbn+0x36>
 800ba28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba2c:	4303      	orrs	r3, r0
 800ba2e:	d039      	beq.n	800baa4 <scalbn+0x8c>
 800ba30:	4b35      	ldr	r3, [pc, #212]	; (800bb08 <scalbn+0xf0>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	f7f4 fd60 	bl	80004f8 <__aeabi_dmul>
 800ba38:	4b34      	ldr	r3, [pc, #208]	; (800bb0c <scalbn+0xf4>)
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	429f      	cmp	r7, r3
 800ba3e:	460d      	mov	r5, r1
 800ba40:	da0f      	bge.n	800ba62 <scalbn+0x4a>
 800ba42:	a32d      	add	r3, pc, #180	; (adr r3, 800baf8 <scalbn+0xe0>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	f7f4 fd56 	bl	80004f8 <__aeabi_dmul>
 800ba4c:	e006      	b.n	800ba5c <scalbn+0x44>
 800ba4e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ba52:	4296      	cmp	r6, r2
 800ba54:	d10a      	bne.n	800ba6c <scalbn+0x54>
 800ba56:	4602      	mov	r2, r0
 800ba58:	f7f4 fb98 	bl	800018c <__adddf3>
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	460d      	mov	r5, r1
 800ba60:	e020      	b.n	800baa4 <scalbn+0x8c>
 800ba62:	460b      	mov	r3, r1
 800ba64:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ba68:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ba6c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ba70:	19b9      	adds	r1, r7, r6
 800ba72:	4291      	cmp	r1, r2
 800ba74:	dd0e      	ble.n	800ba94 <scalbn+0x7c>
 800ba76:	a322      	add	r3, pc, #136	; (adr r3, 800bb00 <scalbn+0xe8>)
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ba80:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ba84:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ba88:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ba8c:	4820      	ldr	r0, [pc, #128]	; (800bb10 <scalbn+0xf8>)
 800ba8e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ba92:	e7d9      	b.n	800ba48 <scalbn+0x30>
 800ba94:	2900      	cmp	r1, #0
 800ba96:	dd08      	ble.n	800baaa <scalbn+0x92>
 800ba98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800baa0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800baa4:	4620      	mov	r0, r4
 800baa6:	4629      	mov	r1, r5
 800baa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baaa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800baae:	da16      	bge.n	800bade <scalbn+0xc6>
 800bab0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bab4:	429f      	cmp	r7, r3
 800bab6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800baba:	dd08      	ble.n	800bace <scalbn+0xb6>
 800babc:	4c15      	ldr	r4, [pc, #84]	; (800bb14 <scalbn+0xfc>)
 800babe:	4814      	ldr	r0, [pc, #80]	; (800bb10 <scalbn+0xf8>)
 800bac0:	f363 74df 	bfi	r4, r3, #31, #1
 800bac4:	a30e      	add	r3, pc, #56	; (adr r3, 800bb00 <scalbn+0xe8>)
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	4621      	mov	r1, r4
 800bacc:	e7bc      	b.n	800ba48 <scalbn+0x30>
 800bace:	4c12      	ldr	r4, [pc, #72]	; (800bb18 <scalbn+0x100>)
 800bad0:	4812      	ldr	r0, [pc, #72]	; (800bb1c <scalbn+0x104>)
 800bad2:	f363 74df 	bfi	r4, r3, #31, #1
 800bad6:	a308      	add	r3, pc, #32	; (adr r3, 800baf8 <scalbn+0xe0>)
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	e7f5      	b.n	800baca <scalbn+0xb2>
 800bade:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bae2:	3136      	adds	r1, #54	; 0x36
 800bae4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bae8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800baec:	4620      	mov	r0, r4
 800baee:	4629      	mov	r1, r5
 800baf0:	2200      	movs	r2, #0
 800baf2:	4b0b      	ldr	r3, [pc, #44]	; (800bb20 <scalbn+0x108>)
 800baf4:	e7a8      	b.n	800ba48 <scalbn+0x30>
 800baf6:	bf00      	nop
 800baf8:	c2f8f359 	.word	0xc2f8f359
 800bafc:	01a56e1f 	.word	0x01a56e1f
 800bb00:	8800759c 	.word	0x8800759c
 800bb04:	7e37e43c 	.word	0x7e37e43c
 800bb08:	43500000 	.word	0x43500000
 800bb0c:	ffff3cb0 	.word	0xffff3cb0
 800bb10:	8800759c 	.word	0x8800759c
 800bb14:	7e37e43c 	.word	0x7e37e43c
 800bb18:	01a56e1f 	.word	0x01a56e1f
 800bb1c:	c2f8f359 	.word	0xc2f8f359
 800bb20:	3c900000 	.word	0x3c900000

0800bb24 <_init>:
 800bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb26:	bf00      	nop
 800bb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2a:	bc08      	pop	{r3}
 800bb2c:	469e      	mov	lr, r3
 800bb2e:	4770      	bx	lr

0800bb30 <_fini>:
 800bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb32:	bf00      	nop
 800bb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb36:	bc08      	pop	{r3}
 800bb38:	469e      	mov	lr, r3
 800bb3a:	4770      	bx	lr
